(()=>{"use strict";var e={395:(e,t,r)=>{r.r(t),r.d(t,{WeatherAPI:()=>n});class n{constructor(){this.location,this.data}async fetchWeatherData(e){try{const t=`http://api.weatherapi.com/v1/current.json?key=e263a2c19e3741f8861200301240105&q=${e.toLowerCase()}&aqi=no`,r=await fetch(t),n=await r.json();return console.log(n),this.updateLocation(n.location),this.updateWeatherData(n),n}catch(e){console.log(e),alert(e)}}async updateLocation(e){this.location=e}async updateWeatherData(e){this.data=e}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var a=t[n]={exports:{}};return e[n](a,a.exports,r),a.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{const{WeatherAPI:e}=r(395);console.log("e263a2c19e3741f8861200301240105");const t=new e,n=new class{constructor(e){this.API=e,this.farenheigt=!0}async postWeatherData(){const e=document.querySelector("#city"),t=document.querySelector("#temp"),r=document.querySelector("#weather"),n=document.querySelector("#search").value;if(n)try{const o=await this.API.fetchWeatherData(n);console.log(o),this.API.updateLocation(o.location),this.API.updateWeatherData(o);let a=o.location.name,c=o.current.temp_f+"° / Feels like "+o.current.feelslike_f+"°",i=o.current.temp_c+"° / Feels like "+o.current.feelslike_c+"°",l=o.current.condition.text;o.current.condition.icon,e.innerHTML=a,t.innerHTML=this.farenheigt?c:i,r.innerHTML=l}catch(e){console.log(e),alert(e)}else console.log("Enter a City"),alert("Please Enter a City")}toggleFarenheit(){const e=document.querySelector("#temp"),t=document.querySelector("#toggle-degree");if(this.farenheigt){this.farenheigt=!1;let t=this.API.data.current.temp_c+"° / Feels like "+this.API.data.current.feelslike_c+"°";e.innerHTML=t}else{this.farenheigt=!0;let t=this.API.data.current.temp_f+"° / Feels like "+this.API.data.current.feelslike_f+"°";e.innerHTML=t}this.farenheigt?t.innerHTML="C":t.innerHTML="F"}giveToggleButtonFunctionality(){document.querySelector("#toggle-degree").addEventListener("click",this.toggleFarenheit)}}(t);n.giveToggleButtonFunctionality(),document.querySelector("#submit-city").addEventListener("click",(async e=>{e.preventDefault(),n.postWeatherData()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,