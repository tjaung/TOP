(()=>{"use strict";var t={365:(t,e,r)=>{r.d(e,{A:()=>a});var n=r(354),o=r.n(n),i=r(314),s=r.n(i)()(o());s.push([t.id,".remove-bg {\n    height: 100vh;\n    width: 100vw;\n    position: absolute;\n    z-index: 10;\n    background: grey;\n}\n\n.full-card {\n    z-index: 99;\n    position: absolute;\n    background: lightblue;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,WAAW;IACX,gBAAgB;AACpB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,qBAAqB;AACzB",sourcesContent:[".remove-bg {\r\n    height: 100vh;\r\n    width: 100vw;\r\n    position: absolute;\r\n    z-index: 10;\r\n    background: grey;\r\n}\r\n\r\n.full-card {\r\n    z-index: 99;\r\n    position: absolute;\r\n    background: lightblue;\r\n}"],sourceRoot:""}]);const a=s},314:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var d=[].concat(t[l]);n&&s[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),r&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=r):d[2]=r),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},354:t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},72:t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var i={},s=[],a=0;a<t.length;a++){var c=t[a],l=n.base?c[0]+n.base:c[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var p=r(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var f=o(h,n);n.byIndex=a,e.splice(a,0,{identifier:u,updater:f,references:1})}s.push(u)}return s}function o(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,o){var i=n(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=r(i[s]);e[a].references--}for(var c=n(t,o),l=0;l<i.length;l++){var d=r(i[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=c}}},40:t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},540:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},56:(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},825:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},113:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,exports:{}};return t[n](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.nc=void 0,(()=>{class t{constructor(t,e,r,n){this.title=t,this.jobStatus=0,this.priority=e,this.dueDate=r,this.detail=n}updateStatus(t){this.jobStatus!=t&&(this.jobStatus=t)}updateDetail(t){this.detail=t}updateTitle(t){this.title=t}updatePriority(t){this.priority=t}updateDueDate(t){this.dueDate=t}returnTitle(){return this.title}returnStatus(){return this.jobStatus}returnPriority(){return this.priority}returnDueDate(){return this.dueDate}returnDetail(){return this.detail}returnItemJSON(){return{title:this.returnTitle(),status:this.returnStatus(),dueDate:this.returnDueDate(),priority:this.returnPriority(),detail:this.returnDetail()}}}const e=new class{constructor(){}throwError(t){throw new Error(t)}},n=(t,e,...r)=>{const n=document.createElement(t);for(let t in e)n.setAttribute(t,e[t]);return r.forEach((t=>{t instanceof Element?n.appendChild(t):n.appendChild(document.createTextNode(t))})),n};class o{constructor(t,e){this.task=e,this.project=t}createFullCard(){const t=n("button",{id:"card-remove-button",class:"full-card-info"},"Delete Task");t.addEventListener("click",(t=>{const e=document.querySelector("#card-area");this.deleteTarget(e),this.project.removeTask(this.task.title),console.log(this.project.returnProjectJSON())}));const e=n("h1",{id:"full-card-title",class:"full-card-info",contenteditable:!0},this.task.title),r=n("h2",{id:"full-card-status",class:"full-card-info",contenteditable:!0},this.task.status),o=n("h2",{id:"full-card-dueDate",class:"full-card-info",contenteditable:!0},this.task.dueDate),i=n("h2",{id:"full-card-priority",class:"full-card-info",contenteditable:!0},this.task.priority),s=n("p",{id:"full-card-detail",class:"full-card-info",contenteditable:!0},this.task.detail),a=n("div",{class:"full-card"},e,r,o,i,s,t),c=n("div",{class:"remove-bg",id:"remove-full-card-bg"},a),l=n("div",{id:"card-area"},a,c);return c.addEventListener("click",(t=>{this.task.updateTitle(e.innerHTML),this.task.updateStatus(r.innerHTML),this.task.updateDueDate(o.innerHTML),this.task.updateDetail(s.innerHTML),this.task.updatePriority(i.innerHTML),this.deleteParent(t),console.log(this.project)})),l}createMinimizedCard(){const t=n("h1",{id:"mini-card-title",class:"mini-card-info"},this.task.title),e=n("h2",{id:"mini-card-status",class:"mini-card-info"},this.task.status),r=n("h2",{id:"mini-card-dueDate",class:"mini-card-info"},this.task.dueDate),o=n("h2",{id:"mini-card-priority",class:"mini-card-info"},this.task.priority),i=n("div",{class:"mini-card"},t,e,r,o);return i.addEventListener("click",(()=>{document.body.append(this.createFullCard(this.project,this.task))})),i}deleteParent(t){t.currentTarget.parentNode.remove()}deleteTarget(t){t.remove()}}class i{constructor(t){this.project=t}renderAndUpdateProject(){const t=document.querySelector(`#${this.project.name}`);if(console.log(t),null!==t)for(;t.firstChild;)t.removeChild(t.lastChild);t.append(...this.renderTaskCards()),console.log(this.project.returnAllTasks())}createNewTaskForm(e){console.log(e);const r=n("input",{id:"new-card-title",class:"new-card-info",type:"text"}),o=n("input",{id:"new-card-dueDate",class:"new-card-info"}),i=n("datalist",{id:"priorities"},n("option",{value:"low"}),n("option",{value:"medium"}),n("option",{value:"high"})),s=n("input",{id:"new-card-priority",class:"new-card-info",list:"priorities"},i),a=n("input",{id:"new-card-detail",class:"new-card-info",type:"text"}),c=n("button",{id:"new-card-create-button",class:"new-card-info"},"Create Task"),l=n("div",{class:"full-card"},r,o,s,a,c),d=n("div",{class:"remove-bg",id:"remove-full-card-bg"},l),u=n("div",{id:"card-area"},l,d);d.addEventListener("click",(function(t){t.currentTarget.parentNode.remove()})),c.addEventListener("click",(r=>{console.log(e),e=function(e){const r=document.querySelector("#new-card-title").value,n=document.querySelector("#new-card-dueDate").value,o=document.querySelector("#new-card-priority").value,i=document.querySelector("#new-card-detail").value;console.log(e);let s=new t(r,o,n,i);return e.addTask(s)}(e),this.renderAndUpdateProject(),r.currentTarget.parentNode.parentNode.remove()})),document.body.append(u)}createProjectDOM(){const t=this.project,e=n("button",{class:"new-task-button"},"+");e.addEventListener("click",(()=>{this.createNewTaskForm(t)}));const r=n("div",{class:"project",id:this.project.name},this.project.name,e);this.project.returnAllTasks(),r.append(...this.renderTaskCards()),document.querySelector("#projects").appendChild(r)}renderTaskCards(){const t=this.project.returnAllTasks();let e=[];for(let r of t){let t=new o(this.project,r).bind(this.renderAndUpdateProject);e.push(t.createMinimizedCard())}return console.log(e),e}getProject(){return this.project}}var s=r(72),a=r.n(s),c=r(825),l=r.n(c),d=r(40),u=r.n(d),p=r(56),h=r.n(p),f=r(540),m=r.n(f),v=r(113),g=r.n(v),j=r(365),k={};k.styleTagTransform=g(),k.setAttributes=h(),k.insert=u().bind(null,"head"),k.domAPI=l(),k.insertStyleElement=m(),a()(j.A,k),j.A&&j.A.locals&&j.A.locals;const y=new class{constructor(){this.projectList=[]}addProject(t){this.projectList.some((e=>e.name===t.name))?e.throwError("Project Already Exists"):this.projectList.push(t)}removeProject(t){this.projectList=this.projectList.filter((e=>e.name!==t))}returnAllProjectTitles(){const t=[];for(const e of this.projectList)t.push(e.name);return t}returnAllProjects(){return this.projectList}returnSingleProject(t){let e,r=[];for(e=0;e<this.projectList.length;e++)this.projectList[e].name.toLowerCase().includes(t.toLowerCase())&&r.push(e);return this.projectList[r]}},b=new t("do the thing",1,"8/17/2034","you need to do the thing"),A=new t("do this thing too",2,"9/17/2034","you need to do the thing but not more important than other thing"),w=new class{constructor(t){this.name=t,this.tasks=[]}addTask(t){this.tasks.filter((e=>t.title!==e))&&this.tasks.push(t)}removeTask(t){this.tasks=this.tasks.filter((e=>e.title!==t))}filterTasks(t){let e,r=[];for(e=0;e<this.tasks.length;e++)this.tasks[e].title.toLowerCase().includes(t.toLowerCase())&&r.push(e);return this.tasks[r]}returnAllTasks(){return this.tasks}returnProjectName(){return this.name}returnProjectJSON(){let t=[];for(const e of this.tasks)t.push(e.returnItemJSON());return{name:this.returnProjectName(),tasks:t}}updateProjectName(t){this.name=t}}("testProject");new t("this is in project 2",2,"9/17/2034","you need to do the thing but not more important than other thing"),w.addTask(b),w.addTask(A),y.addProject(w),console.log(y.returnAllProjects());let T=new class{constructor(t){this.projectHandler=t}initialize(){let t=this.projectHandler.returnAllProjects();console.log(this.projectHandler);const e=[];for(let r of t){console.log(r);let t=new i(r);console.log(t.getProject()),e.push(t.createProjectDOM())}document.querySelector("#projects").append(...e)}}(y);T.initialize(y)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,