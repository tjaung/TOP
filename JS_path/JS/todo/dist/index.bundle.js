(()=>{"use strict";var e={97:(e,t,r)=>{r.d(t,{A:()=>s});var n=r(354),i=r.n(n),o=r(314),a=r.n(o)()(i());a.push([e.id,".mini-card {\n    min-height: 200px;\n    max-height: 800px;\n    max-width: 400px;\n    border-radius: 20px solid black;\n    background: white;\n    color: black;\n    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.15);\n    width: 80%;\n    align-self: center;\n    padding: 12px;\n    border-radius: 4px;\n    text-overflow: ellipsis;\n    font-size: 16px;\n    cursor: move;\n}\n.remove-bg {\n    position:absolute;\n    width:100%;\n    height:100%;\n    z-index:9;\n    background-color: rgba(0,0,0,0.5);\n}\n\n.full-card {\n    z-index: 99;\n    position: absolute;\n    background: white;\n    height: 80%;\n    width: 80%;\n    display: grid;\n    grid-template:\n        'title title title' auto\n        ' desc desc priority' auto\n        'desc desc date' auto\n        'desc desc status' auto\n        ' button foot foot ' auto\n}\n\n#new-card-title, #full-card-title {\n    grid-area: title;\n}\n\n#new-card-detail, #full-card-detail {\n    grid-area: desc;\n}\n\n#new-card-priority, #full-card-priority{\n    grid-area: priority;\n}\n\n#new-card-dueDate, #full-card-dueDate{\n    grid-area: date;\n}\n\n#card-remove-button, #new-card-create-button{\n    grid-area: button;\n}\n\n#full-card-status {\n    grid-area: status;\n}\n\n#card-area {\n    position:fixed;\n    padding:0;\n    margin:0;\n\n    top:0;\n    left:0;\n\n    width: 100%;\n    height: 100%;\n    background:rgba(255,255,255,0.5);\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.hide {\n    display:none;\n}\n\n.is-dragging {\n    scale: 1.05;\n    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.25);\n    background: rgb(50, 50, 50);\n    color: white;\n  }","",{version:3,sources:["webpack://./src/styles/cards.css"],names:[],mappings:"AAAA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,gBAAgB;IAChB,+BAA+B;IAC/B,iBAAiB;IACjB,YAAY;IACZ,4CAA4C;IAC5C,UAAU;IACV,kBAAkB;IAClB,aAAa;IACb,kBAAkB;IAClB,uBAAuB;IACvB,eAAe;IACf,YAAY;AAChB;AACA;IACI,iBAAiB;IACjB,UAAU;IACV,WAAW;IACX,SAAS;IACT,iCAAiC;AACrC;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,iBAAiB;IACjB,WAAW;IACX,UAAU;IACV,aAAa;IACb;;;;;;AAMJ;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,SAAS;IACT,QAAQ;;IAER,KAAK;IACL,MAAM;;IAEN,WAAW;IACX,YAAY;IACZ,gCAAgC;;IAEhC,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,4CAA4C;IAC5C,2BAA2B;IAC3B,YAAY;EACd",sourcesContent:[".mini-card {\r\n    min-height: 200px;\r\n    max-height: 800px;\r\n    max-width: 400px;\r\n    border-radius: 20px solid black;\r\n    background: white;\r\n    color: black;\r\n    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.15);\r\n    width: 80%;\r\n    align-self: center;\r\n    padding: 12px;\r\n    border-radius: 4px;\r\n    text-overflow: ellipsis;\r\n    font-size: 16px;\r\n    cursor: move;\r\n}\r\n.remove-bg {\r\n    position:absolute;\r\n    width:100%;\r\n    height:100%;\r\n    z-index:9;\r\n    background-color: rgba(0,0,0,0.5);\r\n}\r\n\r\n.full-card {\r\n    z-index: 99;\r\n    position: absolute;\r\n    background: white;\r\n    height: 80%;\r\n    width: 80%;\r\n    display: grid;\r\n    grid-template:\r\n        'title title title' auto\r\n        ' desc desc priority' auto\r\n        'desc desc date' auto\r\n        'desc desc status' auto\r\n        ' button foot foot ' auto\r\n}\r\n\r\n#new-card-title, #full-card-title {\r\n    grid-area: title;\r\n}\r\n\r\n#new-card-detail, #full-card-detail {\r\n    grid-area: desc;\r\n}\r\n\r\n#new-card-priority, #full-card-priority{\r\n    grid-area: priority;\r\n}\r\n\r\n#new-card-dueDate, #full-card-dueDate{\r\n    grid-area: date;\r\n}\r\n\r\n#card-remove-button, #new-card-create-button{\r\n    grid-area: button;\r\n}\r\n\r\n#full-card-status {\r\n    grid-area: status;\r\n}\r\n\r\n#card-area {\r\n    position:fixed;\r\n    padding:0;\r\n    margin:0;\r\n\r\n    top:0;\r\n    left:0;\r\n\r\n    width: 100%;\r\n    height: 100%;\r\n    background:rgba(255,255,255,0.5);\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.hide {\r\n    display:none;\r\n}\r\n\r\n.is-dragging {\r\n    scale: 1.05;\r\n    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.25);\r\n    background: rgb(50, 50, 50);\r\n    color: white;\r\n  }"],sourceRoot:""}]);const s=a},249:(e,t,r)=>{r.d(t,{A:()=>s});var n=r(354),i=r.n(n),o=r(314),a=r.n(o)()(i());a.push([e.id,"* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-family: sans-serif;\n  \n    /* -ms-overflow-style: none; \n    scrollbar-width: none; Firefox */\n}\n\n/* ---- RESET/BASIC STYLING ---- */\n  \n  /* *::-webkit-scrollbar {\n    display: none;\n  } */\n\n.container {\n    display: grid;\n    grid-template-rows: 1fr 3fr 1fr;\n    grid-template-columns: 100vw;\n    grid-template-areas:\n        'header'\n        'article'\n        'foot';\n}\n\n.top {\n    grid-area: header;\n    min-height: 20vh;\n    display: grid;\n    grid-template-rows: 1fr 1fr;\n    grid-template-columns: 1fr 1fr;\n    grid-template-areas: \n        'page logo'\n        'searchbar searchbar';    \n    justify-content: space-around;\n    align-items: center;\n    padding-left: 5%;\n    padding-top: 5%;\n    background:#faf2ff;\n}\n\n\n.page {\n    grid-area: page;\n    margin-left: 10%;\n}\n\n.logo {\n    grid-area: logo;\n    display: grid;\n    justify-content: center;\n    margin-left: 45%;\n}\n\n.search {\n    grid-area: searchbar;\n    margin-right: 10%;\n    margin-left: 5%;\n    color: #474847;\n}\n\n.searchbar {\n    width:100%;\n    border-radius: 25px;\n    color: #474847;\n}\n.searchbar input:focus {\n    outline: none;\n}\n/*\nThe sidebar element has a gap of 50px\nThe text elements in the sidebar are centered with grid\n*/\n.sidebar {\n    background-color: #81667A;\n    width: 12rem;\n    height: 100vh;\n    padding: 0;\n    position: fixed;\n    transition: transform 300ms ease-in;\n    opacity: 90%;\n    z-index: 999;\n}\n.sidebar--isHidden {\n    transform: translateX(-12rem);\n    transition: transform 300ms ease-out;\n}\n.sidebar-menu {\n    list-style: none;\n    padding: 1.5rem;\n    margin-top: 0;\n}\n.sidebar-menu__item {\n    display: block;\n    cursor: pointer;\n    margin-bottom: 0.5rem;\n}\n\n.sidebar-meu_item :nth-child(1){\n    position: fixed;\n    left: -5;\n}\n\n.sidebar-menu__item a {\n    color: white;\n    text-decoration: none;\n    display: block;\n}\n.sidebar-menu__item a:hover {\n    color: grey;\n    transition: color 150ms linear;\n}\n\n\n.openbtn {\n    width: 30px;\n    height: 30px;\n    border-radius: 15%;\n    border:none;\n    outline:none;\n    cursor:pointer;\n    position: fixed;\n    transition: transform 300ms ease-in;\n    left: 12rem;\n    color: #474847;\n    background-color:#81667A;\n    font-weight: bold;\n  }\n\n.openbtn--isHidden {\n    transform: translateX(-12rem);\n    transition: transform 300ms ease-out;\n  }\n\n.openbtn:hover {\n    background-color: #f4a261;\n    transition: all 150ms ease-in;\n}\n\n#logo {\n    width: 4.5rem;\n    height: 4.5rem;\n}\n\n#foot{\n    grid-area:foot;\n    background: #252525;\n    height: 5vh;\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;IACtB,uBAAuB;;IAEvB;oCACgC;AACpC;;AAEA,kCAAkC;;EAEhC;;KAEG;;AAEL;IACI,aAAa;IACb,+BAA+B;IAC/B,4BAA4B;IAC5B;;;cAGU;AACd;;AAEA;IACI,iBAAiB;IACjB,gBAAgB;IAChB,aAAa;IACb,2BAA2B;IAC3B,8BAA8B;IAC9B;;6BAEyB;IACzB,6BAA6B;IAC7B,mBAAmB;IACnB,gBAAgB;IAChB,eAAe;IACf,kBAAkB;AACtB;;;AAGA;IACI,eAAe;IACf,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA;IACI,oBAAoB;IACpB,iBAAiB;IACjB,eAAe;IACf,cAAc;AAClB;;AAEA;IACI,UAAU;IACV,mBAAmB;IACnB,cAAc;AAClB;AACA;IACI,aAAa;AACjB;AACA;;;CAGC;AACD;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,UAAU;IACV,eAAe;IACf,mCAAmC;IACnC,YAAY;IACZ,YAAY;AAChB;AACA;IACI,6BAA6B;IAC7B,oCAAoC;AACxC;AACA;IACI,gBAAgB;IAChB,eAAe;IACf,aAAa;AACjB;AACA;IACI,cAAc;IACd,eAAe;IACf,qBAAqB;AACzB;;AAEA;IACI,eAAe;IACf,QAAQ;AACZ;;AAEA;IACI,YAAY;IACZ,qBAAqB;IACrB,cAAc;AAClB;AACA;IACI,WAAW;IACX,8BAA8B;AAClC;;;AAGA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,cAAc;IACd,eAAe;IACf,mCAAmC;IACnC,WAAW;IACX,cAAc;IACd,wBAAwB;IACxB,iBAAiB;EACnB;;AAEF;IACI,6BAA6B;IAC7B,oCAAoC;EACtC;;AAEF;IACI,yBAAyB;IACzB,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,cAAc;AAClB;;AAEA;IACI,cAAc;IACd,mBAAmB;IACnB,WAAW;AACf",sourcesContent:["* {\r\n    padding: 0;\r\n    margin: 0;\r\n    box-sizing: border-box;\r\n    font-family: sans-serif;\r\n  \r\n    /* -ms-overflow-style: none; \r\n    scrollbar-width: none; Firefox */\r\n}\r\n\r\n/* ---- RESET/BASIC STYLING ---- */\r\n  \r\n  /* *::-webkit-scrollbar {\r\n    display: none;\r\n  } */\r\n\r\n.container {\r\n    display: grid;\r\n    grid-template-rows: 1fr 3fr 1fr;\r\n    grid-template-columns: 100vw;\r\n    grid-template-areas:\r\n        'header'\r\n        'article'\r\n        'foot';\r\n}\r\n\r\n.top {\r\n    grid-area: header;\r\n    min-height: 20vh;\r\n    display: grid;\r\n    grid-template-rows: 1fr 1fr;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-template-areas: \r\n        'page logo'\r\n        'searchbar searchbar';    \r\n    justify-content: space-around;\r\n    align-items: center;\r\n    padding-left: 5%;\r\n    padding-top: 5%;\r\n    background:#faf2ff;\r\n}\r\n\r\n\r\n.page {\r\n    grid-area: page;\r\n    margin-left: 10%;\r\n}\r\n\r\n.logo {\r\n    grid-area: logo;\r\n    display: grid;\r\n    justify-content: center;\r\n    margin-left: 45%;\r\n}\r\n\r\n.search {\r\n    grid-area: searchbar;\r\n    margin-right: 10%;\r\n    margin-left: 5%;\r\n    color: #474847;\r\n}\r\n\r\n.searchbar {\r\n    width:100%;\r\n    border-radius: 25px;\r\n    color: #474847;\r\n}\r\n.searchbar input:focus {\r\n    outline: none;\r\n}\r\n/*\r\nThe sidebar element has a gap of 50px\r\nThe text elements in the sidebar are centered with grid\r\n*/\r\n.sidebar {\r\n    background-color: #81667A;\r\n    width: 12rem;\r\n    height: 100vh;\r\n    padding: 0;\r\n    position: fixed;\r\n    transition: transform 300ms ease-in;\r\n    opacity: 90%;\r\n    z-index: 999;\r\n}\r\n.sidebar--isHidden {\r\n    transform: translateX(-12rem);\r\n    transition: transform 300ms ease-out;\r\n}\r\n.sidebar-menu {\r\n    list-style: none;\r\n    padding: 1.5rem;\r\n    margin-top: 0;\r\n}\r\n.sidebar-menu__item {\r\n    display: block;\r\n    cursor: pointer;\r\n    margin-bottom: 0.5rem;\r\n}\r\n\r\n.sidebar-meu_item :nth-child(1){\r\n    position: fixed;\r\n    left: -5;\r\n}\r\n\r\n.sidebar-menu__item a {\r\n    color: white;\r\n    text-decoration: none;\r\n    display: block;\r\n}\r\n.sidebar-menu__item a:hover {\r\n    color: grey;\r\n    transition: color 150ms linear;\r\n}\r\n\r\n\r\n.openbtn {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 15%;\r\n    border:none;\r\n    outline:none;\r\n    cursor:pointer;\r\n    position: fixed;\r\n    transition: transform 300ms ease-in;\r\n    left: 12rem;\r\n    color: #474847;\r\n    background-color:#81667A;\r\n    font-weight: bold;\r\n  }\r\n\r\n.openbtn--isHidden {\r\n    transform: translateX(-12rem);\r\n    transition: transform 300ms ease-out;\r\n  }\r\n\r\n.openbtn:hover {\r\n    background-color: #f4a261;\r\n    transition: all 150ms ease-in;\r\n}\r\n\r\n#logo {\r\n    width: 4.5rem;\r\n    height: 4.5rem;\r\n}\r\n\r\n#foot{\r\n    grid-area:foot;\r\n    background: #252525;\r\n    height: 5vh;\r\n}"],sourceRoot:""}]);const s=a},416:(e,t,r)=>{r.d(t,{A:()=>s});var n=r(354),i=r.n(n),o=r(314),a=r.n(o)()(i());a.push([e.id,"#projects {\n    display:flex;\n    flex-direction: column;\n    position: fixed;\n    width: 100%;\n    top: 20vh;\n    padding: 1rem 1rem 1rem 1rem;\n}\n\n#project-section-header {\n    display: grid;\n    grid-template-rows: repeat(2, 1fr);\n    padding-bottom: 12px;\n}\n\n#status-labels {\n    align-content: center;\n    justify-items: center;\n    /* background: #f4f4f4; */\n}\n\n#new-project-button {\n    align-self: start;\n    height: 3rem;\n    width: 6rem;\n    margin-left: 2rem;\n}\n\n.project-header {\n    /* background: #f4f4f4; */\n    /* border: 6px solid black; */\n    border-radius: 30px;\n    padding: 2rem;\n    background: lightblue;\n}\n\n.head-lbl {\n    background: #f4f4f4;\n    height:100%;\n    width:100%;\n    text-align:center;\n}\n\n.project-options {\n    display: grid;\n    grid-template-columns: .5fr 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n}\n\n.project-name {\n    font-size: 22px;\n    font-weight: bold;\n    margin-bottom: 8px;\n}\n.project-name-change-button{\n    height: 2rem;\n    width: 2rem;\n}\n\n.project-delete-button{\n    height: 3rem;\n    width: 3rem;\n    justify-self: end;\n}\n\n.project-collapse-button{\n    height:50px;\n    width:50px;\n    grid-column-start: 3;\n    justify-self: end;\n    grid-row-start: 2;\n}\n\n.new-task-button{\n    height: 3rem;\n    width: 3rem;\n}\n\n.project-status-wrapper {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 12px;\n    padding: 0rem 2rem;\n}\n\n.project-status-col {\n    background: #f4f4f4;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: start;\n    gap: 16px;\n    overflow: scroll;\n    height: 100%;\n    transition: all 1s;\n\n}\n\n.hover {\n    background: blue;\n    z-index:99;\n}\n\n.save{\n    background: lightblue;\n}\n.project-collapse-button:hover {\n    color: green;\n}\n\n.project-collapse-button::before {\n    content: ' ';\n    display: inline-block;\n\n    border-top: 5px solid transparent;\n    border-bottom: 5px solid transparent;\n    border-left: 5px solid currentColor;\n\n    vertical-align: middle;\n    margin-right: .7rem;\n    transform: translateY(-2px);\n\n    transition: transform .2s ease-out;\n}\n\n.toggle-button-transition {\n    transform: rotate(90deg) translateX(-3px);\n  }\n\n.collapsed {\n    background-color: red;\n    transform: translateY(-100%);\n    max-height:0px;\n }\n\n\n.project {\n    overflow: hidden;\n  }\n  \n/* #expand-contract {\nborder-bottom: 1px solid red;\nmargin-top: -100%;\ntransition: all 1s;\n} */\n\n.project-status-col.expanded {\n    background-color: green;\n    margin-top: 0;\n}\n\n.hide{\n    display:none;\n}\n\n.clicked{\n    color: yellow;\n}","",{version:3,sources:["webpack://./src/styles/projectArea.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,sBAAsB;IACtB,eAAe;IACf,WAAW;IACX,SAAS;IACT,4BAA4B;AAChC;;AAEA;IACI,aAAa;IACb,kCAAkC;IAClC,oBAAoB;AACxB;;AAEA;IACI,qBAAqB;IACrB,qBAAqB;IACrB,yBAAyB;AAC7B;;AAEA;IACI,iBAAiB;IACjB,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,yBAAyB;IACzB,6BAA6B;IAC7B,mBAAmB;IACnB,aAAa;IACb,qBAAqB;AACzB;;AAEA;IACI,mBAAmB;IACnB,WAAW;IACX,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,mCAAmC;IACnC,2BAA2B;AAC/B;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,kBAAkB;AACtB;AACA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,UAAU;IACV,oBAAoB;IACpB,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,aAAa;IACb,qCAAqC;IACrC,cAAc;IACd,kBAAkB;AACtB;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,sBAAsB;IACtB,SAAS;IACT,gBAAgB;IAChB,YAAY;IACZ,kBAAkB;;AAEtB;;AAEA;IACI,gBAAgB;IAChB,UAAU;AACd;;AAEA;IACI,qBAAqB;AACzB;AACA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,qBAAqB;;IAErB,iCAAiC;IACjC,oCAAoC;IACpC,mCAAmC;;IAEnC,sBAAsB;IACtB,mBAAmB;IACnB,2BAA2B;;IAE3B,kCAAkC;AACtC;;AAEA;IACI,yCAAyC;EAC3C;;AAEF;IACI,qBAAqB;IACrB,4BAA4B;IAC5B,cAAc;CACjB;;;AAGD;IACI,gBAAgB;EAClB;;AAEF;;;;GAIG;;AAEH;IACI,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB",sourcesContent:["#projects {\r\n    display:flex;\r\n    flex-direction: column;\r\n    position: fixed;\r\n    width: 100%;\r\n    top: 20vh;\r\n    padding: 1rem 1rem 1rem 1rem;\r\n}\r\n\r\n#project-section-header {\r\n    display: grid;\r\n    grid-template-rows: repeat(2, 1fr);\r\n    padding-bottom: 12px;\r\n}\r\n\r\n#status-labels {\r\n    align-content: center;\r\n    justify-items: center;\r\n    /* background: #f4f4f4; */\r\n}\r\n\r\n#new-project-button {\r\n    align-self: start;\r\n    height: 3rem;\r\n    width: 6rem;\r\n    margin-left: 2rem;\r\n}\r\n\r\n.project-header {\r\n    /* background: #f4f4f4; */\r\n    /* border: 6px solid black; */\r\n    border-radius: 30px;\r\n    padding: 2rem;\r\n    background: lightblue;\r\n}\r\n\r\n.head-lbl {\r\n    background: #f4f4f4;\r\n    height:100%;\r\n    width:100%;\r\n    text-align:center;\r\n}\r\n\r\n.project-options {\r\n    display: grid;\r\n    grid-template-columns: .5fr 1fr 1fr;\r\n    grid-template-rows: 1fr 1fr;\r\n}\r\n\r\n.project-name {\r\n    font-size: 22px;\r\n    font-weight: bold;\r\n    margin-bottom: 8px;\r\n}\r\n.project-name-change-button{\r\n    height: 2rem;\r\n    width: 2rem;\r\n}\r\n\r\n.project-delete-button{\r\n    height: 3rem;\r\n    width: 3rem;\r\n    justify-self: end;\r\n}\r\n\r\n.project-collapse-button{\r\n    height:50px;\r\n    width:50px;\r\n    grid-column-start: 3;\r\n    justify-self: end;\r\n    grid-row-start: 2;\r\n}\r\n\r\n.new-task-button{\r\n    height: 3rem;\r\n    width: 3rem;\r\n}\r\n\r\n.project-status-wrapper {\r\n    display: grid;\r\n    grid-template-columns: repeat(3, 1fr);\r\n    grid-gap: 12px;\r\n    padding: 0rem 2rem;\r\n}\r\n\r\n.project-status-col {\r\n    background: #f4f4f4;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    justify-content: start;\r\n    gap: 16px;\r\n    overflow: scroll;\r\n    height: 100%;\r\n    transition: all 1s;\r\n\r\n}\r\n\r\n.hover {\r\n    background: blue;\r\n    z-index:99;\r\n}\r\n\r\n.save{\r\n    background: lightblue;\r\n}\r\n.project-collapse-button:hover {\r\n    color: green;\r\n}\r\n\r\n.project-collapse-button::before {\r\n    content: ' ';\r\n    display: inline-block;\r\n\r\n    border-top: 5px solid transparent;\r\n    border-bottom: 5px solid transparent;\r\n    border-left: 5px solid currentColor;\r\n\r\n    vertical-align: middle;\r\n    margin-right: .7rem;\r\n    transform: translateY(-2px);\r\n\r\n    transition: transform .2s ease-out;\r\n}\r\n\r\n.toggle-button-transition {\r\n    transform: rotate(90deg) translateX(-3px);\r\n  }\r\n\r\n.collapsed {\r\n    background-color: red;\r\n    transform: translateY(-100%);\r\n    max-height:0px;\r\n }\r\n\r\n\r\n.project {\r\n    overflow: hidden;\r\n  }\r\n  \r\n/* #expand-contract {\r\nborder-bottom: 1px solid red;\r\nmargin-top: -100%;\r\ntransition: all 1s;\r\n} */\r\n\r\n.project-status-col.expanded {\r\n    background-color: green;\r\n    margin-top: 0;\r\n}\r\n\r\n.hide{\r\n    display:none;\r\n}\r\n\r\n.clicked{\r\n    color: yellow;\r\n}"],sourceRoot:""}]);const s=a},314:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,i,o){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(n)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(a[d]=!0)}for(var c=0;c<e.length;c++){var A=[].concat(e[c]);n&&a[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),r&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=r):A[2]=r),i&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=i):A[4]="".concat(i)),t.push(A))}},t}},354:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(i," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},72:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var o={},a=[],s=0;s<e.length;s++){var d=e[s],c=n.base?d[0]+n.base:d[0],A=o[c]||0,l="".concat(c," ").concat(A);o[c]=A+1;var u=r(l),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)t[u].references++,t[u].updater(p);else{var h=i(p,n);n.byIndex=s,t.splice(s,0,{identifier:l,updater:h,references:1})}a.push(l)}return a}function i(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,i){var o=n(e=e||[],i=i||{});return function(e){e=e||[];for(var a=0;a<o.length;a++){var s=r(o[a]);t[s].references--}for(var d=n(e,i),c=0;c<o.length;c++){var A=r(o[c]);0===t[A].references&&(t[A].updater(),t.splice(A,1))}o=d}}},659:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},540:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},56:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,i&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},113:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={id:n,exports:{}};return e[n](o,o.exports,r),o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{class e{constructor(e){this.name=e,this.tasks=[]}addTask(e){this.tasks.filter((t=>e.title!==t))&&this.tasks.push(e)}removeTask(e){this.tasks=this.tasks.filter((t=>t.title!==e))}filterTasks(e){let t,r=[];for(t=0;t<this.tasks.length;t++)this.tasks[t].title.toLowerCase().includes(e.toLowerCase())&&r.push(t);return this.tasks[r]}returnAllTasks(){return this.tasks}returnAllTaskTitles(){let e=[];for(let t of this.tasks)e.push(t.returnTitle());return console.log(e),e}returnProjectName(){return this.name}returnProjectNameWithNoWhitespace(){return this.name.replace(/\s+/g,"-")}returnProjectJSON(){let e=[];for(const t of this.tasks)e.push(t.returnItemJSON());return{name:this.returnProjectName(),tasks:e}}updateProjectName(e){this.name=e}}const t=(e,t,...r)=>{const n=document.createElement(e);for(let e in t)n.setAttribute(e,t[e]);return r.forEach((e=>{e instanceof Element?n.appendChild(e):n.appendChild(document.createTextNode(e))})),n};function n(e){e.preventDefault();const t=e.currentTarget,r=t.id,n=a(t,e.clientY),i=document.querySelector(".is-dragging"),o=i.dataset.project;console.log("onDragOver task project name",o);let s=r.includes(o);console.log(r),console.log(s),s&&(n?t.insertBefore(i,n):t.appendChild(i))}function i(e){e.preventDefault()}function o(e){const t=e.dataTransfer.getData("text"),r=e.currentTarget,n=document.querySelector(".is-dragging"),i=n.dataset.project,o=r.id;console.log("onDragOver task project name",i);let a=o.includes(i),s=r.dataset.status;if(a){n.dataset.status=s;const r=new CustomEvent("statusChange",{detail:{id:t,newStatus:s}});document.dispatchEvent(r),e.dataTransfer.clearData()}}const a=(e,t)=>{const r=e.querySelectorAll(".mini-card:not(.is-dragging)");let n=null,i=Number.NEGATIVE_INFINITY;return r.forEach((e=>{const{top:r}=e.getBoundingClientRect(),o=t-r;o<0&&o>i&&(i=o,n=e)})),n};var s=r(72),d=r.n(s),c=r(825),A=r.n(c),l=r(659),u=r.n(l),p=r(56),h=r.n(p),m=r(540),g=r.n(m),C=r(113),f=r.n(C),b=r(97),B={};B.styleTagTransform=f(),B.setAttributes=h(),B.insert=u().bind(null,"head"),B.domAPI=A(),B.insertStyleElement=g(),d()(b.A,B),b.A&&b.A.locals&&b.A.locals;class I{constructor(e,t){this.task=t,this.projectRenderer=e}setProjectRenderer(e){this.projectRenderer=e}createFullCard(){const e=t("button",{id:"card-remove-button",class:"full-card-info"},"Delete Task");e.addEventListener("click",(e=>{const t=document.querySelector("#card-area");this.deleteTarget(t),this.projectRenderer.project.removeTask(this.task.title),this.projectRenderer.renderAndUpdateProject(),console.log(this.projectRenderer.project.returnProjectJSON())}));const r=t("h1",{id:"full-card-title",class:"full-card-info",contenteditable:!0},this.task.title),n=t("h2",{id:"full-card-status",class:"full-card-info",contenteditable:!0},this.task.jobStatus),i=t("h2",{id:"full-card-dueDate",class:"full-card-info",contenteditable:!0},this.task.dueDate),o=t("h2",{id:"full-card-priority",class:"full-card-info",contenteditable:!0},this.task.priority),a=t("p",{id:"full-card-detail",class:"full-card-info",contenteditable:!0},this.task.detail),s=t("div",{class:"full-card"},r,n,i,o,a,e),d=t("div",{class:"remove-bg",id:"remove-full-card-bg"},s),c=t("div",{id:"card-area"},s,d);return d.addEventListener("click",(e=>{this.task.updateTitle(r.innerHTML),this.task.updateStatus(n.innerHTML),this.task.updateDueDate(i.innerHTML),this.task.updateDetail(a.innerHTML),this.task.updatePriority(o.innerHTML),this.deleteParent(e),this.projectRenderer.renderAndUpdateProject(),console.log(this.projectRenderer.project.returnProjectJSON())})),c}createMinimizedCard(){const e=t("h1",{id:"mini-card-title",class:"mini-card-info"},`Title: ${this.task.title}`),r=(t("h2",{id:"mini-card-status",class:"mini-card-info"},this.task.jobStatus),t("h2",{id:"mini-card-dueDate",class:"mini-card-info"},`Due: ${this.task.dueDate}`)),n=t("h2",{id:"mini-card-priority",class:"mini-card-info"},`Priority: ${this.task.priority}`),i=t("div",{class:"mini-card",id:this.task.title.replace(/\s+/g,"-"),draggable:!0},e,r,n);return i.setAttribute("data-project",this.projectRenderer.project.returnProjectNameWithNoWhitespace()),i.setAttribute("data-status",this.task.returnStatusAsHtmlData()),i.addEventListener("click",(()=>{document.body.append(this.createFullCard(this.projectRenderer.project,this.task))})),i.addEventListener("dragstart",(e=>{!function(e){const t=e.target.id;e.dataTransfer.setData("text",t),e.target.classList.add("is-dragging")}(e)})),i.addEventListener("dragend",(e=>{e.target.classList.remove("is-dragging")})),i}deleteParent(e){e.currentTarget.parentNode.remove()}deleteTarget(e){e.remove()}returnStatus(){return this.task.jobStatus}}class j{constructor(e,t,r,n,i){this.title=e,this.jobStatus=t,this.priority=r,this.dueDate=n,this.detail=i,document.addEventListener("statusChange",(e=>{const t=e.detail.id,r=e.detail.newStatus;t===this.title&&(this.updateStatus(r),console.log(`Status of TodoItem ${this.title} changed to ${this.jobStatus}`))}))}updateStatus(e){this.jobStatus!=e&&(this.jobStatus=e,console.log(this.jobStatus))}updateDetail(e){this.detail=e}updateTitle(e){this.title=e}updatePriority(e){this.priority=e}updateDueDate(e){this.dueDate=e}returnTitle(){return this.title}returnStatus(){return this.jobStatus}returnStatusAsHtmlData(){return this.jobStatus.replace(/\s+/g,"-")}returnPriority(){return this.priority}returnDueDate(){return this.dueDate}returnDetail(){return this.detail}returnItemJSON(){return{title:this.returnTitle(),status:this.returnStatus(),dueDate:this.returnDueDate(),priority:this.returnPriority(),detail:this.returnDetail()}}}const v=new class{constructor(){}throwError(e){throw new Error(e)}};var y=r(416),w={};w.styleTagTransform=f(),w.setAttributes=h(),w.insert=u().bind(null,"head"),w.domAPI=A(),w.insertStyleElement=g(),d()(y.A,w),y.A&&y.A.locals&&y.A.locals;class k{constructor(e,t,r){this.project=t,this.handler=e,this.sidebar=r,document.addEventListener("statusChange",(e=>{const t=e.detail.id.replaceAll("-"," ").toLowerCase(),r=e.detail.newStatus,n=this.project.returnAllTaskTitles();n.forEach((e=>e.toLowerCase())),n.includes(t)&&this.project.filterTasks(t).updateStatus(r)}))}clearAllChildren(e){e.innerHTML=""}renderAndUpdateProject(){const e=this.project.returnProjectNameWithNoWhitespace();document.querySelectorAll(`#${e} .project-status-col`).forEach((e=>{e.hasChildNodes()&&this.clearAllChildren(e)})),this.createProjectDOM(),this.placeTaskCardsIntoProjectDOM()}submitNewTask(){const e=document.querySelector("#new-card-title").value,t=document.querySelector("#new-card-dueDate").value,r=document.querySelector("#new-card-priority").value,n=document.querySelector("#new-card-detail").value;let i=new j(e,"not-started",r,t,n);this.project.addTask(i)}renderTaskCards(){const e=this.project.returnAllTasks();let t=[];for(let r of e){let e=new I(this,r);t.push(e)}return t}placeTaskCardsIntoProjectDOM(){let e=this.renderTaskCards();for(let t of e){let e=`#${t.returnStatus()}-${this.project.returnProjectNameWithNoWhitespace()}`;document.querySelector(e).appendChild(t.createMinimizedCard())}}getProject(){return this.project}updateIDsToNewProjectName(e,t){const r=document.querySelector(`#${e}-title`);let n=document.querySelector(`#${this.project.returnProjectNameWithNoWhitespace()}-edit`);"Edit"!=n.innerHTML&&(n.innerHTML="Edit"),document.querySelector(`#${e}`).setAttribute("id",t);const i=document.querySelector(`#not-started-${e}`);i.setAttribute("id",`not-started-${t}`);const o=document.querySelector(`#in-progress-${e}`);o.setAttribute("id",`in-progress-${t}`);const a=document.querySelector(`#completed-${e}`);a.setAttribute("id",`completed-${t}`),r.setAttribute("id",`${t}-title`),n.setAttribute("id",`${t}-edit`),document.querySelector(`#${e}-delete`).setAttribute("id",`${t}-delete`),document.querySelector(`#${e}-collapse`).setAttribute("id",`${t}-collapse`),(i.hasChildNodes()||o.hasChildNodes()||a.hasChildNodes())&&(i.childNodes.forEach((e=>e.dataset.project=t)),o.childNodes.forEach((e=>e.dataset.project=t)),a.childNodes.forEach((e=>e.dataset.project=t))),this.project.updateProjectName(t),this.sidebar.displayProjects()}createNewTaskForm(){const e=t("input",{id:"new-card-title",class:"new-card-info",type:"text"}),r=t("input",{id:"new-card-dueDate",class:"new-card-info"}),n=t("datalist",{id:"priorities"},t("option",{value:"low"}),t("option",{value:"medium"}),t("option",{value:"high"})),i=t("input",{id:"new-card-priority",class:"new-card-info",list:"priorities"},n),o=t("input",{id:"new-card-detail",class:"new-card-info",type:"text"}),a=t("button",{id:"new-card-create-button",class:"new-card-info"},"Create Task"),s=t("div",{class:"full-card"},e,r,i,o,a),d=t("div",{class:"remove-bg",id:"remove-full-card-bg"},s),c=t("div",{id:"card-area"},s,d);d.addEventListener("click",(function(e){e.currentTarget.parentNode.remove()})),a.addEventListener("click",(e=>{this.submitNewTask(this.project),this.renderAndUpdateProject(),e.currentTarget.parentNode.parentNode.remove()})),document.body.append(c)}createProjectDOM(e){const r=this.project,a=t("button",{class:"new-task-button"},"+");a.addEventListener("click",(()=>{this.createNewTaskForm(r)}));const s=t("div",{class:"project-name",id:`${this.project.returnProjectNameWithNoWhitespace()}-title`},this.project.name),d=t("button",{class:"project-name-change-button",id:`${this.project.returnProjectNameWithNoWhitespace()}-edit`},"Edit");d.addEventListener("click",(e=>{if(d.classList.contains("save")){let e=C.id,t=s.innerHTML.replace(/\s+/g,"-");!function(e){e.innerHTML="Edit",s.setAttribute("contenteditable",!1),e.classList.remove("save")}(d),this.updateIDsToNewProjectName(e,t)}else!function(e){s.setAttribute("contenteditable",!0),s.focus(),e.innerHTML="Save",e.classList.add("save")}(d),d.innerHTML="Save"}));const c=t("button",{class:"project-delete-button",id:`${this.project.returnProjectNameWithNoWhitespace()}-delete`},"Delete");c.addEventListener("click",(()=>{this.handler.removeProject(this.project.name),C.remove(),this.sidebar.displayProjects()}));const A=t("button",{class:"project-collapse-button",id:`${this.project.returnProjectNameWithNoWhitespace()}-collapse`});A.addEventListener("click",(()=>{g.classList.contains("collapsed")?(g.classList.remove("collapsed"),A.classList.remove("toggle-button-transition")):(g.classList.add("collapsed"),A.classList.add("toggle-button-transition"))}));const l=t("div",{class:"project-options"},s,d,c,a,A),u=t("div",{class:"project-header"},l),p=t("div",{class:"project-status-col",id:`not-started-${this.project.returnProjectNameWithNoWhitespace()}`});p.classList.add("not-started"),p.setAttribute("data-status","not-started"),p.addEventListener("dragover",(e=>{n(e)})),p.addEventListener("drop",(e=>{o(e)})),p.addEventListener("dragleave",(e=>{i(e)}));const h=t("div",{class:"project-status-col",id:`in-progress-${this.project.returnProjectNameWithNoWhitespace()}`});h.classList.add("in-progress"),h.setAttribute("data-status","in-progress"),h.addEventListener("dragover",(e=>{n(e)})),h.addEventListener("drop",(e=>{o(e)})),h.addEventListener("dragleave",(e=>{i(e)}));const m=t("div",{class:"project-status-col",id:`completed-${this.project.returnProjectNameWithNoWhitespace()}`});m.classList.add("completed"),m.setAttribute("data-status","completed"),m.addEventListener("dragover",(e=>{n(e)})),m.addEventListener("drop",(e=>{o(e)})),m.addEventListener("dragleave",(e=>{i(e)}));const g=t("div",{class:"project-status-wrapper",id:`columns-${this.project.returnProjectNameWithNoWhitespace()}`},p,h,m),C=t("div",{class:"project",id:this.project.returnProjectNameWithNoWhitespace()},u,g),f=document.querySelector("#projects");if(e){const e=document.querySelector("#project-section-header");f.insertBefore(C,e.nextSibling)}else f.appendChild(C);s.addEventListener("input",(e=>{let t=document.querySelector(`#${this.project.returnProjectNameWithNoWhitespace()}-edit`);"Save"!=t.innerHTML&&(t.innerHTML="Save")}))}}class x{constructor(e){this.handler=e,this.projectList=this.handler.returnAllProjects(),this.DOM=document.querySelector(".sidebar")}getProjectList(){return this.handler.returnAllProjects()}getProjectTitles(){return this.handler.returnAllProjectTitles()}displayProjects(){const e=document.querySelector("#sidebar-project-list");e.hasChildNodes&&(e.innerHTML="");const r=this.getProjectList();for(let n of r){console.log(n);const r=t("li",{class:"project-list-item",id:`${n.returnProjectNameWithNoWhitespace()}-sidebar`},n.returnProjectName());r.addEventListener("click",(e=>{this.showSingleProject(n.returnProjectNameWithNoWhitespace()),console.log(e),e.target.classList.add("clicked")})),e.appendChild(r)}}showSingleProject(e){document.querySelectorAll(".project").forEach((e=>{e.classList.add("hide")})),document.querySelectorAll("li").forEach((e=>e.classList.remove("clicked"))),document.querySelector(`#${e}`).classList.remove("hide")}giveSidebarOpenButtonFunction(){const e=document.querySelector(".openbtn"),t=document.querySelector(".sidebar");e.addEventListener("click",(()=>{t.classList.toggle("sidebar--isHidden"),e.classList.toggle(".openbtn--isHidden"),e.innerHTML=(t.classList.contains("sidebar--isHidden"),"☰")}))}showAllProjects(){document.querySelectorAll(".project").forEach((e=>{e.classList.remove("hide")})),document.querySelectorAll("li").forEach((e=>e.classList.remove("clicked")))}giveShowAllFunction(){document.querySelector("#show-all").addEventListener("click",this.showAllProjects)}activateSidebar(){this.giveSidebarOpenButtonFunction(),this.giveShowAllFunction()}}var E=r(249),S={};S.styleTagTransform=f(),S.setAttributes=h(),S.insert=u().bind(null,"head"),S.domAPI=A(),S.insertStyleElement=g(),d()(E.A,S),E.A&&E.A.locals&&E.A.locals;const T=new class{constructor(e){this.projectList=[],this.sidebar=e}addProject(e){this.projectList.some((t=>t.name===e.name))?v.throwError("Project Already Exists"):this.projectList.push(e)}removeProject(e){this.projectList=this.projectList.filter((t=>t.name!==e))}returnAllProjectTitles(){const e=[];for(const t of this.projectList)e.push(t.name);return e}returnAllProjects(){return this.projectList}returnSingleProject(e){let t,r=[];for(t=0;t<this.projectList.length;t++)this.projectList[t].name.toLowerCase().includes(e.toLowerCase())&&r.push(t);return this.projectList[r]}},L=new j("do the thing","not-started","high","8/17/2034","you need to do the thing"),P=new j("do this thing too","completed","low","9/17/2034","you need to do the thing but not more important than other thing"),N=new e("testProject"),W=new j("this is in project 2","in-progress","medium","9/17/2034","you need to do the thing but not more important than other thing");N.addTask(L),N.addTask(P),T.addProject(N);const q=new e("second project");q.addTask(W),T.addProject(q),console.log(T.returnAllProjects());let D=new class{constructor(e){this.projectHandler=e,this.sidebar=new x(this.projectHandler)}setProjectHandler(e){this.projectHandler=e}setCreateNewProjectButton(){document.querySelector("#new-project-button").addEventListener("click",this.createSingleProject.bind(this))}createSingleProject(){const t="New Project";let r,n=1;const i=this.projectHandler.returnAllProjectTitles();if(i.includes(t))do{r=t+n,n+=1}while(i.includes(r));else r=t;const o=new e(r),a=new k(this.projectHandler,o,this.sidebar);this.projectHandler.addProject(o),a.createProjectDOM(!0),this.sidebar.displayProjects()}initialize(){const e=this.projectHandler.returnAllProjects();for(const t of e){const e=new k(this.projectHandler,t,this.sidebar);e.createProjectDOM(),e.placeTaskCardsIntoProjectDOM()}this.sidebar.activateSidebar(),this.sidebar.displayProjects(),this.setCreateNewProjectButton()}}(T);D.initialize(T)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QkFBQWlGLENBQWtCakYsR0FDZDVPLEtBQUs0TyxlQUFpQkEsQ0FDMUIsQ0FFQSx5QkFBQWtGLEdBQzZCaFEsU0FBU0MsY0FBYyx1QkFDL0JpSSxpQkFBaUIsUUFBU2hNLEtBQUsrVCxvQkFBb0JDLEtBQUtoVSxNQUM3RSxDQUVBLG1CQUFBK1QsR0FDSSxNQUFNRSxFQUFzQixjQUM1QixJQUNJQyxFQURBMVQsRUFBSSxFQUdSLE1BQU0yVCxFQUFnQm5VLEtBQUs0TyxlQUFlMEQseUJBQzFDLEdBQUk2QixFQUFjck0sU0FBU21NLEdBQ3ZCLEdBQ0lDLEVBQWtCRCxFQUFzQnpULEVBQ3hDQSxHQUFLLFFBQ0EyVCxFQUFjck0sU0FBU29NLFNBRWhDQSxFQUFrQkQsRUFHdEIsTUFBTUcsRUFBYSxJQUFJck4sRUFBUW1OLEdBQ3pCRyxFQUFxQixJQUFJMUYsRUFBZ0IzTyxLQUFLNE8sZUFBZ0J3RixFQUFZcFUsS0FBSzZPLFNBQ3JGN08sS0FBSzRPLGVBQWVzRSxXQUFXa0IsR0FDL0JDLEVBQW1CaEYsa0JBQWlCLEdBQ3BDclAsS0FBSzZPLFFBQVEyQixpQkFDakIsQ0FFQSxVQUFBOEQsR0FDSSxNQUFNckMsRUFBY2pTLEtBQUs0TyxlQUFlc0Qsb0JBQ3hDLElBQUssTUFBTXJCLEtBQVFvQixFQUFhLENBQzVCLE1BQU1zQyxFQUFpQixJQUFJNUYsRUFBZ0IzTyxLQUFLNE8sZUFBZ0JpQyxFQUFNN1EsS0FBSzZPLFNBQzNFMEYsRUFBZWxGLG1CQUNma0YsRUFBZWpGLDhCQUNuQixDQUNBdFAsS0FBSzZPLFFBQVFvRSxrQkFDYmpULEtBQUs2TyxRQUFRMkIsa0JBQ2J4USxLQUFLOFQsMkJBQ1QsR0RSMkJsRixHQUUvQmdGLEVBQUtVLFdBQVcxRixFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9zdHlsZXMvY2FyZHMuY3NzIiwid2VicGFjazovL3RvZG8vLi9zcmMvc3R5bGVzL21haW4uY3NzIiwid2VicGFjazovL3RvZG8vLi9zcmMvc3R5bGVzL3Byb2plY3RBcmVhLmNzcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly90b2RvLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3RvZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL25vbmNlIiwid2VicGFjazovL3RvZG8vLi9zcmMvcHJvamVjdE9iai5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2NvbXBvbmVudE1ha2Vycy5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2RyYWdGdW5jdGlvbnMuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9zdHlsZXMvY2FyZHMuY3NzP2Q5OGIiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9jYXJkRGlzcGxheS5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL3RvZG9PYmouanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9wcm9qZWN0SGFuZGxlci5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2Vycm9yTG9nZ2VyLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvc3R5bGVzL3Byb2plY3RBcmVhLmNzcz8xYTY2Iiwid2VicGFjazovL3RvZG8vLi9zcmMvcHJvamVjdERpc3BsYXkuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9zaWRlYmFyLmpzIiwid2VicGFjazovL3RvZG8vLi9zcmMvc3R5bGVzL21haW4uY3NzP2U4MGEiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL3BhZ2VDb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGAubWluaS1jYXJkIHtcclxuICAgIG1pbi1oZWlnaHQ6IDIwMHB4O1xyXG4gICAgbWF4LWhlaWdodDogODAwcHg7XHJcbiAgICBtYXgtd2lkdGg6IDQwMHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMjBweCBzb2xpZCBibGFjaztcclxuICAgIGJhY2tncm91bmQ6IHdoaXRlO1xyXG4gICAgY29sb3I6IGJsYWNrO1xyXG4gICAgYm94LXNoYWRvdzogMHB4IDVweCAxNXB4IHJnYmEoMCwgMCwgMCwgMC4xNSk7XHJcbiAgICB3aWR0aDogODAlO1xyXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xyXG4gICAgcGFkZGluZzogMTJweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgY3Vyc29yOiBtb3ZlO1xyXG59XHJcbi5yZW1vdmUtYmcge1xyXG4gICAgcG9zaXRpb246YWJzb2x1dGU7XHJcbiAgICB3aWR0aDoxMDAlO1xyXG4gICAgaGVpZ2h0OjEwMCU7XHJcbiAgICB6LWluZGV4Ojk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuNSk7XHJcbn1cclxuXHJcbi5mdWxsLWNhcmQge1xyXG4gICAgei1pbmRleDogOTk7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcclxuICAgIGhlaWdodDogODAlO1xyXG4gICAgd2lkdGg6IDgwJTtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlOlxyXG4gICAgICAgICd0aXRsZSB0aXRsZSB0aXRsZScgYXV0b1xyXG4gICAgICAgICcgZGVzYyBkZXNjIHByaW9yaXR5JyBhdXRvXHJcbiAgICAgICAgJ2Rlc2MgZGVzYyBkYXRlJyBhdXRvXHJcbiAgICAgICAgJ2Rlc2MgZGVzYyBzdGF0dXMnIGF1dG9cclxuICAgICAgICAnIGJ1dHRvbiBmb290IGZvb3QgJyBhdXRvXHJcbn1cclxuXHJcbiNuZXctY2FyZC10aXRsZSwgI2Z1bGwtY2FyZC10aXRsZSB7XHJcbiAgICBncmlkLWFyZWE6IHRpdGxlO1xyXG59XHJcblxyXG4jbmV3LWNhcmQtZGV0YWlsLCAjZnVsbC1jYXJkLWRldGFpbCB7XHJcbiAgICBncmlkLWFyZWE6IGRlc2M7XHJcbn1cclxuXHJcbiNuZXctY2FyZC1wcmlvcml0eSwgI2Z1bGwtY2FyZC1wcmlvcml0eXtcclxuICAgIGdyaWQtYXJlYTogcHJpb3JpdHk7XHJcbn1cclxuXHJcbiNuZXctY2FyZC1kdWVEYXRlLCAjZnVsbC1jYXJkLWR1ZURhdGV7XHJcbiAgICBncmlkLWFyZWE6IGRhdGU7XHJcbn1cclxuXHJcbiNjYXJkLXJlbW92ZS1idXR0b24sICNuZXctY2FyZC1jcmVhdGUtYnV0dG9ue1xyXG4gICAgZ3JpZC1hcmVhOiBidXR0b247XHJcbn1cclxuXHJcbiNmdWxsLWNhcmQtc3RhdHVzIHtcclxuICAgIGdyaWQtYXJlYTogc3RhdHVzO1xyXG59XHJcblxyXG4jY2FyZC1hcmVhIHtcclxuICAgIHBvc2l0aW9uOmZpeGVkO1xyXG4gICAgcGFkZGluZzowO1xyXG4gICAgbWFyZ2luOjA7XHJcblxyXG4gICAgdG9wOjA7XHJcbiAgICBsZWZ0OjA7XHJcblxyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBiYWNrZ3JvdW5kOnJnYmEoMjU1LDI1NSwyNTUsMC41KTtcclxuXHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxufVxyXG5cclxuLmhpZGUge1xyXG4gICAgZGlzcGxheTpub25lO1xyXG59XHJcblxyXG4uaXMtZHJhZ2dpbmcge1xyXG4gICAgc2NhbGU6IDEuMDU7XHJcbiAgICBib3gtc2hhZG93OiAwcHggNXB4IDE1cHggcmdiYSgwLCAwLCAwLCAwLjI1KTtcclxuICAgIGJhY2tncm91bmQ6IHJnYig1MCwgNTAsIDUwKTtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICB9YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGVzL2NhcmRzLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLGlCQUFpQjtJQUNqQixpQkFBaUI7SUFDakIsZ0JBQWdCO0lBQ2hCLCtCQUErQjtJQUMvQixpQkFBaUI7SUFDakIsWUFBWTtJQUNaLDRDQUE0QztJQUM1QyxVQUFVO0lBQ1Ysa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsdUJBQXVCO0lBQ3ZCLGVBQWU7SUFDZixZQUFZO0FBQ2hCO0FBQ0E7SUFDSSxpQkFBaUI7SUFDakIsVUFBVTtJQUNWLFdBQVc7SUFDWCxTQUFTO0lBQ1QsaUNBQWlDO0FBQ3JDOztBQUVBO0lBQ0ksV0FBVztJQUNYLGtCQUFrQjtJQUNsQixpQkFBaUI7SUFDakIsV0FBVztJQUNYLFVBQVU7SUFDVixhQUFhO0lBQ2I7Ozs7OztBQU1KOztBQUVBO0lBQ0ksZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTtJQUNJLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxjQUFjO0lBQ2QsU0FBUztJQUNULFFBQVE7O0lBRVIsS0FBSztJQUNMLE1BQU07O0lBRU4sV0FBVztJQUNYLFlBQVk7SUFDWixnQ0FBZ0M7O0lBRWhDLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsNENBQTRDO0lBQzVDLDJCQUEyQjtJQUMzQixZQUFZO0VBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLm1pbmktY2FyZCB7XFxyXFxuICAgIG1pbi1oZWlnaHQ6IDIwMHB4O1xcclxcbiAgICBtYXgtaGVpZ2h0OiA4MDBweDtcXHJcXG4gICAgbWF4LXdpZHRoOiA0MDBweDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMjBweCBzb2xpZCBibGFjaztcXHJcXG4gICAgYmFja2dyb3VuZDogd2hpdGU7XFxyXFxuICAgIGNvbG9yOiBibGFjaztcXHJcXG4gICAgYm94LXNoYWRvdzogMHB4IDVweCAxNXB4IHJnYmEoMCwgMCwgMCwgMC4xNSk7XFxyXFxuICAgIHdpZHRoOiA4MCU7XFxyXFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXHJcXG4gICAgcGFkZGluZzogMTJweDtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNHB4O1xcclxcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcXHJcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcclxcbiAgICBjdXJzb3I6IG1vdmU7XFxyXFxufVxcclxcbi5yZW1vdmUtYmcge1xcclxcbiAgICBwb3NpdGlvbjphYnNvbHV0ZTtcXHJcXG4gICAgd2lkdGg6MTAwJTtcXHJcXG4gICAgaGVpZ2h0OjEwMCU7XFxyXFxuICAgIHotaW5kZXg6OTtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjUpO1xcclxcbn1cXHJcXG5cXHJcXG4uZnVsbC1jYXJkIHtcXHJcXG4gICAgei1pbmRleDogOTk7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgYmFja2dyb3VuZDogd2hpdGU7XFxyXFxuICAgIGhlaWdodDogODAlO1xcclxcbiAgICB3aWR0aDogODAlO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlOlxcclxcbiAgICAgICAgJ3RpdGxlIHRpdGxlIHRpdGxlJyBhdXRvXFxyXFxuICAgICAgICAnIGRlc2MgZGVzYyBwcmlvcml0eScgYXV0b1xcclxcbiAgICAgICAgJ2Rlc2MgZGVzYyBkYXRlJyBhdXRvXFxyXFxuICAgICAgICAnZGVzYyBkZXNjIHN0YXR1cycgYXV0b1xcclxcbiAgICAgICAgJyBidXR0b24gZm9vdCBmb290ICcgYXV0b1xcclxcbn1cXHJcXG5cXHJcXG4jbmV3LWNhcmQtdGl0bGUsICNmdWxsLWNhcmQtdGl0bGUge1xcclxcbiAgICBncmlkLWFyZWE6IHRpdGxlO1xcclxcbn1cXHJcXG5cXHJcXG4jbmV3LWNhcmQtZGV0YWlsLCAjZnVsbC1jYXJkLWRldGFpbCB7XFxyXFxuICAgIGdyaWQtYXJlYTogZGVzYztcXHJcXG59XFxyXFxuXFxyXFxuI25ldy1jYXJkLXByaW9yaXR5LCAjZnVsbC1jYXJkLXByaW9yaXR5e1xcclxcbiAgICBncmlkLWFyZWE6IHByaW9yaXR5O1xcclxcbn1cXHJcXG5cXHJcXG4jbmV3LWNhcmQtZHVlRGF0ZSwgI2Z1bGwtY2FyZC1kdWVEYXRle1xcclxcbiAgICBncmlkLWFyZWE6IGRhdGU7XFxyXFxufVxcclxcblxcclxcbiNjYXJkLXJlbW92ZS1idXR0b24sICNuZXctY2FyZC1jcmVhdGUtYnV0dG9ue1xcclxcbiAgICBncmlkLWFyZWE6IGJ1dHRvbjtcXHJcXG59XFxyXFxuXFxyXFxuI2Z1bGwtY2FyZC1zdGF0dXMge1xcclxcbiAgICBncmlkLWFyZWE6IHN0YXR1cztcXHJcXG59XFxyXFxuXFxyXFxuI2NhcmQtYXJlYSB7XFxyXFxuICAgIHBvc2l0aW9uOmZpeGVkO1xcclxcbiAgICBwYWRkaW5nOjA7XFxyXFxuICAgIG1hcmdpbjowO1xcclxcblxcclxcbiAgICB0b3A6MDtcXHJcXG4gICAgbGVmdDowO1xcclxcblxcclxcbiAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICBiYWNrZ3JvdW5kOnJnYmEoMjU1LDI1NSwyNTUsMC41KTtcXHJcXG5cXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5oaWRlIHtcXHJcXG4gICAgZGlzcGxheTpub25lO1xcclxcbn1cXHJcXG5cXHJcXG4uaXMtZHJhZ2dpbmcge1xcclxcbiAgICBzY2FsZTogMS4wNTtcXHJcXG4gICAgYm94LXNoYWRvdzogMHB4IDVweCAxNXB4IHJnYmEoMCwgMCwgMCwgMC4yNSk7XFxyXFxuICAgIGJhY2tncm91bmQ6IHJnYig1MCwgNTAsIDUwKTtcXHJcXG4gICAgY29sb3I6IHdoaXRlO1xcclxcbiAgfVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgKiB7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xyXG4gIFxyXG4gICAgLyogLW1zLW92ZXJmbG93LXN0eWxlOiBub25lOyBcclxuICAgIHNjcm9sbGJhci13aWR0aDogbm9uZTsgRmlyZWZveCAqL1xyXG59XHJcblxyXG4vKiAtLS0tIFJFU0VUL0JBU0lDIFNUWUxJTkcgLS0tLSAqL1xyXG4gIFxyXG4gIC8qICo6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfSAqL1xyXG5cclxuLmNvbnRhaW5lciB7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgM2ZyIDFmcjtcclxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTAwdnc7XHJcbiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOlxyXG4gICAgICAgICdoZWFkZXInXHJcbiAgICAgICAgJ2FydGljbGUnXHJcbiAgICAgICAgJ2Zvb3QnO1xyXG59XHJcblxyXG4udG9wIHtcclxuICAgIGdyaWQtYXJlYTogaGVhZGVyO1xyXG4gICAgbWluLWhlaWdodDogMjB2aDtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciAxZnI7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XHJcbiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiBcclxuICAgICAgICAncGFnZSBsb2dvJ1xyXG4gICAgICAgICdzZWFyY2hiYXIgc2VhcmNoYmFyJzsgICAgXHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDUlO1xyXG4gICAgcGFkZGluZy10b3A6IDUlO1xyXG4gICAgYmFja2dyb3VuZDojZmFmMmZmO1xyXG59XHJcblxyXG5cclxuLnBhZ2Uge1xyXG4gICAgZ3JpZC1hcmVhOiBwYWdlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDEwJTtcclxufVxyXG5cclxuLmxvZ28ge1xyXG4gICAgZ3JpZC1hcmVhOiBsb2dvO1xyXG4gICAgZGlzcGxheTogZ3JpZDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDQ1JTtcclxufVxyXG5cclxuLnNlYXJjaCB7XHJcbiAgICBncmlkLWFyZWE6IHNlYXJjaGJhcjtcclxuICAgIG1hcmdpbi1yaWdodDogMTAlO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDUlO1xyXG4gICAgY29sb3I6ICM0NzQ4NDc7XHJcbn1cclxuXHJcbi5zZWFyY2hiYXIge1xyXG4gICAgd2lkdGg6MTAwJTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDI1cHg7XHJcbiAgICBjb2xvcjogIzQ3NDg0NztcclxufVxyXG4uc2VhcmNoYmFyIGlucHV0OmZvY3VzIHtcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbn1cclxuLypcclxuVGhlIHNpZGViYXIgZWxlbWVudCBoYXMgYSBnYXAgb2YgNTBweFxyXG5UaGUgdGV4dCBlbGVtZW50cyBpbiB0aGUgc2lkZWJhciBhcmUgY2VudGVyZWQgd2l0aCBncmlkXHJcbiovXHJcbi5zaWRlYmFyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICM4MTY2N0E7XHJcbiAgICB3aWR0aDogMTJyZW07XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAzMDBtcyBlYXNlLWluO1xyXG4gICAgb3BhY2l0eTogOTAlO1xyXG4gICAgei1pbmRleDogOTk5O1xyXG59XHJcbi5zaWRlYmFyLS1pc0hpZGRlbiB7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEycmVtKTtcclxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAzMDBtcyBlYXNlLW91dDtcclxufVxyXG4uc2lkZWJhci1tZW51IHtcclxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbiAgICBwYWRkaW5nOiAxLjVyZW07XHJcbiAgICBtYXJnaW4tdG9wOiAwO1xyXG59XHJcbi5zaWRlYmFyLW1lbnVfX2l0ZW0ge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XHJcbn1cclxuXHJcbi5zaWRlYmFyLW1ldV9pdGVtIDpudGgtY2hpbGQoMSl7XHJcbiAgICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgICBsZWZ0OiAtNTtcclxufVxyXG5cclxuLnNpZGViYXItbWVudV9faXRlbSBhIHtcclxuICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcbi5zaWRlYmFyLW1lbnVfX2l0ZW0gYTpob3ZlciB7XHJcbiAgICBjb2xvcjogZ3JleTtcclxuICAgIHRyYW5zaXRpb246IGNvbG9yIDE1MG1zIGxpbmVhcjtcclxufVxyXG5cclxuXHJcbi5vcGVuYnRuIHtcclxuICAgIHdpZHRoOiAzMHB4O1xyXG4gICAgaGVpZ2h0OiAzMHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTUlO1xyXG4gICAgYm9yZGVyOm5vbmU7XHJcbiAgICBvdXRsaW5lOm5vbmU7XHJcbiAgICBjdXJzb3I6cG9pbnRlcjtcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAzMDBtcyBlYXNlLWluO1xyXG4gICAgbGVmdDogMTJyZW07XHJcbiAgICBjb2xvcjogIzQ3NDg0NztcclxuICAgIGJhY2tncm91bmQtY29sb3I6IzgxNjY3QTtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gIH1cclxuXHJcbi5vcGVuYnRuLS1pc0hpZGRlbiB7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEycmVtKTtcclxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAzMDBtcyBlYXNlLW91dDtcclxuICB9XHJcblxyXG4ub3BlbmJ0bjpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjRhMjYxO1xyXG4gICAgdHJhbnNpdGlvbjogYWxsIDE1MG1zIGVhc2UtaW47XHJcbn1cclxuXHJcbiNsb2dvIHtcclxuICAgIHdpZHRoOiA0LjVyZW07XHJcbiAgICBoZWlnaHQ6IDQuNXJlbTtcclxufVxyXG5cclxuI2Zvb3R7XHJcbiAgICBncmlkLWFyZWE6Zm9vdDtcclxuICAgIGJhY2tncm91bmQ6ICMyNTI1MjU7XHJcbiAgICBoZWlnaHQ6IDV2aDtcclxufWAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlcy9tYWluLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLFVBQVU7SUFDVixTQUFTO0lBQ1Qsc0JBQXNCO0lBQ3RCLHVCQUF1Qjs7SUFFdkI7b0NBQ2dDO0FBQ3BDOztBQUVBLGtDQUFrQzs7RUFFaEM7O0tBRUc7O0FBRUw7SUFDSSxhQUFhO0lBQ2IsK0JBQStCO0lBQy9CLDRCQUE0QjtJQUM1Qjs7O2NBR1U7QUFDZDs7QUFFQTtJQUNJLGlCQUFpQjtJQUNqQixnQkFBZ0I7SUFDaEIsYUFBYTtJQUNiLDJCQUEyQjtJQUMzQiw4QkFBOEI7SUFDOUI7OzZCQUV5QjtJQUN6Qiw2QkFBNkI7SUFDN0IsbUJBQW1CO0lBQ25CLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2Ysa0JBQWtCO0FBQ3RCOzs7QUFHQTtJQUNJLGVBQWU7SUFDZixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsYUFBYTtJQUNiLHVCQUF1QjtJQUN2QixnQkFBZ0I7QUFDcEI7O0FBRUE7SUFDSSxvQkFBb0I7SUFDcEIsaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksVUFBVTtJQUNWLG1CQUFtQjtJQUNuQixjQUFjO0FBQ2xCO0FBQ0E7SUFDSSxhQUFhO0FBQ2pCO0FBQ0E7OztDQUdDO0FBQ0Q7SUFDSSx5QkFBeUI7SUFDekIsWUFBWTtJQUNaLGFBQWE7SUFDYixVQUFVO0lBQ1YsZUFBZTtJQUNmLG1DQUFtQztJQUNuQyxZQUFZO0lBQ1osWUFBWTtBQUNoQjtBQUNBO0lBQ0ksNkJBQTZCO0lBQzdCLG9DQUFvQztBQUN4QztBQUNBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixhQUFhO0FBQ2pCO0FBQ0E7SUFDSSxjQUFjO0lBQ2QsZUFBZTtJQUNmLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLGVBQWU7SUFDZixRQUFRO0FBQ1o7O0FBRUE7SUFDSSxZQUFZO0lBQ1oscUJBQXFCO0lBQ3JCLGNBQWM7QUFDbEI7QUFDQTtJQUNJLFdBQVc7SUFDWCw4QkFBOEI7QUFDbEM7OztBQUdBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsV0FBVztJQUNYLFlBQVk7SUFDWixjQUFjO0lBQ2QsZUFBZTtJQUNmLG1DQUFtQztJQUNuQyxXQUFXO0lBQ1gsY0FBYztJQUNkLHdCQUF3QjtJQUN4QixpQkFBaUI7RUFDbkI7O0FBRUY7SUFDSSw2QkFBNkI7SUFDN0Isb0NBQW9DO0VBQ3RDOztBQUVGO0lBQ0kseUJBQXlCO0lBQ3pCLDZCQUE2QjtBQUNqQzs7QUFFQTtJQUNJLGFBQWE7SUFDYixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksY0FBYztJQUNkLG1CQUFtQjtJQUNuQixXQUFXO0FBQ2ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiKiB7XFxyXFxuICAgIHBhZGRpbmc6IDA7XFxyXFxuICAgIG1hcmdpbjogMDtcXHJcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXHJcXG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxyXFxuICBcXHJcXG4gICAgLyogLW1zLW92ZXJmbG93LXN0eWxlOiBub25lOyBcXHJcXG4gICAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOyBGaXJlZm94ICovXFxyXFxufVxcclxcblxcclxcbi8qIC0tLS0gUkVTRVQvQkFTSUMgU1RZTElORyAtLS0tICovXFxyXFxuICBcXHJcXG4gIC8qICo6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcXHJcXG4gICAgZGlzcGxheTogbm9uZTtcXHJcXG4gIH0gKi9cXHJcXG5cXHJcXG4uY29udGFpbmVyIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgM2ZyIDFmcjtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDB2dztcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczpcXHJcXG4gICAgICAgICdoZWFkZXInXFxyXFxuICAgICAgICAnYXJ0aWNsZSdcXHJcXG4gICAgICAgICdmb290JztcXHJcXG59XFxyXFxuXFxyXFxuLnRvcCB7XFxyXFxuICAgIGdyaWQtYXJlYTogaGVhZGVyO1xcclxcbiAgICBtaW4taGVpZ2h0OiAyMHZoO1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDFmciAxZnI7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogXFxyXFxuICAgICAgICAncGFnZSBsb2dvJ1xcclxcbiAgICAgICAgJ3NlYXJjaGJhciBzZWFyY2hiYXInOyAgICBcXHJcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxyXFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuICAgIHBhZGRpbmctbGVmdDogNSU7XFxyXFxuICAgIHBhZGRpbmctdG9wOiA1JTtcXHJcXG4gICAgYmFja2dyb3VuZDojZmFmMmZmO1xcclxcbn1cXHJcXG5cXHJcXG5cXHJcXG4ucGFnZSB7XFxyXFxuICAgIGdyaWQtYXJlYTogcGFnZTtcXHJcXG4gICAgbWFyZ2luLWxlZnQ6IDEwJTtcXHJcXG59XFxyXFxuXFxyXFxuLmxvZ28ge1xcclxcbiAgICBncmlkLWFyZWE6IGxvZ287XFxyXFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBtYXJnaW4tbGVmdDogNDUlO1xcclxcbn1cXHJcXG5cXHJcXG4uc2VhcmNoIHtcXHJcXG4gICAgZ3JpZC1hcmVhOiBzZWFyY2hiYXI7XFxyXFxuICAgIG1hcmdpbi1yaWdodDogMTAlO1xcclxcbiAgICBtYXJnaW4tbGVmdDogNSU7XFxyXFxuICAgIGNvbG9yOiAjNDc0ODQ3O1xcclxcbn1cXHJcXG5cXHJcXG4uc2VhcmNoYmFyIHtcXHJcXG4gICAgd2lkdGg6MTAwJTtcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogMjVweDtcXHJcXG4gICAgY29sb3I6ICM0NzQ4NDc7XFxyXFxufVxcclxcbi5zZWFyY2hiYXIgaW5wdXQ6Zm9jdXMge1xcclxcbiAgICBvdXRsaW5lOiBub25lO1xcclxcbn1cXHJcXG4vKlxcclxcblRoZSBzaWRlYmFyIGVsZW1lbnQgaGFzIGEgZ2FwIG9mIDUwcHhcXHJcXG5UaGUgdGV4dCBlbGVtZW50cyBpbiB0aGUgc2lkZWJhciBhcmUgY2VudGVyZWQgd2l0aCBncmlkXFxyXFxuKi9cXHJcXG4uc2lkZWJhciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM4MTY2N0E7XFxyXFxuICAgIHdpZHRoOiAxMnJlbTtcXHJcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gICAgcGFkZGluZzogMDtcXHJcXG4gICAgcG9zaXRpb246IGZpeGVkO1xcclxcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMzAwbXMgZWFzZS1pbjtcXHJcXG4gICAgb3BhY2l0eTogOTAlO1xcclxcbiAgICB6LWluZGV4OiA5OTk7XFxyXFxufVxcclxcbi5zaWRlYmFyLS1pc0hpZGRlbiB7XFxyXFxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTJyZW0pO1xcclxcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMzAwbXMgZWFzZS1vdXQ7XFxyXFxufVxcclxcbi5zaWRlYmFyLW1lbnUge1xcclxcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcclxcbiAgICBwYWRkaW5nOiAxLjVyZW07XFxyXFxuICAgIG1hcmdpbi10b3A6IDA7XFxyXFxufVxcclxcbi5zaWRlYmFyLW1lbnVfX2l0ZW0ge1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbiAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XFxyXFxufVxcclxcblxcclxcbi5zaWRlYmFyLW1ldV9pdGVtIDpudGgtY2hpbGQoMSl7XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgbGVmdDogLTU7XFxyXFxufVxcclxcblxcclxcbi5zaWRlYmFyLW1lbnVfX2l0ZW0gYSB7XFxyXFxuICAgIGNvbG9yOiB3aGl0ZTtcXHJcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcclxcbiAgICBkaXNwbGF5OiBibG9jaztcXHJcXG59XFxyXFxuLnNpZGViYXItbWVudV9faXRlbSBhOmhvdmVyIHtcXHJcXG4gICAgY29sb3I6IGdyZXk7XFxyXFxuICAgIHRyYW5zaXRpb246IGNvbG9yIDE1MG1zIGxpbmVhcjtcXHJcXG59XFxyXFxuXFxyXFxuXFxyXFxuLm9wZW5idG4ge1xcclxcbiAgICB3aWR0aDogMzBweDtcXHJcXG4gICAgaGVpZ2h0OiAzMHB4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxNSU7XFxyXFxuICAgIGJvcmRlcjpub25lO1xcclxcbiAgICBvdXRsaW5lOm5vbmU7XFxyXFxuICAgIGN1cnNvcjpwb2ludGVyO1xcclxcbiAgICBwb3NpdGlvbjogZml4ZWQ7XFxyXFxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAzMDBtcyBlYXNlLWluO1xcclxcbiAgICBsZWZ0OiAxMnJlbTtcXHJcXG4gICAgY29sb3I6ICM0NzQ4NDc7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IzgxNjY3QTtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICB9XFxyXFxuXFxyXFxuLm9wZW5idG4tLWlzSGlkZGVuIHtcXHJcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xMnJlbSk7XFxyXFxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAzMDBtcyBlYXNlLW91dDtcXHJcXG4gIH1cXHJcXG5cXHJcXG4ub3BlbmJ0bjpob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNGEyNjE7XFxyXFxuICAgIHRyYW5zaXRpb246IGFsbCAxNTBtcyBlYXNlLWluO1xcclxcbn1cXHJcXG5cXHJcXG4jbG9nbyB7XFxyXFxuICAgIHdpZHRoOiA0LjVyZW07XFxyXFxuICAgIGhlaWdodDogNC41cmVtO1xcclxcbn1cXHJcXG5cXHJcXG4jZm9vdHtcXHJcXG4gICAgZ3JpZC1hcmVhOmZvb3Q7XFxyXFxuICAgIGJhY2tncm91bmQ6ICMyNTI1MjU7XFxyXFxuICAgIGhlaWdodDogNXZoO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYCNwcm9qZWN0cyB7XHJcbiAgICBkaXNwbGF5OmZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICB0b3A6IDIwdmg7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDFyZW0gMXJlbSAxcmVtO1xyXG59XHJcblxyXG4jcHJvamVjdC1zZWN0aW9uLWhlYWRlciB7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiByZXBlYXQoMiwgMWZyKTtcclxuICAgIHBhZGRpbmctYm90dG9tOiAxMnB4O1xyXG59XHJcblxyXG4jc3RhdHVzLWxhYmVscyB7XHJcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBqdXN0aWZ5LWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAvKiBiYWNrZ3JvdW5kOiAjZjRmNGY0OyAqL1xyXG59XHJcblxyXG4jbmV3LXByb2plY3QtYnV0dG9uIHtcclxuICAgIGFsaWduLXNlbGY6IHN0YXJ0O1xyXG4gICAgaGVpZ2h0OiAzcmVtO1xyXG4gICAgd2lkdGg6IDZyZW07XHJcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcclxufVxyXG5cclxuLnByb2plY3QtaGVhZGVyIHtcclxuICAgIC8qIGJhY2tncm91bmQ6ICNmNGY0ZjQ7ICovXHJcbiAgICAvKiBib3JkZXI6IDZweCBzb2xpZCBibGFjazsgKi9cclxuICAgIGJvcmRlci1yYWRpdXM6IDMwcHg7XHJcbiAgICBwYWRkaW5nOiAycmVtO1xyXG4gICAgYmFja2dyb3VuZDogbGlnaHRibHVlO1xyXG59XHJcblxyXG4uaGVhZC1sYmwge1xyXG4gICAgYmFja2dyb3VuZDogI2Y0ZjRmNDtcclxuICAgIGhlaWdodDoxMDAlO1xyXG4gICAgd2lkdGg6MTAwJTtcclxuICAgIHRleHQtYWxpZ246Y2VudGVyO1xyXG59XHJcblxyXG4ucHJvamVjdC1vcHRpb25zIHtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IC41ZnIgMWZyIDFmcjtcclxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDFmcjtcclxufVxyXG5cclxuLnByb2plY3QtbmFtZSB7XHJcbiAgICBmb250LXNpemU6IDIycHg7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi1ib3R0b206IDhweDtcclxufVxyXG4ucHJvamVjdC1uYW1lLWNoYW5nZS1idXR0b257XHJcbiAgICBoZWlnaHQ6IDJyZW07XHJcbiAgICB3aWR0aDogMnJlbTtcclxufVxyXG5cclxuLnByb2plY3QtZGVsZXRlLWJ1dHRvbntcclxuICAgIGhlaWdodDogM3JlbTtcclxuICAgIHdpZHRoOiAzcmVtO1xyXG4gICAganVzdGlmeS1zZWxmOiBlbmQ7XHJcbn1cclxuXHJcbi5wcm9qZWN0LWNvbGxhcHNlLWJ1dHRvbntcclxuICAgIGhlaWdodDo1MHB4O1xyXG4gICAgd2lkdGg6NTBweDtcclxuICAgIGdyaWQtY29sdW1uLXN0YXJ0OiAzO1xyXG4gICAganVzdGlmeS1zZWxmOiBlbmQ7XHJcbiAgICBncmlkLXJvdy1zdGFydDogMjtcclxufVxyXG5cclxuLm5ldy10YXNrLWJ1dHRvbntcclxuICAgIGhlaWdodDogM3JlbTtcclxuICAgIHdpZHRoOiAzcmVtO1xyXG59XHJcblxyXG4ucHJvamVjdC1zdGF0dXMtd3JhcHBlciB7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoMywgMWZyKTtcclxuICAgIGdyaWQtZ2FwOiAxMnB4O1xyXG4gICAgcGFkZGluZzogMHJlbSAycmVtO1xyXG59XHJcblxyXG4ucHJvamVjdC1zdGF0dXMtY29sIHtcclxuICAgIGJhY2tncm91bmQ6ICNmNGY0ZjQ7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzdGFydDtcclxuICAgIGdhcDogMTZweDtcclxuICAgIG92ZXJmbG93OiBzY3JvbGw7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB0cmFuc2l0aW9uOiBhbGwgMXM7XHJcblxyXG59XHJcblxyXG4uaG92ZXIge1xyXG4gICAgYmFja2dyb3VuZDogYmx1ZTtcclxuICAgIHotaW5kZXg6OTk7XHJcbn1cclxuXHJcbi5zYXZle1xyXG4gICAgYmFja2dyb3VuZDogbGlnaHRibHVlO1xyXG59XHJcbi5wcm9qZWN0LWNvbGxhcHNlLWJ1dHRvbjpob3ZlciB7XHJcbiAgICBjb2xvcjogZ3JlZW47XHJcbn1cclxuXHJcbi5wcm9qZWN0LWNvbGxhcHNlLWJ1dHRvbjo6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6ICcgJztcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuXHJcbiAgICBib3JkZXItdG9wOiA1cHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbiAgICBib3JkZXItYm90dG9tOiA1cHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbiAgICBib3JkZXItbGVmdDogNXB4IHNvbGlkIGN1cnJlbnRDb2xvcjtcclxuXHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAuN3JlbTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMnB4KTtcclxuXHJcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gLjJzIGVhc2Utb3V0O1xyXG59XHJcblxyXG4udG9nZ2xlLWJ1dHRvbi10cmFuc2l0aW9uIHtcclxuICAgIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKSB0cmFuc2xhdGVYKC0zcHgpO1xyXG4gIH1cclxuXHJcbi5jb2xsYXBzZWQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAlKTtcclxuICAgIG1heC1oZWlnaHQ6MHB4O1xyXG4gfVxyXG5cclxuXHJcbi5wcm9qZWN0IHtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgfVxyXG4gIFxyXG4vKiAjZXhwYW5kLWNvbnRyYWN0IHtcclxuYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJlZDtcclxubWFyZ2luLXRvcDogLTEwMCU7XHJcbnRyYW5zaXRpb246IGFsbCAxcztcclxufSAqL1xyXG5cclxuLnByb2plY3Qtc3RhdHVzLWNvbC5leHBhbmRlZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcclxuICAgIG1hcmdpbi10b3A6IDA7XHJcbn1cclxuXHJcbi5oaWRle1xyXG4gICAgZGlzcGxheTpub25lO1xyXG59XHJcblxyXG4uY2xpY2tlZHtcclxuICAgIGNvbG9yOiB5ZWxsb3c7XHJcbn1gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvcHJvamVjdEFyZWEuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksWUFBWTtJQUNaLHNCQUFzQjtJQUN0QixlQUFlO0lBQ2YsV0FBVztJQUNYLFNBQVM7SUFDVCw0QkFBNEI7QUFDaEM7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isa0NBQWtDO0lBQ2xDLG9CQUFvQjtBQUN4Qjs7QUFFQTtJQUNJLHFCQUFxQjtJQUNyQixxQkFBcUI7SUFDckIseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLFlBQVk7SUFDWixXQUFXO0lBQ1gsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0kseUJBQXlCO0lBQ3pCLDZCQUE2QjtJQUM3QixtQkFBbUI7SUFDbkIsYUFBYTtJQUNiLHFCQUFxQjtBQUN6Qjs7QUFFQTtJQUNJLG1CQUFtQjtJQUNuQixXQUFXO0lBQ1gsVUFBVTtJQUNWLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixtQ0FBbUM7SUFDbkMsMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksZUFBZTtJQUNmLGlCQUFpQjtJQUNqQixrQkFBa0I7QUFDdEI7QUFDQTtJQUNJLFlBQVk7SUFDWixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxZQUFZO0lBQ1osV0FBVztJQUNYLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxVQUFVO0lBQ1Ysb0JBQW9CO0lBQ3BCLGlCQUFpQjtJQUNqQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osV0FBVztBQUNmOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHFDQUFxQztJQUNyQyxjQUFjO0lBQ2Qsa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksbUJBQW1CO0lBQ25CLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsdUJBQXVCO0lBQ3ZCLHNCQUFzQjtJQUN0QixTQUFTO0lBQ1QsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWixrQkFBa0I7O0FBRXRCOztBQUVBO0lBQ0ksZ0JBQWdCO0lBQ2hCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLHFCQUFxQjtBQUN6QjtBQUNBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixxQkFBcUI7O0lBRXJCLGlDQUFpQztJQUNqQyxvQ0FBb0M7SUFDcEMsbUNBQW1DOztJQUVuQyxzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLDJCQUEyQjs7SUFFM0Isa0NBQWtDO0FBQ3RDOztBQUVBO0lBQ0kseUNBQXlDO0VBQzNDOztBQUVGO0lBQ0kscUJBQXFCO0lBQ3JCLDRCQUE0QjtJQUM1QixjQUFjO0NBQ2pCOzs7QUFHRDtJQUNJLGdCQUFnQjtFQUNsQjs7QUFFRjs7OztHQUlHOztBQUVIO0lBQ0ksdUJBQXVCO0lBQ3ZCLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIjcHJvamVjdHMge1xcclxcbiAgICBkaXNwbGF5OmZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIHBvc2l0aW9uOiBmaXhlZDtcXHJcXG4gICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgIHRvcDogMjB2aDtcXHJcXG4gICAgcGFkZGluZzogMXJlbSAxcmVtIDFyZW0gMXJlbTtcXHJcXG59XFxyXFxuXFxyXFxuI3Byb2plY3Qtc2VjdGlvbi1oZWFkZXIge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IHJlcGVhdCgyLCAxZnIpO1xcclxcbiAgICBwYWRkaW5nLWJvdHRvbTogMTJweDtcXHJcXG59XFxyXFxuXFxyXFxuI3N0YXR1cy1sYWJlbHMge1xcclxcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktaXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgLyogYmFja2dyb3VuZDogI2Y0ZjRmNDsgKi9cXHJcXG59XFxyXFxuXFxyXFxuI25ldy1wcm9qZWN0LWJ1dHRvbiB7XFxyXFxuICAgIGFsaWduLXNlbGY6IHN0YXJ0O1xcclxcbiAgICBoZWlnaHQ6IDNyZW07XFxyXFxuICAgIHdpZHRoOiA2cmVtO1xcclxcbiAgICBtYXJnaW4tbGVmdDogMnJlbTtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtaGVhZGVyIHtcXHJcXG4gICAgLyogYmFja2dyb3VuZDogI2Y0ZjRmNDsgKi9cXHJcXG4gICAgLyogYm9yZGVyOiA2cHggc29saWQgYmxhY2s7ICovXFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDMwcHg7XFxyXFxuICAgIHBhZGRpbmc6IDJyZW07XFxyXFxuICAgIGJhY2tncm91bmQ6IGxpZ2h0Ymx1ZTtcXHJcXG59XFxyXFxuXFxyXFxuLmhlYWQtbGJsIHtcXHJcXG4gICAgYmFja2dyb3VuZDogI2Y0ZjRmNDtcXHJcXG4gICAgaGVpZ2h0OjEwMCU7XFxyXFxuICAgIHdpZHRoOjEwMCU7XFxyXFxuICAgIHRleHQtYWxpZ246Y2VudGVyO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdC1vcHRpb25zIHtcXHJcXG4gICAgZGlzcGxheTogZ3JpZDtcXHJcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAuNWZyIDFmciAxZnI7XFxyXFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDFmcjtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtbmFtZSB7XFxyXFxuICAgIGZvbnQtc2l6ZTogMjJweDtcXHJcXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuICAgIG1hcmdpbi1ib3R0b206IDhweDtcXHJcXG59XFxyXFxuLnByb2plY3QtbmFtZS1jaGFuZ2UtYnV0dG9ue1xcclxcbiAgICBoZWlnaHQ6IDJyZW07XFxyXFxuICAgIHdpZHRoOiAycmVtO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdC1kZWxldGUtYnV0dG9ue1xcclxcbiAgICBoZWlnaHQ6IDNyZW07XFxyXFxuICAgIHdpZHRoOiAzcmVtO1xcclxcbiAgICBqdXN0aWZ5LXNlbGY6IGVuZDtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtY29sbGFwc2UtYnV0dG9ue1xcclxcbiAgICBoZWlnaHQ6NTBweDtcXHJcXG4gICAgd2lkdGg6NTBweDtcXHJcXG4gICAgZ3JpZC1jb2x1bW4tc3RhcnQ6IDM7XFxyXFxuICAgIGp1c3RpZnktc2VsZjogZW5kO1xcclxcbiAgICBncmlkLXJvdy1zdGFydDogMjtcXHJcXG59XFxyXFxuXFxyXFxuLm5ldy10YXNrLWJ1dHRvbntcXHJcXG4gICAgaGVpZ2h0OiAzcmVtO1xcclxcbiAgICB3aWR0aDogM3JlbTtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3Qtc3RhdHVzLXdyYXBwZXIge1xcclxcbiAgICBkaXNwbGF5OiBncmlkO1xcclxcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCAxZnIpO1xcclxcbiAgICBncmlkLWdhcDogMTJweDtcXHJcXG4gICAgcGFkZGluZzogMHJlbSAycmVtO1xcclxcbn1cXHJcXG5cXHJcXG4ucHJvamVjdC1zdGF0dXMtY29sIHtcXHJcXG4gICAgYmFja2dyb3VuZDogI2Y0ZjRmNDtcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3RhcnQ7XFxyXFxuICAgIGdhcDogMTZweDtcXHJcXG4gICAgb3ZlcmZsb3c6IHNjcm9sbDtcXHJcXG4gICAgaGVpZ2h0OiAxMDAlO1xcclxcbiAgICB0cmFuc2l0aW9uOiBhbGwgMXM7XFxyXFxuXFxyXFxufVxcclxcblxcclxcbi5ob3ZlciB7XFxyXFxuICAgIGJhY2tncm91bmQ6IGJsdWU7XFxyXFxuICAgIHotaW5kZXg6OTk7XFxyXFxufVxcclxcblxcclxcbi5zYXZle1xcclxcbiAgICBiYWNrZ3JvdW5kOiBsaWdodGJsdWU7XFxyXFxufVxcclxcbi5wcm9qZWN0LWNvbGxhcHNlLWJ1dHRvbjpob3ZlciB7XFxyXFxuICAgIGNvbG9yOiBncmVlbjtcXHJcXG59XFxyXFxuXFxyXFxuLnByb2plY3QtY29sbGFwc2UtYnV0dG9uOjpiZWZvcmUge1xcclxcbiAgICBjb250ZW50OiAnICc7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG5cXHJcXG4gICAgYm9yZGVyLXRvcDogNXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcclxcbiAgICBib3JkZXItYm90dG9tOiA1cHggc29saWQgdHJhbnNwYXJlbnQ7XFxyXFxuICAgIGJvcmRlci1sZWZ0OiA1cHggc29saWQgY3VycmVudENvbG9yO1xcclxcblxcclxcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xcclxcbiAgICBtYXJnaW4tcmlnaHQ6IC43cmVtO1xcclxcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTJweCk7XFxyXFxuXFxyXFxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAuMnMgZWFzZS1vdXQ7XFxyXFxufVxcclxcblxcclxcbi50b2dnbGUtYnV0dG9uLXRyYW5zaXRpb24ge1xcclxcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZykgdHJhbnNsYXRlWCgtM3B4KTtcXHJcXG4gIH1cXHJcXG5cXHJcXG4uY29sbGFwc2VkIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcclxcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwMCUpO1xcclxcbiAgICBtYXgtaGVpZ2h0OjBweDtcXHJcXG4gfVxcclxcblxcclxcblxcclxcbi5wcm9qZWN0IHtcXHJcXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG4gIH1cXHJcXG4gIFxcclxcbi8qICNleHBhbmQtY29udHJhY3Qge1xcclxcbmJvcmRlci1ib3R0b206IDFweCBzb2xpZCByZWQ7XFxyXFxubWFyZ2luLXRvcDogLTEwMCU7XFxyXFxudHJhbnNpdGlvbjogYWxsIDFzO1xcclxcbn0gKi9cXHJcXG5cXHJcXG4ucHJvamVjdC1zdGF0dXMtY29sLmV4cGFuZGVkIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XFxyXFxuICAgIG1hcmdpbi10b3A6IDA7XFxyXFxufVxcclxcblxcclxcbi5oaWRle1xcclxcbiAgICBkaXNwbGF5Om5vbmU7XFxyXFxufVxcclxcblxcclxcbi5jbGlja2Vke1xcclxcbiAgICBjb2xvcjogeWVsbG93O1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiZXhwb3J0IGNsYXNzIFByb2plY3Qge1xyXG4gICAgLy8gdGFza3MgPSBbXTtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUpe1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWVcclxuICAgICAgICB0aGlzLnRhc2tzID0gW11cclxuICAgIH1cclxuXHJcbiAgICBhZGRUYXNrKG5ld1Rhc2tKU09OKXtcclxuICAgICAgICBpZih0aGlzLnRhc2tzLmZpbHRlcih0YXNrID0+IG5ld1Rhc2tKU09OLnRpdGxlICE9PSB0YXNrKSl7dGhpcy50YXNrcy5wdXNoKG5ld1Rhc2tKU09OKX1cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVUYXNrKFRhc2tUaXRsZSl7XHJcbiAgICAgICAgdGhpcy50YXNrcyA9IHRoaXMudGFza3MuZmlsdGVyKCh0YXNrKSA9PiBcclxuICAgICAgICAgICAgdGFzay50aXRsZSAhPT0gVGFza1RpdGxlXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWx0ZXJUYXNrcyhzZWFyY2gpIHtcclxuICAgICAgICBsZXQgaW5kZXhlcyA9IFtdLCBpO1xyXG4gICAgICAgIGZvcihpID0gMDsgaSA8IHRoaXMudGFza3MubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRhc2tzW2ldLnRpdGxlLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoLnRvTG93ZXJDYXNlKCkpKVxyXG4gICAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGkpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRhc2tzW2luZGV4ZXNdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybkFsbFRhc2tzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRhc2tzXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybkFsbFRhc2tUaXRsZXMoKXtcclxuICAgICAgICBsZXQgb3V0ID0gW11cclxuICAgICAgICBmb3IobGV0IHRhc2sgb2YgdGhpcy50YXNrcyl7XHJcbiAgICAgICAgICAgIG91dC5wdXNoKHRhc2sucmV0dXJuVGl0bGUoKSlcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2cob3V0KVxyXG4gICAgICAgIHJldHVybiBvdXRcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm5Qcm9qZWN0TmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuUHJvamVjdE5hbWVXaXRoTm9XaGl0ZXNwYWNlKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZS5yZXBsYWNlKC9cXHMrL2csICctJylcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm5Qcm9qZWN0SlNPTigpIHtcclxuICAgICAgICBsZXQgdGFza3NKU09OID0gW11cclxuICAgICAgICBmb3IoY29uc3QgdGFzayBvZiB0aGlzLnRhc2tzKXtcclxuICAgICAgICAgICAgdGFza3NKU09OLnB1c2godGFzay5yZXR1cm5JdGVtSlNPTigpKVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyduYW1lJzogdGhpcy5yZXR1cm5Qcm9qZWN0TmFtZSgpLFxyXG4gICAgICAgICd0YXNrcyc6IHRhc2tzSlNPTn1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVQcm9qZWN0TmFtZShuZXdOYW1lKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmV3TmFtZVxyXG4gICAgfVxyXG5cclxuXHJcbn0iLCJleHBvcnQgY29uc3QgY3JlYXRlRG9tRWxlbWVudCA9ICh0eXBlLCBhdHRyaWJ1dGVzLCAuLi5jaGlsZHJlbikgPT4ge1xyXG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpXHJcblxyXG4gICAgZm9yIChsZXQga2V5IGluIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyaWJ1dGVzW2tleV0pXHJcbiAgICB9XHJcblxyXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgaWYgKCEoY2hpbGQgaW5zdGFuY2VvZiBFbGVtZW50KSkge1xyXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNoaWxkKSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGVsLmFwcGVuZENoaWxkKGNoaWxkKVxyXG4gICAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgcmV0dXJuIGVsXHJcbn0iLCJmdW5jdGlvbiBvbkRyYWdTdGFydChldmVudCkge1xyXG4gIGNvbnN0IHRhcmdldElEID0gZXZlbnQudGFyZ2V0LmlkO1xyXG4gIGV2ZW50LmRhdGFUcmFuc2Zlci5zZXREYXRhKCd0ZXh0JywgdGFyZ2V0SUQpOyAgXHJcbiAgZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5hZGQoXCJpcy1kcmFnZ2luZ1wiKTtcclxufVxyXG5cclxuZnVuY3Rpb24gb25EcmFnT3ZlcihldmVudCkge1xyXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiBcclxuICBjb25zdCBkcm9wem9uZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQ7XHJcbiAgY29uc3QgZHJvcHpvbmVJRCA9IGRyb3B6b25lLmlkXHJcblxyXG4gIGNvbnN0IGJvdHRvbVRhc2sgPSBpbnNlcnRBYm92ZVRhc2soZHJvcHpvbmUsIGV2ZW50LmNsaWVudFkpO1xyXG4gIGNvbnN0IGN1clRhc2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmlzLWRyYWdnaW5nXCIpO1xyXG5cclxuICBjb25zdCBwcm9qZWN0TmFtZSA9IGN1clRhc2suZGF0YXNldC5wcm9qZWN0XHJcbiAgY29uc29sZS5sb2coJ29uRHJhZ092ZXIgdGFzayBwcm9qZWN0IG5hbWUnLCBwcm9qZWN0TmFtZSlcclxuICBsZXQgYWJsZVRvRHJvcCA9IGRyb3B6b25lSUQuaW5jbHVkZXMocHJvamVjdE5hbWUpXHJcbiAgY29uc29sZS5sb2coZHJvcHpvbmVJRClcclxuICBjb25zb2xlLmxvZyhhYmxlVG9Ecm9wKVxyXG4gIGlmKGFibGVUb0Ryb3Ape1xyXG4gICAgaWYgKCFib3R0b21UYXNrKSB7XHJcbiAgICAgIGRyb3B6b25lLmFwcGVuZENoaWxkKGN1clRhc2spO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZHJvcHpvbmUuaW5zZXJ0QmVmb3JlKGN1clRhc2ssIGJvdHRvbVRhc2spO1xyXG4gICAgfVxyXG4gIH1cclxuICBlbHNlIHJldHVyblxyXG59XHJcblxyXG5mdW5jdGlvbiBvbkRyYWdFbmQoZXZlbnQpIHtcclxuICBldmVudC50YXJnZXQuY2xhc3NMaXN0LnJlbW92ZSgnaXMtZHJhZ2dpbmcnKVxyXG59XHJcblxyXG5mdW5jdGlvbiBvbkRyYWdMZWF2ZShldmVudCl7XHJcbiAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG59XHJcblxyXG5mdW5jdGlvbiBvbkRyb3AoZXZlbnQpIHtcclxuICBjb25zdCBpZCA9IGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0JylcclxuICBjb25zdCBkcm9wem9uZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXRcclxuICBjb25zdCBjdXJUYXNrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5pcy1kcmFnZ2luZ1wiKTtcclxuICBjb25zdCBwcm9qZWN0TmFtZSA9IGN1clRhc2suZGF0YXNldC5wcm9qZWN0XHJcbiAgY29uc3QgZHJvcHpvbmVJRCA9IGRyb3B6b25lLmlkXHJcblxyXG4gIGNvbnNvbGUubG9nKCdvbkRyYWdPdmVyIHRhc2sgcHJvamVjdCBuYW1lJywgcHJvamVjdE5hbWUpXHJcbiAgbGV0IGFibGVUb0Ryb3AgPSBkcm9wem9uZUlELmluY2x1ZGVzKHByb2plY3ROYW1lKVxyXG4gIGxldCBuZXdTdGF0dXMgPSBkcm9wem9uZS5kYXRhc2V0LnN0YXR1c1xyXG4gIGlmKGFibGVUb0Ryb3Ape1xyXG4gICAgY3VyVGFzay5kYXRhc2V0LnN0YXR1cyA9IG5ld1N0YXR1c1xyXG5cclxuICAgIC8vIERpc3BhdGNoIGN1c3RvbSBldmVudCB3aXRoIHVwZGF0ZWQgc3RhdHVzXHJcbiAgICBjb25zdCBzdGF0dXNDaGFuZ2VFdmVudCA9IG5ldyBDdXN0b21FdmVudCgnc3RhdHVzQ2hhbmdlJywge1xyXG4gICAgICBkZXRhaWw6IHsgaWQ6IGlkLCBuZXdTdGF0dXM6IG5ld1N0YXR1cyB9XHJcbiAgICB9KTtcclxuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoc3RhdHVzQ2hhbmdlRXZlbnQpO1xyXG4gICAgZXZlbnQuZGF0YVRyYW5zZmVyLmNsZWFyRGF0YSgpO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmNvbnN0IGluc2VydEFib3ZlVGFzayA9ICh6b25lLCBtb3VzZVkpID0+IHtcclxuICBjb25zdCBlbHMgPSB6b25lLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubWluaS1jYXJkOm5vdCguaXMtZHJhZ2dpbmcpXCIpO1xyXG4gIC8vIGNvbnNvbGUubG9nKGVscylcclxuICBsZXQgY2xvc2VzdFRhc2sgPSBudWxsO1xyXG4gIGxldCBjbG9zZXN0T2Zmc2V0ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xyXG5cclxuICBlbHMuZm9yRWFjaCgodGFzaykgPT4ge1xyXG4gICAgY29uc3QgeyB0b3AgfSA9IHRhc2suZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblxyXG4gICAgY29uc3Qgb2Zmc2V0ID0gbW91c2VZIC0gdG9wO1xyXG5cclxuICAgIGlmIChvZmZzZXQgPCAwICYmIG9mZnNldCA+IGNsb3Nlc3RPZmZzZXQpIHtcclxuICAgICAgY2xvc2VzdE9mZnNldCA9IG9mZnNldDtcclxuICAgICAgY2xvc2VzdFRhc2sgPSB0YXNrO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gY2xvc2VzdFRhc2s7XHJcbn07XHJcblxyXG5leHBvcnQge29uRHJhZ1N0YXJ0LCBvbkRyYWdPdmVyLCBvbkRyYWdFbmQsIG9uRHJhZ0xlYXZlLCBvbkRyb3B9IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NhcmRzLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2FyZHMuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgY3JlYXRlRG9tRWxlbWVudCB9IGZyb20gXCIuL2NvbXBvbmVudE1ha2Vyc1wiXHJcbmltcG9ydCAqIGFzIERyYWcgZnJvbSAnLi9kcmFnRnVuY3Rpb25zLmpzJ1xyXG5pbXBvcnQgJy4vc3R5bGVzL2NhcmRzLmNzcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2FyZFJlbmRlcmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHByb2plY3RSZW5kZXJlciwgdGFzayl7XHJcbiAgICAgICAgdGhpcy50YXNrID0gdGFza1xyXG4gICAgICAgIHRoaXMucHJvamVjdFJlbmRlcmVyID0gcHJvamVjdFJlbmRlcmVyXHJcbiAgICB9XHJcblxyXG4gICAgc2V0UHJvamVjdFJlbmRlcmVyKHByb2plY3RSZW5kZXJlcikge1xyXG4gICAgICAgIHRoaXMucHJvamVjdFJlbmRlcmVyID0gcHJvamVjdFJlbmRlcmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUZ1bGxDYXJkKCkge1xyXG4gICAgICAgIGNvbnN0IGNhcmRSZW1vdmVCdXR0b24gPSBjcmVhdGVEb21FbGVtZW50KCdidXR0b24nLCB7aWQ6ICdjYXJkLXJlbW92ZS1idXR0b24nLCBjbGFzczogJ2Z1bGwtY2FyZC1pbmZvJ30sICdEZWxldGUgVGFzaycpXHJcbiAgICAgICAgY2FyZFJlbW92ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhcmRBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NhcmQtYXJlYScpXHJcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlVGFyZ2V0KGNhcmRBcmVhKSxcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0UmVuZGVyZXIucHJvamVjdC5yZW1vdmVUYXNrKHRoaXMudGFzay50aXRsZSlcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0UmVuZGVyZXIucmVuZGVyQW5kVXBkYXRlUHJvamVjdCgpXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucHJvamVjdFJlbmRlcmVyLnByb2plY3QucmV0dXJuUHJvamVjdEpTT04oKSl9KVxyXG5cclxuICAgICAgICBjb25zdCBjYXJkVGl0bGUgPSBjcmVhdGVEb21FbGVtZW50KCdoMScsIHtpZDogJ2Z1bGwtY2FyZC10aXRsZScsIGNsYXNzOidmdWxsLWNhcmQtaW5mbycsIGNvbnRlbnRlZGl0YWJsZSA6dHJ1ZX0sIHRoaXMudGFzay50aXRsZSlcclxuICAgICAgICBjb25zdCBjYXJkU3RhdHVzID0gY3JlYXRlRG9tRWxlbWVudCgnaDInLCB7aWQ6ICdmdWxsLWNhcmQtc3RhdHVzJywgY2xhc3M6J2Z1bGwtY2FyZC1pbmZvJywgY29udGVudGVkaXRhYmxlIDp0cnVlfSwgdGhpcy50YXNrLmpvYlN0YXR1cylcclxuICAgICAgICBjb25zdCBjYXJkRHVlRGF0ZSA9IGNyZWF0ZURvbUVsZW1lbnQoJ2gyJywge2lkOiAnZnVsbC1jYXJkLWR1ZURhdGUnLCBjbGFzczonZnVsbC1jYXJkLWluZm8nLCBjb250ZW50ZWRpdGFibGUgOnRydWV9LCB0aGlzLnRhc2suZHVlRGF0ZSlcclxuICAgICAgICBjb25zdCBjYXJkUHJpb3JpdHkgPSBjcmVhdGVEb21FbGVtZW50KCdoMicsIHtpZDogJ2Z1bGwtY2FyZC1wcmlvcml0eScsIGNsYXNzOidmdWxsLWNhcmQtaW5mbycsIGNvbnRlbnRlZGl0YWJsZSA6dHJ1ZX0sIHRoaXMudGFzay5wcmlvcml0eSlcclxuICAgICAgICBjb25zdCBjYXJkRGV0YWlsID0gY3JlYXRlRG9tRWxlbWVudCgncCcsIHtpZDogJ2Z1bGwtY2FyZC1kZXRhaWwnLCBjbGFzczonZnVsbC1jYXJkLWluZm8nLCBjb250ZW50ZWRpdGFibGUgOnRydWV9LCB0aGlzLnRhc2suZGV0YWlsKVxyXG4gICAgICAgIGNvbnN0IGNhcmQgPSBjcmVhdGVEb21FbGVtZW50KCdkaXYnLCB7Y2xhc3M6ICdmdWxsLWNhcmQnfSwgY2FyZFRpdGxlLCBjYXJkU3RhdHVzLCBjYXJkRHVlRGF0ZSwgY2FyZFByaW9yaXR5LCBjYXJkRGV0YWlsLCBjYXJkUmVtb3ZlQnV0dG9uKVxyXG4gICAgICAgIGNvbnN0IHJlbW92ZUJHID0gY3JlYXRlRG9tRWxlbWVudCgnZGl2Jywge2NsYXNzOiAncmVtb3ZlLWJnJywgaWQ6J3JlbW92ZS1mdWxsLWNhcmQtYmcnfSwgY2FyZClcclxuXHJcbiAgICAgICAgY29uc3QgY2FyZEFyZWEgPSBjcmVhdGVEb21FbGVtZW50KCdkaXYnLCB7aWQ6ICdjYXJkLWFyZWEnfSwgY2FyZCwgcmVtb3ZlQkcpXHJcbiAgICAgICAgcmVtb3ZlQkcuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRhc2sudXBkYXRlVGl0bGUoY2FyZFRpdGxlLmlubmVySFRNTClcclxuICAgICAgICAgICAgdGhpcy50YXNrLnVwZGF0ZVN0YXR1cyhjYXJkU3RhdHVzLmlubmVySFRNTClcclxuICAgICAgICAgICAgdGhpcy50YXNrLnVwZGF0ZUR1ZURhdGUoY2FyZER1ZURhdGUuaW5uZXJIVE1MKVxyXG4gICAgICAgICAgICB0aGlzLnRhc2sudXBkYXRlRGV0YWlsKGNhcmREZXRhaWwuaW5uZXJIVE1MKVxyXG4gICAgICAgICAgICB0aGlzLnRhc2sudXBkYXRlUHJpb3JpdHkoY2FyZFByaW9yaXR5LmlubmVySFRNTClcclxuICAgICAgICAgICAgdGhpcy5kZWxldGVQYXJlbnQoZSlcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0UmVuZGVyZXIucmVuZGVyQW5kVXBkYXRlUHJvamVjdCgpXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMucHJvamVjdFJlbmRlcmVyLnByb2plY3QucmV0dXJuUHJvamVjdEpTT04oKSlcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICByZXR1cm4gY2FyZEFyZWFcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVNaW5pbWl6ZWRDYXJkKCkge1xyXG5cclxuICAgICAgICBjb25zdCBjYXJkVGl0bGUgPSBjcmVhdGVEb21FbGVtZW50KCdoMScsIHtpZDogJ21pbmktY2FyZC10aXRsZScsIGNsYXNzOidtaW5pLWNhcmQtaW5mbyd9LCBgVGl0bGU6ICR7dGhpcy50YXNrLnRpdGxlfWApXHJcbiAgICAgICAgY29uc3QgY2FyZFN0YXR1cyA9IGNyZWF0ZURvbUVsZW1lbnQoJ2gyJywge2lkOiAnbWluaS1jYXJkLXN0YXR1cycsIGNsYXNzOidtaW5pLWNhcmQtaW5mbyd9LCB0aGlzLnRhc2suam9iU3RhdHVzKVxyXG4gICAgICAgIGNvbnN0IGNhcmREdWVEYXRlID0gY3JlYXRlRG9tRWxlbWVudCgnaDInLCB7aWQ6ICdtaW5pLWNhcmQtZHVlRGF0ZScsIGNsYXNzOidtaW5pLWNhcmQtaW5mbyd9LCBgRHVlOiAke3RoaXMudGFzay5kdWVEYXRlfWApXHJcbiAgICAgICAgY29uc3QgY2FyZFByaW9yaXR5ID0gY3JlYXRlRG9tRWxlbWVudCgnaDInLCB7aWQ6ICdtaW5pLWNhcmQtcHJpb3JpdHknLCBjbGFzczonbWluaS1jYXJkLWluZm8nfSwgYFByaW9yaXR5OiAke3RoaXMudGFzay5wcmlvcml0eX1gKVxyXG5cclxuICAgICAgICBjb25zdCBjYXJkID0gY3JlYXRlRG9tRWxlbWVudChcclxuICAgICAgICAgICAgJ2RpdicsIFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogJ21pbmktY2FyZCcsIFxyXG4gICAgICAgICAgICAgICAgaWQ6IHRoaXMudGFzay50aXRsZS5yZXBsYWNlKC9cXHMrL2csICctJyksIFxyXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOnRydWUsXHJcbiAgICAgICAgICAgICAgICAvLyBvbmRyYWdzdGFydDogJ29uRHJhZ1N0YXJ0KGV2ZW50KScsXHJcbiAgICAgICAgICAgICAgICAvLyBvbmRyYWdvdmVyOiAnb25EcmFnT3ZlcihldmVudCknXHJcbiAgICAgICAgICAgIH0sIFxyXG4gICAgICAgICAgICBjYXJkVGl0bGUsIGNhcmREdWVEYXRlLCBjYXJkUHJpb3JpdHkpXHJcbiAgICAgICAgICAgIGNhcmQuc2V0QXR0cmlidXRlKCdkYXRhLXByb2plY3QnLCB0aGlzLnByb2plY3RSZW5kZXJlci5wcm9qZWN0LnJldHVyblByb2plY3ROYW1lV2l0aE5vV2hpdGVzcGFjZSgpKVxyXG4gICAgICAgICAgICBjYXJkLnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0dXMnLCB0aGlzLnRhc2sucmV0dXJuU3RhdHVzQXNIdG1sRGF0YSgpKVxyXG5cclxuICAgICAgICAvLyBBZGQgZXZlbnQgbGlzdGVuZXJzIGZvciBjbGljayB0byBvcGVuLCBkcmFnLCBhbmQgZHJvcFxyXG4gICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kKHRoaXMuY3JlYXRlRnVsbENhcmQodGhpcy5wcm9qZWN0UmVuZGVyZXIucHJvamVjdCwgdGhpcy50YXNrKSlcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBjYXJkLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnc3RhcnRcIiwgKGUpID0+IHtcclxuICAgICAgICAgICAgRHJhZy5vbkRyYWdTdGFydChlKVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgY2FyZC5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2VuZFwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBEcmFnLm9uRHJhZ0VuZChlKVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGNhcmQpXHJcbiAgICAgICAgcmV0dXJuIGNhcmRcclxuICAgIH1cclxuXHJcbiAgICBkZWxldGVQYXJlbnQoZSkge1xyXG4gICAgICAgIGUuY3VycmVudFRhcmdldC5wYXJlbnROb2RlLnJlbW92ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZVRhcmdldCh0YXJnZXQpIHtcclxuICAgICAgICB0YXJnZXQucmVtb3ZlKClcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm5TdGF0dXMoKXtcclxuICAgICAgICByZXR1cm4gdGhpcy50YXNrLmpvYlN0YXR1c1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGNyZWF0ZUNhcmQgfSBmcm9tIFwiLi9jYXJkRGlzcGxheVwiXHJcblxyXG5leHBvcnQgY2xhc3MgVG9kb0l0ZW0ge1xyXG4gICAgLy8gam9iU3RhdHVzID0gMDtcclxuICAgIGNvbnN0cnVjdG9yKHRpdGxlLCBqb2JTdGF0dXMsIHByaW9yaXR5LCBkdWVEYXRlLCBkZXRhaWwpe1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZSxcclxuICAgICAgICB0aGlzLmpvYlN0YXR1cyA9IGpvYlN0YXR1cyxcclxuICAgICAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHksXHJcbiAgICAgICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZSxcclxuICAgICAgICB0aGlzLmRldGFpbCA9IGRldGFpbFxyXG5cclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzdGF0dXNDaGFuZ2UnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaWQgPSBldmVudC5kZXRhaWwuaWQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1N0YXR1cyA9IGV2ZW50LmRldGFpbC5uZXdTdGF0dXM7XHJcbiAgICAgICAgICAgIGlmIChpZCA9PT0gdGhpcy50aXRsZSkgeyAvLyBBc3N1bWluZyB0aXRsZSBpcyB1bmlxdWUgZm9yIGVhY2ggVG9kb0l0ZW1cclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RhdHVzKG5ld1N0YXR1cylcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBTdGF0dXMgb2YgVG9kb0l0ZW0gJHt0aGlzLnRpdGxlfSBjaGFuZ2VkIHRvICR7dGhpcy5qb2JTdGF0dXN9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVTdGF0dXMobmV3U3RhdHVzKSB7XHJcbiAgICAgICAgaWYodGhpcy5qb2JTdGF0dXMgIT0gbmV3U3RhdHVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuam9iU3RhdHVzID0gbmV3U3RhdHVzXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuam9iU3RhdHVzKVxyXG4gICAgICAgIH07IFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB1cGRhdGVEZXRhaWwobmV3RGV0YWlsKSB7XHJcbiAgICAgICAgdGhpcy5kZXRhaWwgPSBuZXdEZXRhaWxcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVUaXRsZShuZXdUaXRsZSkge1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSBuZXdUaXRsZVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVByaW9yaXR5KG5ld1ByaW9yaXR5KXtcclxuICAgICAgICB0aGlzLnByaW9yaXR5ID0gbmV3UHJpb3JpdHlcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVEdWVEYXRlKG5ld0RhdGUpe1xyXG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IG5ld0RhdGVcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm5UaXRsZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aXRsZVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVyblN0YXR1cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5qb2JTdGF0dXNcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm5TdGF0dXNBc0h0bWxEYXRhKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmpvYlN0YXR1cy5yZXBsYWNlKC9cXHMrL2csICctJylcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm5Qcmlvcml0eSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcmlvcml0eVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybkR1ZURhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZHVlRGF0ZVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybkRldGFpbCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kZXRhaWxcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm5JdGVtSlNPTigpIHtcclxuICAgICAgICByZXR1cm4geyd0aXRsZSc6IHRoaXMucmV0dXJuVGl0bGUoKSxcclxuICAgICAgICAgJ3N0YXR1cyc6IHRoaXMucmV0dXJuU3RhdHVzKCksXHJcbiAgICAgICAgJ2R1ZURhdGUnOiB0aGlzLnJldHVybkR1ZURhdGUoKSxcclxuICAgICAgICAncHJpb3JpdHknOiB0aGlzLnJldHVyblByaW9yaXR5KCksXHJcbiAgICAgICAgJ2RldGFpbCc6IHRoaXMucmV0dXJuRGV0YWlsKCl9XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsImltcG9ydCB7IEVycm9yTG9nIH0gZnJvbSBcIi4vZXJyb3JMb2dnZXJcIjtcclxuY29uc3QgRXJyb3JMb2dnZXIgPSBuZXcgRXJyb3JMb2coKVxyXG5cclxuZXhwb3J0IGNsYXNzIFByb2plY3RIYW5kbGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHNpZGViYXIpe1xyXG4gICAgICAgIHRoaXMucHJvamVjdExpc3QgPSBbXTtcclxuICAgICAgICB0aGlzLnNpZGViYXIgPSBzaWRlYmFyXHJcbiAgICB9XHJcblxyXG4gICAgYWRkUHJvamVjdChwcm9qZWN0T2JqKSB7XHJcbiAgICAgICAgY29uc3QgZm91bmQgPSB0aGlzLnByb2plY3RMaXN0LnNvbWUocHJvID0+IHByby5uYW1lID09PSBwcm9qZWN0T2JqLm5hbWUpO1xyXG4gICAgICAgIGlmICghZm91bmQpICh0aGlzLnByb2plY3RMaXN0LnB1c2gocHJvamVjdE9iaikpO1xyXG4gICAgICAgIGVsc2Uge0Vycm9yTG9nZ2VyLnRocm93RXJyb3IoJ1Byb2plY3QgQWxyZWFkeSBFeGlzdHMnKX1cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVQcm9qZWN0KHByb2plY3ROYW1lKSB7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0TGlzdCA9IHRoaXMucHJvamVjdExpc3QuZmlsdGVyKChwcm8pID0+IFxyXG4gICAgICAgICAgICBwcm8ubmFtZSAhPT0gcHJvamVjdE5hbWVcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybkFsbFByb2plY3RUaXRsZXMoKSB7XHJcbiAgICAgICAgY29uc3Qgb3V0ID0gW11cclxuICAgICAgICBmb3IoY29uc3QgcHJvamVjdCBvZiB0aGlzLnByb2plY3RMaXN0KSB7XHJcbiAgICAgICAgICAgIG91dC5wdXNoKHByb2plY3QubmFtZSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dFxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybkFsbFByb2plY3RzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb2plY3RMaXN0XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuU2luZ2xlUHJvamVjdChwcm9qZWN0TmFtZSkge1xyXG4gICAgICAgIGxldCBpbmRleGVzID0gW10sIGk7XHJcbiAgICAgICAgZm9yKGkgPSAwOyBpIDwgdGhpcy5wcm9qZWN0TGlzdC5sZW5ndGg7IGkrKylcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvamVjdExpc3RbaV0ubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHByb2plY3ROYW1lLnRvTG93ZXJDYXNlKCkpKVxyXG4gICAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGkpO1xyXG4gICAgICAgICAgICAvLyBtaWdodCBoYXZlIHRvIHVuZG8gc3RyaW5naWZ5XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvamVjdExpc3RbaW5kZXhlc107XHJcbiAgICB9XHJcblxyXG59IiwiZXhwb3J0IGNsYXNzIEVycm9yTG9nIHtcclxuICAgIGNvbnN0cnVjdG9yKCl7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHRocm93RXJyb3IobWVzc2FnZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKVxyXG4gICAgfVxyXG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3Byb2plY3RBcmVhLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vcHJvamVjdEFyZWEuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgY3JlYXRlRG9tRWxlbWVudCB9IGZyb20gXCIuL2NvbXBvbmVudE1ha2Vyc1wiXHJcbmltcG9ydCB7IENhcmRSZW5kZXJlcn0gZnJvbSBcIi4vY2FyZERpc3BsYXlcIlxyXG5pbXBvcnQgeyBUb2RvSXRlbSB9IGZyb20gXCIuL3RvZG9PYmpcIjtcclxuaW1wb3J0ICcuL3N0eWxlcy9wcm9qZWN0QXJlYS5jc3MnO1xyXG5pbXBvcnQgKiBhcyBEcmFnIGZyb20gJy4vZHJhZ0Z1bmN0aW9ucy5qcydcclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9qZWN0UmVuZGVyZXIge1xyXG4gICAgY29uc3RydWN0b3IocHJvamVjdEhhbmRsZXIsIHByb2plY3QsIHNpZGViYXIpe1xyXG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3RcclxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBwcm9qZWN0SGFuZGxlclxyXG4gICAgICAgIHRoaXMuc2lkZWJhciA9IHNpZGViYXJcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc3RhdHVzQ2hhbmdlJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZXZlbnQuZGV0YWlsLmlkLnJlcGxhY2VBbGwoJy0nLCAnICcpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld1N0YXR1cyA9IGV2ZW50LmRldGFpbC5uZXdTdGF0dXM7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhc2tUaXRsZXMgPSB0aGlzLnByb2plY3QucmV0dXJuQWxsVGFza1RpdGxlcygpXHJcbiAgICAgICAgICAgIHRhc2tUaXRsZXMuZm9yRWFjaCgodGl0bGUpID0+IHRpdGxlLnRvTG93ZXJDYXNlKCkpXHJcbiAgICAgICAgICAgIGlmICh0YXNrVGl0bGVzLmluY2x1ZGVzKGlkKSkgeyAvLyBBc3N1bWluZyB0aXRsZSBpcyB1bmlxdWUgZm9yIGVhY2ggVG9kb0l0ZW1cclxuICAgICAgICAgICAgICAgIHRoaXMucHJvamVjdC5maWx0ZXJUYXNrcyhpZCkudXBkYXRlU3RhdHVzKG5ld1N0YXR1cylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjbGVhckFsbENoaWxkcmVuKHRhcmdldCl7XHJcbiAgICAgICAgdGFyZ2V0LmlubmVySFRNTCA9ICcnXHJcbiAgICAgICAgLy8gd2hpbGUgKHRhcmdldC5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAvLyAgICAgdGFyZ2V0LnJlbW92ZUNoaWxkKHRhcmdldC5sYXN0Q2hpbGQpO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuXHJcbiAgICByZW5kZXJBbmRVcGRhdGVQcm9qZWN0KCkgIHsgICAgICAgIFxyXG4gICAgICAgIGNvbnN0IHByb2plY3RJZCA9IHRoaXMucHJvamVjdC5yZXR1cm5Qcm9qZWN0TmFtZVdpdGhOb1doaXRlc3BhY2UoKVxyXG4gICAgICAgIGNvbnN0IGNvbHVtbnNUb1VwZGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYCMke3Byb2plY3RJZH0gLnByb2plY3Qtc3RhdHVzLWNvbGApXHJcblxyXG4gICAgICAgIGNvbHVtbnNUb1VwZGF0ZS5mb3JFYWNoKChjb2wpID0+IHtcclxuICAgICAgICAgICAgaWYoY29sLmhhc0NoaWxkTm9kZXMoKSl7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQWxsQ2hpbGRyZW4oY29sKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLmNyZWF0ZVByb2plY3RET00oKVxyXG4gICAgICAgIHRoaXMucGxhY2VUYXNrQ2FyZHNJbnRvUHJvamVjdERPTSgpXHJcbiAgICB9XHJcblxyXG4gICAgc3VibWl0TmV3VGFzaygpIHtcclxuICAgICAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXctY2FyZC10aXRsZScpLnZhbHVlXHJcbiAgICAgICAgY29uc3QgZHVlZGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXctY2FyZC1kdWVEYXRlJykudmFsdWVcclxuICAgICAgICBjb25zdCBwcmlvcml0eSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNuZXctY2FyZC1wcmlvcml0eScpLnZhbHVlXHJcbiAgICAgICAgY29uc3QgZGV0YWlsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI25ldy1jYXJkLWRldGFpbCcpLnZhbHVlXHJcblxyXG4gICAgICAgIGNvbnN0IHN0YXR1cyA9ICdub3Qtc3RhcnRlZCdcclxuICAgICAgICBsZXQgbmV3VGFzayA9IG5ldyBUb2RvSXRlbSh0aXRsZSwgc3RhdHVzLCBwcmlvcml0eSwgZHVlZGF0ZSwgZGV0YWlsKVxyXG4gICAgICAgIHRoaXMucHJvamVjdC5hZGRUYXNrKG5ld1Rhc2spXHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyVGFza0NhcmRzKCl7XHJcbiAgICAgICAgY29uc3QgbGlzdE9mVGFza3NJblByb2plY3QgPSB0aGlzLnByb2plY3QucmV0dXJuQWxsVGFza3MoKVxyXG5cclxuICAgICAgICBsZXQgY2FyZEFycmF5ID0gW11cclxuICAgICAgICBmb3IobGV0IHRhc2sgb2YgbGlzdE9mVGFza3NJblByb2plY3QpIHtcclxuICAgICAgICAgICAgbGV0IENhcmRDcmVhdGVyT2JqID0gbmV3IENhcmRSZW5kZXJlcih0aGlzLCB0YXNrKVxyXG4gICAgICAgICAgICBjYXJkQXJyYXkucHVzaChDYXJkQ3JlYXRlck9iailcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhcmRBcnJheVxyXG4gICAgfVxyXG5cclxuICAgIHBsYWNlVGFza0NhcmRzSW50b1Byb2plY3RET00oKXtcclxuXHJcbiAgICAgICAgbGV0IHRhc2tzID0gdGhpcy5yZW5kZXJUYXNrQ2FyZHMoKVxyXG5cclxuICAgICAgICBmb3IobGV0IHRhc2sgb2YgdGFza3Mpe1xyXG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gdGFzay5yZXR1cm5TdGF0dXMoKVxyXG4gICAgICAgICAgICBsZXQgcHJvamVjdE5hbWVGb3JIVE1MID0gdGhpcy5wcm9qZWN0LnJldHVyblByb2plY3ROYW1lV2l0aE5vV2hpdGVzcGFjZSgpXHJcbiAgICAgICAgICAgIGxldCB0YXJnZXRJRCA9IGAjJHtzdGF0dXN9LSR7cHJvamVjdE5hbWVGb3JIVE1MfWBcclxuICAgICAgICAgICAgbGV0IGNvbHVtbkZvclRhc2tDYXJkQnlQcm9ncmVzcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0SUQpXHJcbiAgICAgICAgICAgIGNvbHVtbkZvclRhc2tDYXJkQnlQcm9ncmVzcy5hcHBlbmRDaGlsZCh0YXNrLmNyZWF0ZU1pbmltaXplZENhcmQoKSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJvamVjdCgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLnByb2plY3RcclxuICAgIH0gXHJcblxyXG4gICAgdXBkYXRlSURzVG9OZXdQcm9qZWN0TmFtZShvbGROYW1lLCBuZXdOYW1lKXtcclxuICAgICAgICBjb25zdCBwcm9qZWN0RE9NVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtvbGROYW1lfS10aXRsZWApXHJcblxyXG4gICAgICAgIGxldCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7dGhpcy5wcm9qZWN0LnJldHVyblByb2plY3ROYW1lV2l0aE5vV2hpdGVzcGFjZSgpfS1lZGl0YClcclxuICAgICAgICBpZihlZGl0QnV0dG9uLmlubmVySFRNTCAhPSAnRWRpdCcpIGVkaXRCdXR0b24uaW5uZXJIVE1MID0gJ0VkaXQnXHJcblxyXG4gICAgICAgIGNvbnN0IHByb2plY3RET00gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtvbGROYW1lfWApXHJcbiAgICAgICAgcHJvamVjdERPTS5zZXRBdHRyaWJ1dGUoJ2lkJywgbmV3TmFtZSlcclxuICAgICAgICBcclxuICAgICAgICBjb25zdCBwcm9qZWN0Tm90U3RhcnRlZENvbHVtbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNub3Qtc3RhcnRlZC0ke29sZE5hbWV9YClcclxuICAgICAgICBwcm9qZWN0Tm90U3RhcnRlZENvbHVtbi5zZXRBdHRyaWJ1dGUoJ2lkJywgYG5vdC1zdGFydGVkLSR7bmV3TmFtZX1gKVxyXG4gICAgICAgIGNvbnN0IHByb2plY3RJblByb2dyZXNzQ29sdW1uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgI2luLXByb2dyZXNzLSR7b2xkTmFtZX1gKVxyXG4gICAgICAgIHByb2plY3RJblByb2dyZXNzQ29sdW1uLnNldEF0dHJpYnV0ZSgnaWQnLCBgaW4tcHJvZ3Jlc3MtJHtuZXdOYW1lfWApXHJcbiAgICAgICAgY29uc3QgcHJvamVjdENvbXBsZXRlZENvbHVtbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCNjb21wbGV0ZWQtJHtvbGROYW1lfWApXHJcbiAgICAgICAgcHJvamVjdENvbXBsZXRlZENvbHVtbi5zZXRBdHRyaWJ1dGUoJ2lkJywgYGNvbXBsZXRlZC0ke25ld05hbWV9YClcclxuXHJcbiAgICAgICAgcHJvamVjdERPTVRpdGxlLnNldEF0dHJpYnV0ZSgnaWQnLCBgJHtuZXdOYW1lfS10aXRsZWApXHJcbiAgICAgICAgZWRpdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgYCR7bmV3TmFtZX0tZWRpdGApXHJcblxyXG4gICAgICAgIGNvbnN0IHByb2plY3RET01EZWxldGVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtvbGROYW1lfS1kZWxldGVgKVxyXG4gICAgICAgIHByb2plY3RET01EZWxldGVCdXR0b24uc2V0QXR0cmlidXRlKCdpZCcsIGAke25ld05hbWV9LWRlbGV0ZWApXHJcbiAgICAgICAgY29uc3QgcHJvamVjdERPTUNvbGxhcHNlQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgIyR7b2xkTmFtZX0tY29sbGFwc2VgKVxyXG4gICAgICAgIHByb2plY3RET01Db2xsYXBzZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2lkJywgYCR7bmV3TmFtZX0tY29sbGFwc2VgKVxyXG5cclxuICAgICAgICBpZihwcm9qZWN0Tm90U3RhcnRlZENvbHVtbi5oYXNDaGlsZE5vZGVzKCkgfHwgcHJvamVjdEluUHJvZ3Jlc3NDb2x1bW4uaGFzQ2hpbGROb2RlcygpIHx8IHByb2plY3RDb21wbGV0ZWRDb2x1bW4uaGFzQ2hpbGROb2RlcygpKXtcclxuICAgICAgICAgICAgcHJvamVjdE5vdFN0YXJ0ZWRDb2x1bW4uY2hpbGROb2Rlcy5mb3JFYWNoKGNhcmQgPT4gY2FyZC5kYXRhc2V0LnByb2plY3QgPSBuZXdOYW1lKVxyXG4gICAgICAgICAgICBwcm9qZWN0SW5Qcm9ncmVzc0NvbHVtbi5jaGlsZE5vZGVzLmZvckVhY2goY2FyZCA9PiBjYXJkLmRhdGFzZXQucHJvamVjdCA9IG5ld05hbWUpXHJcbiAgICAgICAgICAgIHByb2plY3RDb21wbGV0ZWRDb2x1bW4uY2hpbGROb2Rlcy5mb3JFYWNoKGNhcmQgPT4gY2FyZC5kYXRhc2V0LnByb2plY3QgPSBuZXdOYW1lKSBcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0LnVwZGF0ZVByb2plY3ROYW1lKG5ld05hbWUpXHJcbiAgICAgICAgdGhpcy5zaWRlYmFyLmRpc3BsYXlQcm9qZWN0cygpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlTmV3VGFza0Zvcm0oKSB7XHJcbiAgICAgICAgY29uc3QgY2FyZFRpdGxlID0gY3JlYXRlRG9tRWxlbWVudChcclxuICAgICAgICAgICAgJ2lucHV0JywgXHJcbiAgICAgICAgICAgIHtpZDogJ25ldy1jYXJkLXRpdGxlJywgY2xhc3M6J25ldy1jYXJkLWluZm8nLCB0eXBlOid0ZXh0J30pXHJcblxyXG4gICAgICAgIGNvbnN0IGNhcmREdWVEYXRlID0gY3JlYXRlRG9tRWxlbWVudChcclxuICAgICAgICAgICAgJ2lucHV0JywgXHJcbiAgICAgICAgICAgIHtpZDogJ25ldy1jYXJkLWR1ZURhdGUnLCBjbGFzczonbmV3LWNhcmQtaW5mbyd9KVxyXG4gICAgICAgXHJcbiAgICAgICAgY29uc3QgcHJpb3JpdGllcyA9IGNyZWF0ZURvbUVsZW1lbnQoXHJcbiAgICAgICAgICAgICdkYXRhbGlzdCcsIFxyXG4gICAgICAgICAgICB7aWQ6J3ByaW9yaXRpZXMnfSwgXHJcbiAgICAgICAgICAgIGNyZWF0ZURvbUVsZW1lbnQoJ29wdGlvbicsIHt2YWx1ZTogJ2xvdyd9KSwgXHJcbiAgICAgICAgICAgIGNyZWF0ZURvbUVsZW1lbnQoJ29wdGlvbicsIHt2YWx1ZTogJ21lZGl1bSd9KSwgXHJcbiAgICAgICAgICAgIGNyZWF0ZURvbUVsZW1lbnQoJ29wdGlvbicsIHt2YWx1ZTogJ2hpZ2gnfVxyXG4gICAgICAgICAgICApKVxyXG5cclxuICAgICAgICBjb25zdCBjYXJkUHJpb3JpdHkgPSBjcmVhdGVEb21FbGVtZW50KFxyXG4gICAgICAgICAgICAnaW5wdXQnLCBcclxuICAgICAgICAgICAge2lkOiAnbmV3LWNhcmQtcHJpb3JpdHknLCBjbGFzczonbmV3LWNhcmQtaW5mbycsIGxpc3Q6J3ByaW9yaXRpZXMnfSwgXHJcbiAgICAgICAgICAgIHByaW9yaXRpZXMpXHJcblxyXG4gICAgICAgIGNvbnN0IGNhcmREZXRhaWwgPSBjcmVhdGVEb21FbGVtZW50KFxyXG4gICAgICAgICAgICAnaW5wdXQnLCBcclxuICAgICAgICAgICAge2lkOiAnbmV3LWNhcmQtZGV0YWlsJywgY2xhc3M6J25ldy1jYXJkLWluZm8nLCB0eXBlOid0ZXh0J30pXHJcblxyXG4gICAgICAgIGNvbnN0IGNhcmRTdWJtaXRCdXR0b24gPSBjcmVhdGVEb21FbGVtZW50KFxyXG4gICAgICAgICAgICAnYnV0dG9uJywgXHJcbiAgICAgICAgICAgIHtpZDogJ25ldy1jYXJkLWNyZWF0ZS1idXR0b24nLCBjbGFzczogJ25ldy1jYXJkLWluZm8nfSwgXHJcbiAgICAgICAgICAgICdDcmVhdGUgVGFzaycpXHJcbiAgICAgICAgY29uc3QgY2FyZCA9IGNyZWF0ZURvbUVsZW1lbnQoXHJcbiAgICAgICAgICAgICdkaXYnLCBcclxuICAgICAgICAgICAge2NsYXNzOiAnZnVsbC1jYXJkJ30sXHJcbiAgICAgICAgICAgICBjYXJkVGl0bGUsIGNhcmREdWVEYXRlLCBjYXJkUHJpb3JpdHksIGNhcmREZXRhaWwsIGNhcmRTdWJtaXRCdXR0b24pXHJcblxyXG4gICAgICAgIGNvbnN0IHJlbW92ZUJHID0gY3JlYXRlRG9tRWxlbWVudChcclxuICAgICAgICAgICAgJ2RpdicsIFxyXG4gICAgICAgICAgICB7Y2xhc3M6ICdyZW1vdmUtYmcnLCBpZDoncmVtb3ZlLWZ1bGwtY2FyZC1iZyd9LCBcclxuICAgICAgICAgICAgY2FyZClcclxuICAgIFxyXG4gICAgICAgIGNvbnN0IGNhcmRBcmVhID0gY3JlYXRlRG9tRWxlbWVudChcclxuICAgICAgICAgICAgJ2RpdicsIFxyXG4gICAgICAgICAgICB7aWQ6ICdjYXJkLWFyZWEnfSwgXHJcbiAgICAgICAgICAgIGNhcmQsIHJlbW92ZUJHKVxyXG5cclxuICAgICAgICByZW1vdmVCRy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKGUpe1xyXG4gICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5yZW1vdmUoKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBjYXJkU3VibWl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zdWJtaXROZXdUYXNrKHRoaXMucHJvamVjdCksIFxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlckFuZFVwZGF0ZVByb2plY3QoKVxyXG4gICAgICAgICAgICBlLmN1cnJlbnRUYXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlbW92ZSgpXHJcbiAgICAgICAgfSlcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChjYXJkQXJlYSlcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVQcm9qZWN0RE9NKG5ld0RPTSl7XHJcbiAgICAgICAgY29uc3QgcHJvaiA9IHRoaXMucHJvamVjdFxyXG5cclxuICAgICAgICAvLyBIZWFkZXJcclxuICAgICAgICBjb25zdCBuZXdUYXNrQnV0dG9uID0gY3JlYXRlRG9tRWxlbWVudCgnYnV0dG9uJywgXHJcbiAgICAgICAgICAgIHtjbGFzczonbmV3LXRhc2stYnV0dG9uJ30sIFxyXG4gICAgICAgICAgICAnKycpXHJcblxyXG4gICAgICAgIG5ld1Rhc2tCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlTmV3VGFza0Zvcm0ocHJvaik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb2plY3RET01UaXRsZSA9IGNyZWF0ZURvbUVsZW1lbnQoXHJcbiAgICAgICAgICAgICdkaXYnLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczoncHJvamVjdC1uYW1lJywgXHJcbiAgICAgICAgICAgICAgICBpZDogYCR7dGhpcy5wcm9qZWN0LnJldHVyblByb2plY3ROYW1lV2l0aE5vV2hpdGVzcGFjZSgpfS10aXRsZWAsIFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0aGlzLnByb2plY3QubmFtZVxyXG4gICAgICAgICAgICApXHJcblxyXG4gICAgICAgIGNvbnN0IHByb2plY3RET01FZGl0VGl0bGVCdXR0b24gPSBjcmVhdGVEb21FbGVtZW50KFxyXG4gICAgICAgICAgICAnYnV0dG9uJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6J3Byb2plY3QtbmFtZS1jaGFuZ2UtYnV0dG9uJywgXHJcbiAgICAgICAgICAgICAgICBpZDogYCR7dGhpcy5wcm9qZWN0LnJldHVyblByb2plY3ROYW1lV2l0aE5vV2hpdGVzcGFjZSgpfS1lZGl0YFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAnRWRpdCdcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIGZ1bmN0aW9uIGVkaXRUaXRsZShlKXtcclxuICAgICAgICAgICAgICAgIHByb2plY3RET01UaXRsZS5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpXHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0RE9NVGl0bGUuZm9jdXMoKSBcclxuICAgICAgICAgICAgICAgIGUuaW5uZXJIVE1MID0gJ1NhdmUnXHJcbiAgICAgICAgICAgICAgICBlLmNsYXNzTGlzdC5hZGQoJ3NhdmUnKVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBmdW5jdGlvbiBzYXZlVGl0bGUoZSl7XHJcbiAgICAgICAgICAgICAgICBlLmlubmVySFRNTCA9ICdFZGl0J1xyXG4gICAgICAgICAgICAgICAgcHJvamVjdERPTVRpdGxlLnNldEF0dHJpYnV0ZSgnY29udGVudGVkaXRhYmxlJywgZmFsc2UpICBcclxuICAgICAgICAgICAgICAgIGUuY2xhc3NMaXN0LnJlbW92ZSgnc2F2ZScpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm9qZWN0RE9NRWRpdFRpdGxlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgICAgICAgaWYocHJvamVjdERPTUVkaXRUaXRsZUJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoJ3NhdmUnKSl7XHJcbiAgICAgICAgICAgICAgICBsZXQgb2xkSUQgPSBwcm9qZWN0RE9NLmlkXHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3SUQgPSBwcm9qZWN0RE9NVGl0bGUuaW5uZXJIVE1MLnJlcGxhY2UoL1xccysvZywgJy0nKVxyXG5cclxuICAgICAgICAgICAgICAgIHNhdmVUaXRsZShwcm9qZWN0RE9NRWRpdFRpdGxlQnV0dG9uKVxyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVJRHNUb05ld1Byb2plY3ROYW1lKG9sZElELCBuZXdJRClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgZWRpdFRpdGxlKHByb2plY3RET01FZGl0VGl0bGVCdXR0b24pXHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0RE9NRWRpdFRpdGxlQnV0dG9uLmlubmVySFRNTCA9ICdTYXZlJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb2plY3RET01EZWxldGVCdXR0b24gPSBjcmVhdGVEb21FbGVtZW50KFxyXG4gICAgICAgICAgICAnYnV0dG9uJyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6J3Byb2plY3QtZGVsZXRlLWJ1dHRvbicsIFxyXG4gICAgICAgICAgICAgICAgaWQ6IGAke3RoaXMucHJvamVjdC5yZXR1cm5Qcm9qZWN0TmFtZVdpdGhOb1doaXRlc3BhY2UoKX0tZGVsZXRlYCwgXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdEZWxldGUnXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICBwcm9qZWN0RE9NRGVsZXRlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZXIucmVtb3ZlUHJvamVjdCh0aGlzLnByb2plY3QubmFtZSlcclxuICAgICAgICAgICAgcHJvamVjdERPTS5yZW1vdmUoKVxyXG4gICAgICAgICAgICB0aGlzLnNpZGViYXIuZGlzcGxheVByb2plY3RzKClcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdERPTUNvbGxhcHNlQnV0dG9uID0gY3JlYXRlRG9tRWxlbWVudChcclxuICAgICAgICAgICAgJ2J1dHRvbicsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOidwcm9qZWN0LWNvbGxhcHNlLWJ1dHRvbicsIFxyXG4gICAgICAgICAgICAgICAgaWQ6IGAke3RoaXMucHJvamVjdC5yZXR1cm5Qcm9qZWN0TmFtZVdpdGhOb1doaXRlc3BhY2UoKX0tY29sbGFwc2VgLCBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgLy8gY29uc3QgcHJvamVjdENvbGxhcHNlTGFiZWwgPSBjcmVhdGVEb21FbGVtZW50KCdsYWJlbCcsXHJcbiAgICAgICAgLy8ge2ZvcjoncHJvamVjdC1jb2xsYXBzZS1idXR0b24nLFxyXG4gICAgICAgIC8vIGNsYXNzOidsYmwtdG9nZ2xlJ30pXHJcblxyXG4gICAgICAgIHByb2plY3RET01Db2xsYXBzZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgaWYocHJvamVjdENvbHVtbnNXcmFwcGVyLmNsYXNzTGlzdC5jb250YWlucygnY29sbGFwc2VkJykpe1xyXG4gICAgICAgICAgICAgICAgcHJvamVjdENvbHVtbnNXcmFwcGVyLmNsYXNzTGlzdC5yZW1vdmUoJ2NvbGxhcHNlZCcpXHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0RE9NQ29sbGFwc2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgndG9nZ2xlLWJ1dHRvbi10cmFuc2l0aW9uJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgcHJvamVjdENvbHVtbnNXcmFwcGVyLmNsYXNzTGlzdC5hZGQoJ2NvbGxhcHNlZCcpXHJcbiAgICAgICAgICAgICAgICBwcm9qZWN0RE9NQ29sbGFwc2VCdXR0b24uY2xhc3NMaXN0LmFkZCgndG9nZ2xlLWJ1dHRvbi10cmFuc2l0aW9uJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdERPTU9wdGlvbnMgPSBjcmVhdGVEb21FbGVtZW50KFxyXG4gICAgICAgICAgICAnZGl2JywgXHJcbiAgICAgICAgICAgIHtjbGFzczoncHJvamVjdC1vcHRpb25zJ30sIFxyXG4gICAgICAgICAgICBwcm9qZWN0RE9NVGl0bGUsXHJcbiAgICAgICAgICAgIHByb2plY3RET01FZGl0VGl0bGVCdXR0b24sXHJcbiAgICAgICAgICAgIHByb2plY3RET01EZWxldGVCdXR0b24sXHJcbiAgICAgICAgICAgIG5ld1Rhc2tCdXR0b24sXHJcbiAgICAgICAgICAgIHByb2plY3RET01Db2xsYXBzZUJ1dHRvblxyXG4gICAgICAgICAgICAvLyBwcm9qZWN0Q29sbGFwc2VMYWJlbFxyXG4gICAgICAgICAgICApXHJcblxyXG4gICAgICAgIGNvbnN0IHByb2plY3RIZWFkZXIgPSBjcmVhdGVEb21FbGVtZW50KFxyXG4gICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAge2NsYXNzOiAncHJvamVjdC1oZWFkZXInfSxcclxuICAgICAgICAgICAgcHJvamVjdERPTU9wdGlvbnMpXHJcblxyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tIFByb2dyZXNzIGNvbHVtbnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0vL1xyXG4gICAgICAgIGNvbnN0IHByb2plY3ROb3RTdGFydGVkQ29sdW1uID0gY3JlYXRlRG9tRWxlbWVudChcclxuICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOidwcm9qZWN0LXN0YXR1cy1jb2wnLCBcclxuICAgICAgICAgICAgICAgIGlkOmBub3Qtc3RhcnRlZC0ke3RoaXMucHJvamVjdC5yZXR1cm5Qcm9qZWN0TmFtZVdpdGhOb1doaXRlc3BhY2UoKX1gLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIHByb2plY3ROb3RTdGFydGVkQ29sdW1uLmNsYXNzTGlzdC5hZGQoJ25vdC1zdGFydGVkJylcclxuICAgICAgICBwcm9qZWN0Tm90U3RhcnRlZENvbHVtbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdHVzJywgJ25vdC1zdGFydGVkJylcclxuICAgICAgICBwcm9qZWN0Tm90U3RhcnRlZENvbHVtbi5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgKGUpID0+IHtcclxuICAgICAgICAgICAgRHJhZy5vbkRyYWdPdmVyKGUpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICBwcm9qZWN0Tm90U3RhcnRlZENvbHVtbi5hZGRFdmVudExpc3RlbmVyKFwiZHJvcFwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBEcmFnLm9uRHJvcChlKVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgcHJvamVjdE5vdFN0YXJ0ZWRDb2x1bW4uYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdsZWF2ZVwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBEcmFnLm9uRHJhZ0xlYXZlKGUpXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdEluUHJvZ3Jlc3NDb2x1bW4gPSBjcmVhdGVEb21FbGVtZW50KFxyXG4gICAgICAgICAgICAnZGl2JyxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6J3Byb2plY3Qtc3RhdHVzLWNvbCcsIFxyXG4gICAgICAgICAgICAgICAgaWQ6YGluLXByb2dyZXNzLSR7dGhpcy5wcm9qZWN0LnJldHVyblByb2plY3ROYW1lV2l0aE5vV2hpdGVzcGFjZSgpfWAsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgcHJvamVjdEluUHJvZ3Jlc3NDb2x1bW4uY2xhc3NMaXN0LmFkZCgnaW4tcHJvZ3Jlc3MnKVxyXG4gICAgICAgIHByb2plY3RJblByb2dyZXNzQ29sdW1uLnNldEF0dHJpYnV0ZSgnZGF0YS1zdGF0dXMnLCAnaW4tcHJvZ3Jlc3MnKVxyXG4gICAgICAgIHByb2plY3RJblByb2dyZXNzQ29sdW1uLmFkZEV2ZW50TGlzdGVuZXIoXCJkcmFnb3ZlclwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBEcmFnLm9uRHJhZ092ZXIoZSlcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIHByb2plY3RJblByb2dyZXNzQ29sdW1uLmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIERyYWcub25Ecm9wKGUpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICBwcm9qZWN0SW5Qcm9ncmVzc0NvbHVtbi5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ2xlYXZlXCIsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIERyYWcub25EcmFnTGVhdmUoZSlcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBwcm9qZWN0Q29tcGxldGVkQ29sdW1uID0gY3JlYXRlRG9tRWxlbWVudChcclxuICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzOidwcm9qZWN0LXN0YXR1cy1jb2wnLCBcclxuICAgICAgICAgICAgICAgIGlkOmBjb21wbGV0ZWQtJHt0aGlzLnByb2plY3QucmV0dXJuUHJvamVjdE5hbWVXaXRoTm9XaGl0ZXNwYWNlKCl9YCxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICBwcm9qZWN0Q29tcGxldGVkQ29sdW1uLmNsYXNzTGlzdC5hZGQoJ2NvbXBsZXRlZCcpXHJcbiAgICAgICAgcHJvamVjdENvbXBsZXRlZENvbHVtbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3RhdHVzJywgJ2NvbXBsZXRlZCcpXHJcbiAgICAgICAgcHJvamVjdENvbXBsZXRlZENvbHVtbi5hZGRFdmVudExpc3RlbmVyKFwiZHJhZ292ZXJcIiwgKGUpID0+IHtcclxuICAgICAgICAgICAgRHJhZy5vbkRyYWdPdmVyKGUpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICBwcm9qZWN0Q29tcGxldGVkQ29sdW1uLmFkZEV2ZW50TGlzdGVuZXIoXCJkcm9wXCIsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIERyYWcub25Ecm9wKGUpXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHByb2plY3RDb21wbGV0ZWRDb2x1bW4uYWRkRXZlbnRMaXN0ZW5lcihcImRyYWdsZWF2ZVwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBEcmFnLm9uRHJhZ0xlYXZlKGUpXHJcbiAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvamVjdENvbHVtbnNXcmFwcGVyID0gY3JlYXRlRG9tRWxlbWVudChcclxuICAgICAgICAgICAgJ2RpdicsXHJcbiAgICAgICAgICAgIHtjbGFzczoncHJvamVjdC1zdGF0dXMtd3JhcHBlcicsIGlkOmBjb2x1bW5zLSR7dGhpcy5wcm9qZWN0LnJldHVyblByb2plY3ROYW1lV2l0aE5vV2hpdGVzcGFjZSgpfWB9LFxyXG4gICAgICAgICAgICBwcm9qZWN0Tm90U3RhcnRlZENvbHVtbiwgcHJvamVjdEluUHJvZ3Jlc3NDb2x1bW4sIHByb2plY3RDb21wbGV0ZWRDb2x1bW4pXHJcblxyXG4gICAgICAgIC8vIHB1bGwgZXZlcnl0aGluZyB0b2dldGhlclxyXG4gICAgICAgIGNvbnN0IHByb2plY3RET00gPSBjcmVhdGVEb21FbGVtZW50KCdkaXYnLCBcclxuICAgICAgICAgICAge2NsYXNzOidwcm9qZWN0JywgXHJcbiAgICAgICAgICAgICAgICBpZDogdGhpcy5wcm9qZWN0LnJldHVyblByb2plY3ROYW1lV2l0aE5vV2hpdGVzcGFjZSgpfSwgXHJcbiAgICAgICAgICAgIHByb2plY3RIZWFkZXIsIHByb2plY3RDb2x1bW5zV3JhcHBlcilcclxuXHJcbiAgICAgICAgLy8gcHJvamVjdERPTS5hcHBlbmQoLi4udGhpcy5yZW5kZXJUYXNrQ2FyZHMoKSlcclxuIFxyXG4gICAgICAgIGNvbnN0IHByb2plY3RBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Byb2plY3RzJylcclxuICAgICAgICBpZihuZXdET00pe1xyXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0U2VjdGlvbkhlYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwcm9qZWN0LXNlY3Rpb24taGVhZGVyJylcclxuICAgICAgICAgICAgcHJvamVjdEFyZWEuaW5zZXJ0QmVmb3JlKHByb2plY3RET00sIHByb2plY3RTZWN0aW9uSGVhZGVyLm5leHRTaWJsaW5nKVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHByb2plY3RBcmVhLmFwcGVuZENoaWxkKHByb2plY3RET00pXHJcblxyXG4gICAgICAgIC8vdXBkYXRlIHByb2plY3QgbmFtZSBhbmQgZGl2IGlkcyB3aGVuIGVkaXR0aW5nXHJcbiAgICAgICAgcHJvamVjdERPTVRpdGxlLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKGUpID0+IHtcclxuICAgICAgICAgICAgbGV0IGVkaXRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHt0aGlzLnByb2plY3QucmV0dXJuUHJvamVjdE5hbWVXaXRoTm9XaGl0ZXNwYWNlKCl9LWVkaXRgKVxyXG4gICAgICAgICAgICBpZihlZGl0QnV0dG9uLmlubmVySFRNTCAhPSAnU2F2ZScpIGVkaXRCdXR0b24uaW5uZXJIVE1MID0gJ1NhdmUnXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBjcmVhdGVEb21FbGVtZW50IH0gZnJvbSBcIi4vY29tcG9uZW50TWFrZXJzXCJcclxuaW1wb3J0ICcuL3N0eWxlcy9wcm9qZWN0QXJlYS5jc3MnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNpZGViYXIge1xyXG4gICAgY29uc3RydWN0b3IoaGFuZGxlcil7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gaGFuZGxlclxyXG4gICAgICAgIHRoaXMucHJvamVjdExpc3QgPSB0aGlzLmhhbmRsZXIucmV0dXJuQWxsUHJvamVjdHMoKVxyXG4gICAgICAgIHRoaXMuRE9NID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZGViYXInKVxyXG4gICAgfVxyXG5cclxuICAgIGdldFByb2plY3RMaXN0KCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlci5yZXR1cm5BbGxQcm9qZWN0cygpXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJvamVjdFRpdGxlcygpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhhbmRsZXIucmV0dXJuQWxsUHJvamVjdFRpdGxlcygpXHJcbiAgICB9XHJcblxyXG4gICAgZGlzcGxheVByb2plY3RzKCl7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdExpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2lkZWJhci1wcm9qZWN0LWxpc3QnKVxyXG4gICAgICAgIGlmKHByb2plY3RMaXN0Lmhhc0NoaWxkTm9kZXMpe1xyXG4gICAgICAgICAgICBwcm9qZWN0TGlzdC5pbm5lckhUTUwgPSAnJ1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdGl0bGVzID0gdGhpcy5nZXRQcm9qZWN0TGlzdCgpXHJcbiAgICAgICAgZm9yKGxldCBwcm9qIG9mIHRpdGxlcyl7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHByb2opXHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RUaXRsZSA9IGNyZWF0ZURvbUVsZW1lbnQoXHJcbiAgICAgICAgICAgICAgICAnbGknLFxyXG4gICAgICAgICAgICAgICAge2NsYXNzOidwcm9qZWN0LWxpc3QtaXRlbScsIGlkOmAke3Byb2oucmV0dXJuUHJvamVjdE5hbWVXaXRoTm9XaGl0ZXNwYWNlKCl9LXNpZGViYXJgfSxcclxuICAgICAgICAgICAgICAgIHByb2oucmV0dXJuUHJvamVjdE5hbWUoKVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgICAgIHByb2plY3RUaXRsZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dTaW5nbGVQcm9qZWN0KHByb2oucmV0dXJuUHJvamVjdE5hbWVXaXRoTm9XaGl0ZXNwYWNlKCkpXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKVxyXG4gICAgICAgICAgICAgICAgZS50YXJnZXQuY2xhc3NMaXN0LmFkZCgnY2xpY2tlZCcpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIHByb2plY3RMaXN0LmFwcGVuZENoaWxkKHByb2plY3RUaXRsZSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd1NpbmdsZVByb2plY3QocHJvamVjdCl7XHJcbiAgICAgICAgY29uc3QgYWxsUHJvamVjdERPTVMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucHJvamVjdCcpXHJcbiAgICAgICAgYWxsUHJvamVjdERPTVMuZm9yRWFjaChkb20gPT4ge2RvbS5jbGFzc0xpc3QuYWRkKCdoaWRlJyl9KVxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGxpc3RJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpJylcclxuICAgICAgICBsaXN0SXRlbXMuZm9yRWFjaChsaSA9PiBsaS5jbGFzc0xpc3QucmVtb3ZlKCdjbGlja2VkJykpXHJcblxyXG4gICAgICAgIGNvbnN0IHRhcmdldERPTSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke3Byb2plY3R9YClcclxuICAgICAgICB0YXJnZXRET00uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpXHJcbiAgICB9XHJcblxyXG4gICAgZ2l2ZVNpZGViYXJPcGVuQnV0dG9uRnVuY3Rpb24oKXtcclxuICAgICAgICBjb25zdCBvcGVuQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm9wZW5idG4nKVxyXG4gICAgICAgIGNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2lkZWJhcicpXHJcblxyXG4gICAgICAgIGxldCBfdG9nZ2xlU2lkZWJhciA9ICgpID0+IHtcclxuICAgICAgICAgICAgc2lkZWJhci5jbGFzc0xpc3QudG9nZ2xlKFwic2lkZWJhci0taXNIaWRkZW5cIik7XHJcbiAgICAgICAgICAgIG9wZW5CdXR0b24uY2xhc3NMaXN0LnRvZ2dsZSgnLm9wZW5idG4tLWlzSGlkZGVuJyk7XHJcblxyXG4gICAgICAgICAgICBvcGVuQnV0dG9uLmlubmVySFRNTCA9IHNpZGViYXIuY2xhc3NMaXN0LmNvbnRhaW5zKFxyXG4gICAgICAgICAgICAgICAgXCJzaWRlYmFyLS1pc0hpZGRlblwiXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgID8gXCLimLBcIlxyXG4gICAgICAgICAgICAgICAgOiBcIuKYsFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3BlbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgX3RvZ2dsZVNpZGViYXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHNob3dBbGxQcm9qZWN0cygpIHtcclxuICAgICAgICBjb25zdCBhbGxQcm9qZWN0RE9NUyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wcm9qZWN0JylcclxuICAgICAgICBhbGxQcm9qZWN0RE9NUy5mb3JFYWNoKGRvbSA9PiB7ZG9tLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUnKX0pXHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgbGlzdEl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGknKVxyXG4gICAgICAgIGxpc3RJdGVtcy5mb3JFYWNoKGxpID0+IGxpLmNsYXNzTGlzdC5yZW1vdmUoJ2NsaWNrZWQnKSlcclxuICAgIH1cclxuXHJcbiAgICBnaXZlU2hvd0FsbEZ1bmN0aW9uKCl7XHJcbiAgICAgICAgY29uc3Qgc2hvd0FsbEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzaG93LWFsbCcpXHJcbiAgICAgICAgc2hvd0FsbEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuc2hvd0FsbFByb2plY3RzKVxyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2YXRlU2lkZWJhcigpe1xyXG4gICAgICAgIHRoaXMuZ2l2ZVNpZGViYXJPcGVuQnV0dG9uRnVuY3Rpb24oKVxyXG4gICAgICAgIHRoaXMuZ2l2ZVNob3dBbGxGdW5jdGlvbigpXHJcbiAgICB9XHJcblxyXG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IFByb2plY3QgfSBmcm9tIFwiLi9wcm9qZWN0T2JqXCI7XHJcbmltcG9ydCB7IFRvZG9JdGVtIH0gZnJvbSBcIi4vdG9kb09ialwiO1xyXG5pbXBvcnQge1Byb2plY3RIYW5kbGVyfSBmcm9tICcuL3Byb2plY3RIYW5kbGVyLmpzJ1xyXG5pbXBvcnQgKiBhcyBQcm9qZWN0RGlzcGxheSBmcm9tICcuL3Byb2plY3REaXNwbGF5LmpzJ1xyXG5pbXBvcnQgeyBQYWdlSW5pdGlhbGl6ZXIgfSBmcm9tIFwiLi9wYWdlQ29udHJvbGxlci5qc1wiO1xyXG5pbXBvcnQgJy4vc3R5bGVzL21haW4uY3NzJztcclxuXHJcbmNvbnN0IHByb2plY3RIYW5kbGVyID0gbmV3IFByb2plY3RIYW5kbGVyKClcclxuXHJcbmNvbnN0IHRlc3RUYXNrMSA9IG5ldyBUb2RvSXRlbShcclxuICAgICdkbyB0aGUgdGhpbmcnLFxyXG4gICAgJ25vdC1zdGFydGVkJyxcclxuICAgICdoaWdoJyxcclxuICAgICc4LzE3LzIwMzQnLFxyXG4gICAgJ3lvdSBuZWVkIHRvIGRvIHRoZSB0aGluZycpXHJcblxyXG5jb25zdCB0ZXN0VGFzazIgPSBuZXcgVG9kb0l0ZW0oXHJcbiAgICAnZG8gdGhpcyB0aGluZyB0b28nLFxyXG4gICAgJ2NvbXBsZXRlZCcsXHJcbiAgICAnbG93JyxcclxuICAgICc5LzE3LzIwMzQnLFxyXG4gICAgJ3lvdSBuZWVkIHRvIGRvIHRoZSB0aGluZyBidXQgbm90IG1vcmUgaW1wb3J0YW50IHRoYW4gb3RoZXIgdGhpbmcnKVxyXG5cclxuY29uc3QgdGVzdFByb2plY3QgPSBuZXcgUHJvamVjdChcclxuICAgICd0ZXN0UHJvamVjdCdcclxuKVxyXG5cclxuY29uc3QgdGVzdFRhc2szID0gbmV3IFRvZG9JdGVtKFxyXG4gICAgJ3RoaXMgaXMgaW4gcHJvamVjdCAyJyxcclxuICAgICdpbi1wcm9ncmVzcycsXHJcbiAgICAnbWVkaXVtJyxcclxuICAgICc5LzE3LzIwMzQnLFxyXG4gICAgJ3lvdSBuZWVkIHRvIGRvIHRoZSB0aGluZyBidXQgbm90IG1vcmUgaW1wb3J0YW50IHRoYW4gb3RoZXIgdGhpbmcnKVxyXG5cclxudGVzdFByb2plY3QuYWRkVGFzayh0ZXN0VGFzazEpXHJcbnRlc3RQcm9qZWN0LmFkZFRhc2sodGVzdFRhc2syKVxyXG5cclxucHJvamVjdEhhbmRsZXIuYWRkUHJvamVjdCh0ZXN0UHJvamVjdClcclxuXHJcbmNvbnN0IHByb2plY3QyID0gbmV3IFByb2plY3QoJ3NlY29uZCBwcm9qZWN0JylcclxucHJvamVjdDIuYWRkVGFzayh0ZXN0VGFzazMpXHJcbnByb2plY3RIYW5kbGVyLmFkZFByb2plY3QocHJvamVjdDIpXHJcblxyXG5jb25zb2xlLmxvZyhwcm9qZWN0SGFuZGxlci5yZXR1cm5BbGxQcm9qZWN0cygpKVxyXG5sZXQgUGFnZSA9IG5ldyBQYWdlSW5pdGlhbGl6ZXIocHJvamVjdEhhbmRsZXIpXHJcblxyXG5QYWdlLmluaXRpYWxpemUocHJvamVjdEhhbmRsZXIpXHJcblxyXG5leHBvcnQge1BhZ2V9IiwiaW1wb3J0IHsgUHJvamVjdCB9IGZyb20gXCIuL3Byb2plY3RPYmpcIjtcclxuaW1wb3J0ICcuL3N0eWxlcy9wcm9qZWN0QXJlYS5jc3MnO1xyXG5pbXBvcnQgeyBTaWRlYmFyIH0gZnJvbSBcIi4vc2lkZWJhci5qc1wiO1xyXG5pbXBvcnQgeyBQcm9qZWN0UmVuZGVyZXIgfSBmcm9tIFwiLi9wcm9qZWN0RGlzcGxheS5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBhZ2VJbml0aWFsaXplciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9qZWN0SGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMucHJvamVjdEhhbmRsZXIgPSBwcm9qZWN0SGFuZGxlcjtcclxuICAgICAgICB0aGlzLnNpZGViYXIgPSBuZXcgU2lkZWJhcih0aGlzLnByb2plY3RIYW5kbGVyKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRQcm9qZWN0SGFuZGxlcihwcm9qZWN0SGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMucHJvamVjdEhhbmRsZXIgPSBwcm9qZWN0SGFuZGxlcjtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDcmVhdGVOZXdQcm9qZWN0QnV0dG9uKCkge1xyXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3RCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmV3LXByb2plY3QtYnV0dG9uJyk7XHJcbiAgICAgICAgbmV3UHJvamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY3JlYXRlU2luZ2xlUHJvamVjdC5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVTaW5nbGVQcm9qZWN0KCkge1xyXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3RUaXRsZUJhc2UgPSAnTmV3IFByb2plY3QnO1xyXG4gICAgICAgIGxldCBpID0gMTtcclxuICAgICAgICBsZXQgbmV3UHJvamVjdFRpdGxlO1xyXG5cclxuICAgICAgICBjb25zdCBwcm9qZWN0VGl0bGVzID0gdGhpcy5wcm9qZWN0SGFuZGxlci5yZXR1cm5BbGxQcm9qZWN0VGl0bGVzKCk7XHJcbiAgICAgICAgaWYgKHByb2plY3RUaXRsZXMuaW5jbHVkZXMobmV3UHJvamVjdFRpdGxlQmFzZSkpIHtcclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgbmV3UHJvamVjdFRpdGxlID0gbmV3UHJvamVjdFRpdGxlQmFzZSArIGk7XHJcbiAgICAgICAgICAgICAgICBpICs9IDE7XHJcbiAgICAgICAgICAgIH0gd2hpbGUgKHByb2plY3RUaXRsZXMuaW5jbHVkZXMobmV3UHJvamVjdFRpdGxlKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbmV3UHJvamVjdFRpdGxlID0gbmV3UHJvamVjdFRpdGxlQmFzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBuZXcgUHJvamVjdChuZXdQcm9qZWN0VGl0bGUpO1xyXG4gICAgICAgIGNvbnN0IG5ld1Byb2plY3RSZW5kZXJlciA9IG5ldyBQcm9qZWN0UmVuZGVyZXIodGhpcy5wcm9qZWN0SGFuZGxlciwgbmV3UHJvamVjdCwgdGhpcy5zaWRlYmFyKTtcclxuICAgICAgICB0aGlzLnByb2plY3RIYW5kbGVyLmFkZFByb2plY3QobmV3UHJvamVjdCk7XHJcbiAgICAgICAgbmV3UHJvamVjdFJlbmRlcmVyLmNyZWF0ZVByb2plY3RET00odHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5zaWRlYmFyLmRpc3BsYXlQcm9qZWN0cygpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRpYWxpemUoKSB7XHJcbiAgICAgICAgY29uc3QgcHJvamVjdExpc3QgPSB0aGlzLnByb2plY3RIYW5kbGVyLnJldHVybkFsbFByb2plY3RzKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBwcm9qIG9mIHByb2plY3RMaXN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3RNYW5hZ2VyID0gbmV3IFByb2plY3RSZW5kZXJlcih0aGlzLnByb2plY3RIYW5kbGVyLCBwcm9qLCB0aGlzLnNpZGViYXIpO1xyXG4gICAgICAgICAgICBwcm9qZWN0TWFuYWdlci5jcmVhdGVQcm9qZWN0RE9NKCk7XHJcbiAgICAgICAgICAgIHByb2plY3RNYW5hZ2VyLnBsYWNlVGFza0NhcmRzSW50b1Byb2plY3RET00oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zaWRlYmFyLmFjdGl2YXRlU2lkZWJhcigpO1xyXG4gICAgICAgIHRoaXMuc2lkZWJhci5kaXNwbGF5UHJvamVjdHMoKTtcclxuICAgICAgICB0aGlzLnNldENyZWF0ZU5ld1Byb2plY3RCdXR0b24oKTtcclxuICAgIH1cclxufSJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJQcm9qZWN0IiwiY29uc3RydWN0b3IiLCJuYW1lIiwidGFza3MiLCJhZGRUYXNrIiwibmV3VGFza0pTT04iLCJmaWx0ZXIiLCJ0YXNrIiwidGl0bGUiLCJyZW1vdmVUYXNrIiwiVGFza1RpdGxlIiwiZmlsdGVyVGFza3MiLCJzZWFyY2giLCJpbmRleGVzIiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsInJldHVybkFsbFRhc2tzIiwicmV0dXJuQWxsVGFza1RpdGxlcyIsIm91dCIsInJldHVyblRpdGxlIiwiY29uc29sZSIsImxvZyIsInJldHVyblByb2plY3ROYW1lIiwicmV0dXJuUHJvamVjdE5hbWVXaXRoTm9XaGl0ZXNwYWNlIiwicmVwbGFjZSIsInJldHVyblByb2plY3RKU09OIiwidGFza3NKU09OIiwicmV0dXJuSXRlbUpTT04iLCJ1cGRhdGVQcm9qZWN0TmFtZSIsIm5ld05hbWUiLCJjcmVhdGVEb21FbGVtZW50IiwidHlwZSIsImNoaWxkcmVuIiwiZWwiLCJmb3JFYWNoIiwiY2hpbGQiLCJFbGVtZW50Iiwib25EcmFnT3ZlciIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJkcm9wem9uZSIsImN1cnJlbnRUYXJnZXQiLCJkcm9wem9uZUlEIiwiYm90dG9tVGFzayIsImluc2VydEFib3ZlVGFzayIsImNsaWVudFkiLCJjdXJUYXNrIiwicHJvamVjdE5hbWUiLCJkYXRhc2V0IiwicHJvamVjdCIsImFibGVUb0Ryb3AiLCJpbnNlcnRCZWZvcmUiLCJvbkRyYWdMZWF2ZSIsIm9uRHJvcCIsImRhdGFUcmFuc2ZlciIsImdldERhdGEiLCJuZXdTdGF0dXMiLCJzdGF0dXMiLCJzdGF0dXNDaGFuZ2VFdmVudCIsIkN1c3RvbUV2ZW50IiwiZGV0YWlsIiwiZGlzcGF0Y2hFdmVudCIsImNsZWFyRGF0YSIsInpvbmUiLCJtb3VzZVkiLCJlbHMiLCJxdWVyeVNlbGVjdG9yQWxsIiwiY2xvc2VzdFRhc2siLCJjbG9zZXN0T2Zmc2V0IiwiTnVtYmVyIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJ0b3AiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvZmZzZXQiLCJsb2NhbHMiLCJDYXJkUmVuZGVyZXIiLCJwcm9qZWN0UmVuZGVyZXIiLCJzZXRQcm9qZWN0UmVuZGVyZXIiLCJjcmVhdGVGdWxsQ2FyZCIsImNhcmRSZW1vdmVCdXR0b24iLCJjbGFzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjYXJkQXJlYSIsImRlbGV0ZVRhcmdldCIsInJlbmRlckFuZFVwZGF0ZVByb2plY3QiLCJjYXJkVGl0bGUiLCJjb250ZW50ZWRpdGFibGUiLCJjYXJkU3RhdHVzIiwiam9iU3RhdHVzIiwiY2FyZER1ZURhdGUiLCJkdWVEYXRlIiwiY2FyZFByaW9yaXR5IiwicHJpb3JpdHkiLCJjYXJkRGV0YWlsIiwiY2FyZCIsInJlbW92ZUJHIiwidXBkYXRlVGl0bGUiLCJpbm5lckhUTUwiLCJ1cGRhdGVTdGF0dXMiLCJ1cGRhdGVEdWVEYXRlIiwidXBkYXRlRGV0YWlsIiwidXBkYXRlUHJpb3JpdHkiLCJkZWxldGVQYXJlbnQiLCJjcmVhdGVNaW5pbWl6ZWRDYXJkIiwiZHJhZ2dhYmxlIiwicmV0dXJuU3RhdHVzQXNIdG1sRGF0YSIsImJvZHkiLCJhcHBlbmQiLCJ0YXJnZXRJRCIsInNldERhdGEiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZXR1cm5TdGF0dXMiLCJUb2RvSXRlbSIsIm5ld0RldGFpbCIsIm5ld1RpdGxlIiwibmV3UHJpb3JpdHkiLCJuZXdEYXRlIiwicmV0dXJuUHJpb3JpdHkiLCJyZXR1cm5EdWVEYXRlIiwicmV0dXJuRGV0YWlsIiwiRXJyb3JMb2dnZXIiLCJ0aHJvd0Vycm9yIiwibWVzc2FnZSIsIlByb2plY3RSZW5kZXJlciIsInByb2plY3RIYW5kbGVyIiwic2lkZWJhciIsImhhbmRsZXIiLCJyZXBsYWNlQWxsIiwidGFza1RpdGxlcyIsImNsZWFyQWxsQ2hpbGRyZW4iLCJwcm9qZWN0SWQiLCJjb2wiLCJoYXNDaGlsZE5vZGVzIiwiY3JlYXRlUHJvamVjdERPTSIsInBsYWNlVGFza0NhcmRzSW50b1Byb2plY3RET00iLCJzdWJtaXROZXdUYXNrIiwidmFsdWUiLCJkdWVkYXRlIiwibmV3VGFzayIsInJlbmRlclRhc2tDYXJkcyIsImxpc3RPZlRhc2tzSW5Qcm9qZWN0IiwiY2FyZEFycmF5IiwiQ2FyZENyZWF0ZXJPYmoiLCJnZXRQcm9qZWN0IiwidXBkYXRlSURzVG9OZXdQcm9qZWN0TmFtZSIsIm9sZE5hbWUiLCJwcm9qZWN0RE9NVGl0bGUiLCJlZGl0QnV0dG9uIiwicHJvamVjdE5vdFN0YXJ0ZWRDb2x1bW4iLCJwcm9qZWN0SW5Qcm9ncmVzc0NvbHVtbiIsInByb2plY3RDb21wbGV0ZWRDb2x1bW4iLCJjaGlsZE5vZGVzIiwiZGlzcGxheVByb2plY3RzIiwiY3JlYXRlTmV3VGFza0Zvcm0iLCJwcmlvcml0aWVzIiwiY2FyZFN1Ym1pdEJ1dHRvbiIsIm5ld0RPTSIsInByb2oiLCJuZXdUYXNrQnV0dG9uIiwicHJvamVjdERPTUVkaXRUaXRsZUJ1dHRvbiIsImNvbnRhaW5zIiwib2xkSUQiLCJwcm9qZWN0RE9NIiwibmV3SUQiLCJzYXZlVGl0bGUiLCJmb2N1cyIsImVkaXRUaXRsZSIsInByb2plY3RET01EZWxldGVCdXR0b24iLCJyZW1vdmVQcm9qZWN0IiwicHJvamVjdERPTUNvbGxhcHNlQnV0dG9uIiwicHJvamVjdENvbHVtbnNXcmFwcGVyIiwicHJvamVjdERPTU9wdGlvbnMiLCJwcm9qZWN0SGVhZGVyIiwicHJvamVjdEFyZWEiLCJwcm9qZWN0U2VjdGlvbkhlYWRlciIsIm5leHRTaWJsaW5nIiwiU2lkZWJhciIsInByb2plY3RMaXN0IiwicmV0dXJuQWxsUHJvamVjdHMiLCJET00iLCJnZXRQcm9qZWN0TGlzdCIsImdldFByb2plY3RUaXRsZXMiLCJyZXR1cm5BbGxQcm9qZWN0VGl0bGVzIiwidGl0bGVzIiwicHJvamVjdFRpdGxlIiwic2hvd1NpbmdsZVByb2plY3QiLCJkb20iLCJsaSIsImdpdmVTaWRlYmFyT3BlbkJ1dHRvbkZ1bmN0aW9uIiwib3BlbkJ1dHRvbiIsInRvZ2dsZSIsInNob3dBbGxQcm9qZWN0cyIsImdpdmVTaG93QWxsRnVuY3Rpb24iLCJhY3RpdmF0ZVNpZGViYXIiLCJhZGRQcm9qZWN0IiwicHJvamVjdE9iaiIsInNvbWUiLCJwcm8iLCJyZXR1cm5TaW5nbGVQcm9qZWN0IiwidGVzdFRhc2sxIiwidGVzdFRhc2syIiwidGVzdFByb2plY3QiLCJ0ZXN0VGFzazMiLCJwcm9qZWN0MiIsIlBhZ2UiLCJzZXRQcm9qZWN0SGFuZGxlciIsInNldENyZWF0ZU5ld1Byb2plY3RCdXR0b24iLCJjcmVhdGVTaW5nbGVQcm9qZWN0IiwiYmluZCIsIm5ld1Byb2plY3RUaXRsZUJhc2UiLCJuZXdQcm9qZWN0VGl0bGUiLCJwcm9qZWN0VGl0bGVzIiwibmV3UHJvamVjdCIsIm5ld1Byb2plY3RSZW5kZXJlciIsImluaXRpYWxpemUiLCJwcm9qZWN0TWFuYWdlciJdLCJzb3VyY2VSb290IjoiIn0=