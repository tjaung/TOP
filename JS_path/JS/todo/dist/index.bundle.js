(()=>{"use strict";var n={97:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([n.id,"h1, h2 {\n    text-overflow: clip;\n    white-space: nowrap;\n    overflow: hidden;\n    /* font-size: 12px; */\n}\n\ntextarea {\n    resize: none;\n}\n\nlabel, select, textarea, p {\n    display:block;\n    resize:none;\n}\nselect, textarea, p {\n    padding: 12px;\n}\n\n.mini-card {\n    min-height: 200px;\n    max-height: 800px;\n    max-width: 400px;\n    border-radius: 20px solid black;\n    background: white;\n    color: black;\n    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.15);\n    width: 80%;\n    align-self: center;\n    padding: 12px;\n    border-radius: 4px;\n    cursor: move;\n}\n.remove-bg {\n    position:absolute;\n    width:100%;\n    height:100%;\n    z-index:9;\n    background-color: rgba(0,0,0,0.5);\n}\n\n.full-card {\n    z-index: 99;\n    position: absolute;\n    background: white;\n    display: grid;\n    grid-template:\n        'title title title' auto\n        ' desc desc priority' auto\n        'desc desc date' auto\n        'desc desc status' auto\n        ' button foot foot ' auto;\n    width: 40%;\n    height: 80%;\n    font-size: 18px;\n    border-radius: 5px;\n    justify-self: center;\n    align-self: center;\n    padding:24px;\n    grid-gap: 24px;\n}\n\n#new-card-title, #full-card-title {\n    grid-area: title;\n}\n\n#detail, #full-card-detail {\n    grid-area: desc;\n    height: 100%;\n    width: 100%;\n}\n\n#detail-label, #new-card-detail {\n    display:block;\n}\n\n#mini-card-status {\n    border-radius: 25%;\n    display:none;\n}\n\n\n\n#new-card-detail {\n    height: 100%;\n    width: 100%;\n}\n\n#priorities, #full-card-priority{\n    grid-area: priority;\n}\n\n#due-date, #full-card-dueDate{\n    grid-area: date;\n}\n\n#card-remove-button, #new-card-create-button{\n    grid-area: button;\n    border-radius: 5px;\n    width: 6rem;\n    height: 3rem;\n    font-size: 18px;\n    align-self: center;\n    justify-self: center;\n}\n\n#full-card-status {\n    grid-area: status;\n}\n\n#card-area {\n    position:fixed;\n    padding:0;\n    margin:0;\n\n    top:0;\n    left:0;\n\n    width: 100%;\n    height: 100%;\n    background:rgba(255,255,255,0.5);\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.hide {\n    display:none;\n}\n\n.is-dragging {\n    scale: 1.05;\n    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.25);\n    background: rgb(50, 50, 50);\n    color: white;\n  }\n\n  .haveTime {\n    text-decoration: underline;\n    text-decoration-color: rgb(28, 181, 28);\n  }\n\n  .shouldDo {\n    text-decoration: underline;\n    text-decoration-color: rgb(205, 205, 26);\n  }\n\n  .urgent {\n    text-decoration: underline;\n    text-decoration-color: rgb(205, 15, 15);\n  }\n\n  \n/* Mobile */\n@media only screen and (max-width: 768px) {\n\n    .mini-card {\n        min-height: 0px;\n        max-height: 200px;\n        max-width: 100%;\n        width: 99%;\n        background: white;\n        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.15);\n        align-self: center;\n        padding: 12px;\n        border-radius: 4px;\n        border: 2px solid black;\n        text-overflow: ellipsis;\n        font-size: 8px;\n        cursor: move;\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .full-card {   \n        display: flex;\n        flex-direction: column;\n        width: 80%;\n        height: 80%;\n    }\n\n    .haveTime {\n        text-decoration: underline;\n        text-decoration-color: rgb(28, 181, 28);\n      }\n    \n      .shouldDo {\n        text-decoration: underline;\n        text-decoration-color: rgb(205, 205, 26);\n      }\n    \n      .urgent {\n        text-decoration: underline;\n        text-decoration-color: rgb(205, 15, 15);\n      }\n      \n    #mini-card-status {\n        display:block;\n    }\n\n    #mini-card-status.not-started{\n        border: 4px solid rgb(205, 15, 15);\n        fill: rgb(205, 15, 15);\n    }\n    #mini-card-status.in-progress{\n        border: 4px solid rgb(205, 205, 26);\n        fill: rgb(205, 205, 26);\n    }\n    #mini-card-status.completed {\n        border: 4px solid rgb(28, 181, 28);\n        fill: rgb(28, 181, 28);\n    }\n\n    .mini-card-info {\n        max-width: 30%;\n    }\n    #full-card-title{\n        font-size: 30px;\n        width: 100%;\n        height: 72px;\n    \n    }\n}","",{version:3,sources:["webpack://./src/styles/cards.css"],names:[],mappings:"AAAA;IACI,mBAAmB;IACnB,mBAAmB;IACnB,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,WAAW;AACf;AACA;IACI,aAAa;AACjB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;IACjB,gBAAgB;IAChB,+BAA+B;IAC/B,iBAAiB;IACjB,YAAY;IACZ,4CAA4C;IAC5C,UAAU;IACV,kBAAkB;IAClB,aAAa;IACb,kBAAkB;IAClB,YAAY;AAChB;AACA;IACI,iBAAiB;IACjB,UAAU;IACV,WAAW;IACX,SAAS;IACT,iCAAiC;AACrC;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,iBAAiB;IACjB,aAAa;IACb;;;;;iCAK6B;IAC7B,UAAU;IACV,WAAW;IACX,eAAe;IACf,kBAAkB;IAClB,oBAAoB;IACpB,kBAAkB;IAClB,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,YAAY;AAChB;;;;AAIA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,oBAAoB;AACxB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,cAAc;IACd,SAAS;IACT,QAAQ;;IAER,KAAK;IACL,MAAM;;IAEN,WAAW;IACX,YAAY;IACZ,gCAAgC;;IAEhC,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,WAAW;IACX,4CAA4C;IAC5C,2BAA2B;IAC3B,YAAY;EACd;;EAEA;IACE,0BAA0B;IAC1B,uCAAuC;EACzC;;EAEA;IACE,0BAA0B;IAC1B,wCAAwC;EAC1C;;EAEA;IACE,0BAA0B;IAC1B,uCAAuC;EACzC;;;AAGF,WAAW;AACX;;IAEI;QACI,eAAe;QACf,iBAAiB;QACjB,eAAe;QACf,UAAU;QACV,iBAAiB;QACjB,4CAA4C;QAC5C,kBAAkB;QAClB,aAAa;QACb,kBAAkB;QAClB,uBAAuB;QACvB,uBAAuB;QACvB,cAAc;QACd,YAAY;QACZ,aAAa;QACb,8BAA8B;IAClC;;IAEA;QACI,aAAa;QACb,sBAAsB;QACtB,UAAU;QACV,WAAW;IACf;;IAEA;QACI,0BAA0B;QAC1B,uCAAuC;MACzC;;MAEA;QACE,0BAA0B;QAC1B,wCAAwC;MAC1C;;MAEA;QACE,0BAA0B;QAC1B,uCAAuC;MACzC;;IAEF;QACI,aAAa;IACjB;;IAEA;QACI,kCAAkC;QAClC,sBAAsB;IAC1B;IACA;QACI,mCAAmC;QACnC,uBAAuB;IAC3B;IACA;QACI,kCAAkC;QAClC,sBAAsB;IAC1B;;IAEA;QACI,cAAc;IAClB;IACA;QACI,eAAe;QACf,WAAW;QACX,YAAY;;IAEhB;AACJ",sourcesContent:["h1, h2 {\n    text-overflow: clip;\n    white-space: nowrap;\n    overflow: hidden;\n    /* font-size: 12px; */\n}\n\ntextarea {\n    resize: none;\n}\n\nlabel, select, textarea, p {\n    display:block;\n    resize:none;\n}\nselect, textarea, p {\n    padding: 12px;\n}\n\n.mini-card {\n    min-height: 200px;\n    max-height: 800px;\n    max-width: 400px;\n    border-radius: 20px solid black;\n    background: white;\n    color: black;\n    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.15);\n    width: 80%;\n    align-self: center;\n    padding: 12px;\n    border-radius: 4px;\n    cursor: move;\n}\n.remove-bg {\n    position:absolute;\n    width:100%;\n    height:100%;\n    z-index:9;\n    background-color: rgba(0,0,0,0.5);\n}\n\n.full-card {\n    z-index: 99;\n    position: absolute;\n    background: white;\n    display: grid;\n    grid-template:\n        'title title title' auto\n        ' desc desc priority' auto\n        'desc desc date' auto\n        'desc desc status' auto\n        ' button foot foot ' auto;\n    width: 40%;\n    height: 80%;\n    font-size: 18px;\n    border-radius: 5px;\n    justify-self: center;\n    align-self: center;\n    padding:24px;\n    grid-gap: 24px;\n}\n\n#new-card-title, #full-card-title {\n    grid-area: title;\n}\n\n#detail, #full-card-detail {\n    grid-area: desc;\n    height: 100%;\n    width: 100%;\n}\n\n#detail-label, #new-card-detail {\n    display:block;\n}\n\n#mini-card-status {\n    border-radius: 25%;\n    display:none;\n}\n\n\n\n#new-card-detail {\n    height: 100%;\n    width: 100%;\n}\n\n#priorities, #full-card-priority{\n    grid-area: priority;\n}\n\n#due-date, #full-card-dueDate{\n    grid-area: date;\n}\n\n#card-remove-button, #new-card-create-button{\n    grid-area: button;\n    border-radius: 5px;\n    width: 6rem;\n    height: 3rem;\n    font-size: 18px;\n    align-self: center;\n    justify-self: center;\n}\n\n#full-card-status {\n    grid-area: status;\n}\n\n#card-area {\n    position:fixed;\n    padding:0;\n    margin:0;\n\n    top:0;\n    left:0;\n\n    width: 100%;\n    height: 100%;\n    background:rgba(255,255,255,0.5);\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n}\n\n.hide {\n    display:none;\n}\n\n.is-dragging {\n    scale: 1.05;\n    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.25);\n    background: rgb(50, 50, 50);\n    color: white;\n  }\n\n  .haveTime {\n    text-decoration: underline;\n    text-decoration-color: rgb(28, 181, 28);\n  }\n\n  .shouldDo {\n    text-decoration: underline;\n    text-decoration-color: rgb(205, 205, 26);\n  }\n\n  .urgent {\n    text-decoration: underline;\n    text-decoration-color: rgb(205, 15, 15);\n  }\n\n  \n/* Mobile */\n@media only screen and (max-width: 768px) {\n\n    .mini-card {\n        min-height: 0px;\n        max-height: 200px;\n        max-width: 100%;\n        width: 99%;\n        background: white;\n        box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.15);\n        align-self: center;\n        padding: 12px;\n        border-radius: 4px;\n        border: 2px solid black;\n        text-overflow: ellipsis;\n        font-size: 8px;\n        cursor: move;\n        display: flex;\n        justify-content: space-between;\n    }\n\n    .full-card {   \n        display: flex;\n        flex-direction: column;\n        width: 80%;\n        height: 80%;\n    }\n\n    .haveTime {\n        text-decoration: underline;\n        text-decoration-color: rgb(28, 181, 28);\n      }\n    \n      .shouldDo {\n        text-decoration: underline;\n        text-decoration-color: rgb(205, 205, 26);\n      }\n    \n      .urgent {\n        text-decoration: underline;\n        text-decoration-color: rgb(205, 15, 15);\n      }\n      \n    #mini-card-status {\n        display:block;\n    }\n\n    #mini-card-status.not-started{\n        border: 4px solid rgb(205, 15, 15);\n        fill: rgb(205, 15, 15);\n    }\n    #mini-card-status.in-progress{\n        border: 4px solid rgb(205, 205, 26);\n        fill: rgb(205, 205, 26);\n    }\n    #mini-card-status.completed {\n        border: 4px solid rgb(28, 181, 28);\n        fill: rgb(28, 181, 28);\n    }\n\n    .mini-card-info {\n        max-width: 30%;\n    }\n    #full-card-title{\n        font-size: 30px;\n        width: 100%;\n        height: 72px;\n    \n    }\n}"],sourceRoot:""}]);const s=a},249:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([n.id,"* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-family: sans-serif;\n  \n    -ms-overflow-style: none; \n    scrollbar-width: none;\n}\n\n/* ---- RESET/BASIC STYLING ---- */\n  \n  *::-webkit-scrollbar {\n    display: none;\n  }\n\n\n.container {\n    display: flex;\n    flex-direction:column;\n}\n\n.top {\n    min-height: 20vh;\n    display: flex;  \n    justify-content: space-around;\n    align-items: start;\n    padding-left: 5%;\n    padding-top: 5%;\n    /* background:#faf2ff; */\n    transition: 300ms;\n    overflow: auto;\n    flex-direction: column;\n    flex:1;\n}\n\n\n\n.page {\n    margin-left: 10%;\n    font-size: 2rem;\n}\n\n.logo {\n    grid-area: logo;\n    display: grid;\n    justify-content: center;\n    margin-left: 45%;\n}\n\n/*\nThe sidebar element has a gap of 50px\nThe text elements in the sidebar are centered with grid\n*/\n.sidebar {\n    background-color: #e3e3e3;\n    width: 12rem;\n    height: 100vh;\n    padding: 0;\n    position: fixed;\n    transition: 300ms;\n    z-index: 999;\n    opacity:90%;\n}\n.sidebar--isHidden {\n    transform: translateX(-12rem);\n    transition: 300ms;\n}\n\nsection .container {\n    margin-left: 250px;\n}\n\n.sidebar-menu {\n    list-style: none;\n    padding: 1.5rem;\n    margin-top: 12px;\n    display: flex;\n    flex-direction: column;\n    gap: 3rem;\n}\n\n.sidebar li {\n    color: #131200;\n    text-decoration: none;\n    display: block;\n    cursor:pointer;\n}\n.sidebar li:hover {\n    color: #0197F6;\n    transition: color 150ms linear;\n}\n\n\n.openbtn {\n    border: none;\n    text-align: center;\n    border-radius: 15%;\n    border:none;\n    outline:none;\n    cursor:pointer;\n    position: fixed;\n    transition: transform 300ms ease-in;\n    left: 12rem;\n    color: #131200;\n    background-color:#0197F6;\n    font-weight: bold;\n  }\n\n#show-all{\n    border-radius: 15%;\n    border:none;\n    outline:none;\n    cursor:pointer;\n    transition: transform 300ms ease-in;\n    color: #131200;\n    display: block;\n    font-weight: bold;\n}\n.sidebar li {\n    color: #131200;\n    text-decoration: none;\n    display: block;\n}\n#show-all:hover {\n    color: #0197F6;\n    transition: color 150ms linear;\n}\n\n.openbtn--isHidden {\n    transform: translateX(-12rem);\n    transition: transform 300ms ease-out;\n  }\n\n.openbtn:hover {\n    background-color: #f4a261;\n    transition: all 150ms ease-in;\n}\n\n#logo {\n    width: 4.5rem;\n    height: 4.5rem;\n}\n\n#foot{\n    align-self: flex-end;\n    background: #131200;\n    height: 5vh;\n}\n\n/* Mobile */\n@media only screen and (max-width: 768px) {\n\n    \n    .top {\n        max-height: 15vh;\n        min-height: 10vh;\n    }\n\n    .sidebar {\n        background-color: #e3e3e3;\n        padding: 0;\n        position: fixed;\n        transition: 300ms;\n        z-index: 999;\n    }\n    .sidebar--isHidden {\n        transform: translateX(-12rem);\n        transition: 300ms;\n    }\n    \n    section .container {\n        margin-left: 0px;\n    }\n    \n    .sidebar-menu {\n        list-style: none;\n        padding: 1.5rem;\n        margin-top: 12px;\n        display: flex;\n        flex-direction: column;\n        gap: 3rem;\n    }\n    \n    .sidebar li {\n        color: #131200;\n        text-decoration: none;\n        display: block;\n        cursor:pointer;\n    }\n    .sidebar li:hover {\n        color: #0197F6;\n        transition: color 150ms linear;\n    }\n    \n    \n    .openbtn {\n        border: none;\n        text-align: center;\n        border-radius: 15%;\n        border:none;\n        outline:none;\n        cursor:pointer;\n        position: fixed;\n        transition: transform 300ms ease-in;\n        top: 0;\n        color: #131200;\n        background-color:#0197F6;\n        font-weight: bold;\n      }\n}","",{version:3,sources:["webpack://./src/styles/main.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;IACtB,uBAAuB;;IAEvB,wBAAwB;IACxB,qBAAqB;AACzB;;AAEA,kCAAkC;;EAEhC;IACE,aAAa;EACf;;;AAGF;IACI,aAAa;IACb,qBAAqB;AACzB;;AAEA;IACI,gBAAgB;IAChB,aAAa;IACb,6BAA6B;IAC7B,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,wBAAwB;IACxB,iBAAiB;IACjB,cAAc;IACd,sBAAsB;IACtB,MAAM;AACV;;;;AAIA;IACI,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,aAAa;IACb,uBAAuB;IACvB,gBAAgB;AACpB;;AAEA;;;CAGC;AACD;IACI,yBAAyB;IACzB,YAAY;IACZ,aAAa;IACb,UAAU;IACV,eAAe;IACf,iBAAiB;IACjB,YAAY;IACZ,WAAW;AACf;AACA;IACI,6BAA6B;IAC7B,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,eAAe;IACf,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,cAAc;IACd,cAAc;AAClB;AACA;IACI,cAAc;IACd,8BAA8B;AAClC;;;AAGA;IACI,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,cAAc;IACd,eAAe;IACf,mCAAmC;IACnC,WAAW;IACX,cAAc;IACd,wBAAwB;IACxB,iBAAiB;EACnB;;AAEF;IACI,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,cAAc;IACd,mCAAmC;IACnC,cAAc;IACd,cAAc;IACd,iBAAiB;AACrB;AACA;IACI,cAAc;IACd,qBAAqB;IACrB,cAAc;AAClB;AACA;IACI,cAAc;IACd,8BAA8B;AAClC;;AAEA;IACI,6BAA6B;IAC7B,oCAAoC;EACtC;;AAEF;IACI,yBAAyB;IACzB,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,cAAc;AAClB;;AAEA;IACI,oBAAoB;IACpB,mBAAmB;IACnB,WAAW;AACf;;AAEA,WAAW;AACX;;;IAGI;QACI,gBAAgB;QAChB,gBAAgB;IACpB;;IAEA;QACI,yBAAyB;QACzB,UAAU;QACV,eAAe;QACf,iBAAiB;QACjB,YAAY;IAChB;IACA;QACI,6BAA6B;QAC7B,iBAAiB;IACrB;;IAEA;QACI,gBAAgB;IACpB;;IAEA;QACI,gBAAgB;QAChB,eAAe;QACf,gBAAgB;QAChB,aAAa;QACb,sBAAsB;QACtB,SAAS;IACb;;IAEA;QACI,cAAc;QACd,qBAAqB;QACrB,cAAc;QACd,cAAc;IAClB;IACA;QACI,cAAc;QACd,8BAA8B;IAClC;;;IAGA;QACI,YAAY;QACZ,kBAAkB;QAClB,kBAAkB;QAClB,WAAW;QACX,YAAY;QACZ,cAAc;QACd,eAAe;QACf,mCAAmC;QACnC,MAAM;QACN,cAAc;QACd,wBAAwB;QACxB,iBAAiB;MACnB;AACN",sourcesContent:["* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n    font-family: sans-serif;\n  \n    -ms-overflow-style: none; \n    scrollbar-width: none;\n}\n\n/* ---- RESET/BASIC STYLING ---- */\n  \n  *::-webkit-scrollbar {\n    display: none;\n  }\n\n\n.container {\n    display: flex;\n    flex-direction:column;\n}\n\n.top {\n    min-height: 20vh;\n    display: flex;  \n    justify-content: space-around;\n    align-items: start;\n    padding-left: 5%;\n    padding-top: 5%;\n    /* background:#faf2ff; */\n    transition: 300ms;\n    overflow: auto;\n    flex-direction: column;\n    flex:1;\n}\n\n\n\n.page {\n    margin-left: 10%;\n    font-size: 2rem;\n}\n\n.logo {\n    grid-area: logo;\n    display: grid;\n    justify-content: center;\n    margin-left: 45%;\n}\n\n/*\nThe sidebar element has a gap of 50px\nThe text elements in the sidebar are centered with grid\n*/\n.sidebar {\n    background-color: #e3e3e3;\n    width: 12rem;\n    height: 100vh;\n    padding: 0;\n    position: fixed;\n    transition: 300ms;\n    z-index: 999;\n    opacity:90%;\n}\n.sidebar--isHidden {\n    transform: translateX(-12rem);\n    transition: 300ms;\n}\n\nsection .container {\n    margin-left: 250px;\n}\n\n.sidebar-menu {\n    list-style: none;\n    padding: 1.5rem;\n    margin-top: 12px;\n    display: flex;\n    flex-direction: column;\n    gap: 3rem;\n}\n\n.sidebar li {\n    color: #131200;\n    text-decoration: none;\n    display: block;\n    cursor:pointer;\n}\n.sidebar li:hover {\n    color: #0197F6;\n    transition: color 150ms linear;\n}\n\n\n.openbtn {\n    border: none;\n    text-align: center;\n    border-radius: 15%;\n    border:none;\n    outline:none;\n    cursor:pointer;\n    position: fixed;\n    transition: transform 300ms ease-in;\n    left: 12rem;\n    color: #131200;\n    background-color:#0197F6;\n    font-weight: bold;\n  }\n\n#show-all{\n    border-radius: 15%;\n    border:none;\n    outline:none;\n    cursor:pointer;\n    transition: transform 300ms ease-in;\n    color: #131200;\n    display: block;\n    font-weight: bold;\n}\n.sidebar li {\n    color: #131200;\n    text-decoration: none;\n    display: block;\n}\n#show-all:hover {\n    color: #0197F6;\n    transition: color 150ms linear;\n}\n\n.openbtn--isHidden {\n    transform: translateX(-12rem);\n    transition: transform 300ms ease-out;\n  }\n\n.openbtn:hover {\n    background-color: #f4a261;\n    transition: all 150ms ease-in;\n}\n\n#logo {\n    width: 4.5rem;\n    height: 4.5rem;\n}\n\n#foot{\n    align-self: flex-end;\n    background: #131200;\n    height: 5vh;\n}\n\n/* Mobile */\n@media only screen and (max-width: 768px) {\n\n    \n    .top {\n        max-height: 15vh;\n        min-height: 10vh;\n    }\n\n    .sidebar {\n        background-color: #e3e3e3;\n        padding: 0;\n        position: fixed;\n        transition: 300ms;\n        z-index: 999;\n    }\n    .sidebar--isHidden {\n        transform: translateX(-12rem);\n        transition: 300ms;\n    }\n    \n    section .container {\n        margin-left: 0px;\n    }\n    \n    .sidebar-menu {\n        list-style: none;\n        padding: 1.5rem;\n        margin-top: 12px;\n        display: flex;\n        flex-direction: column;\n        gap: 3rem;\n    }\n    \n    .sidebar li {\n        color: #131200;\n        text-decoration: none;\n        display: block;\n        cursor:pointer;\n    }\n    .sidebar li:hover {\n        color: #0197F6;\n        transition: color 150ms linear;\n    }\n    \n    \n    .openbtn {\n        border: none;\n        text-align: center;\n        border-radius: 15%;\n        border:none;\n        outline:none;\n        cursor:pointer;\n        position: fixed;\n        transition: transform 300ms ease-in;\n        top: 0;\n        color: #131200;\n        background-color:#0197F6;\n        font-weight: bold;\n      }\n}"],sourceRoot:""}]);const s=a},416:(n,e,t)=>{t.d(e,{A:()=>s});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([n.id,"button {\n    background: none;\n    font-size: 30px;\n    border: solid #131200;\n    color: #131200;\n    border-radius: 50%;\n    width: 45px;\n    height: 45px;\n    cursor: pointer;\n    \n}\n\nbutton:hover {\n    color: #e3e3e3;\n    border: solid #e3e3e3;\n    transition: color 150ms linear;\n}\n\n#projects {\n    display:flex;\n    flex-direction: column;\n    /* position: fixed; */\n    /* width: 100%; */\n    top: 20vh;\n    padding: 1rem 1rem 1rem 1rem;\n    transition: 300ms;\n    overflow: auto;\n    flex:1;\n}\n\n#project-section-header {\n    display: grid;\n    grid-template-rows: repeat(2, 1fr);\n    padding-bottom: 12px;\n    margin-top: 12px;\n}\n\n#status-labels {\n    align-content: center;\n    justify-items: center;\n    border-radius: 5px;\n}\n\n#new-project-button {\n    align-self: start;\n    height: 3rem;\n    width: 6rem;\n    margin-left: 2rem;\n    border-radius: 0%;\n    font-size: 18px;\n}\n\n.project-header {\n    display: grid;\n    grid-template-columns: 60% 40%;\n    border-radius: 8px;\n    padding: 1rem;\n    background: #0197F6;\n    align-items: center;\n    margin-bottom: 12px;\n}\n\n.head-lbl {\n    background: #e3e3e3;\n    height:100%;\n    width:100%;\n    text-align:center;\n}\n\n.project-options {\n    display:flex;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.project-name {\n    font-size: 18px;\n    font-weight: bold;\n    color:#131200;\n    padding-left: 24px;\n}\n.project-name-change-button{\n    \n}\n\n.project-delete-button{\n}\n\n.project-collapse-button{\n}\n\n.new-task-button{\n    grid-row: 1;\n    grid-column-start: 1;\n}\n\n.project-status-wrapper {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 12px;\n    padding: 0rem 2rem;\n    margin-top: -24px;\n}\n\n.project-status-col {\n    background: #e3e3e3;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: start;\n    gap: 16px;\n    overflow: scroll;\n    height: 100%;\n    transition: all 1s;\n    grid-row: 2;\n}\n\n.hover {\n    background: #0197F6;\n    z-index:99;\n}\n\n.save{\n    /* background: ; */\n}\n\n.project-collapse-button::before {\n    content: ' ';\n    display: inline-block;\n\n    border-top: 5px solid transparent;\n    border-bottom: 5px solid transparent;\n    border-left: 5px solid currentColor;\n\n    vertical-align: middle;\n    /* margin-right: .7rem; */\n    transform: translateY(-2px);\n\n    transition: transform .2s ease-out;\n}\n\n.toggle-button-transition {\n    transform: rotate(90deg) translateX(-3px);\n  }\n\n.collapsed {\n    background-color: red;\n    transform: translateY(-100%);\n    max-height:0px;\n }\n\n\n.project {\n    overflow: hidden;\n  }\n  \n/* #expand-contract {\nborder-bottom: 1px solid red;\nmargin-top: -100%;\ntransition: all 1s;\n} */\n\n.project-status-col.expanded {\n    background-color: green;\n    margin-top: 0;\n}\n\n.hide{\n    display:none;\n}\n\n.clicked{\n    color: yellow;\n}\n\n#new-project {\n    display: flex;\n    align-items: start;\n    transition: 300ms;\n    overflow: auto;\n    flex-direction: column;\n    flex: 1;\n}\n\n/* Mobile */\n@media only screen and (max-width: 768px) {\n\n    button {\n        height: 35px;\n        width: 35px;\n        font-size: 20px;\n    }\n    #projects{\n        padding: 0px;\n    }\n    #project-section-header{\n        display: none;\n    }\n\n    .project-status-wrapper {\n        display: flex;\n        flex-direction: column;\n        grid-gap: 0px;\n        padding: 0px;\n        margin-top: -24px;\n    }\n\n    .project-header {\n        margin-bottom: 24px;\n        grid-template-columns: 50% 50%;\n    }\n    .project-status-col {\n        gap: 0px;\n    }\n\n}","",{version:3,sources:["webpack://./src/styles/projectArea.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,eAAe;IACf,qBAAqB;IACrB,cAAc;IACd,kBAAkB;IAClB,WAAW;IACX,YAAY;IACZ,eAAe;;AAEnB;;AAEA;IACI,cAAc;IACd,qBAAqB;IACrB,8BAA8B;AAClC;;AAEA;IACI,YAAY;IACZ,sBAAsB;IACtB,qBAAqB;IACrB,iBAAiB;IACjB,SAAS;IACT,4BAA4B;IAC5B,iBAAiB;IACjB,cAAc;IACd,MAAM;AACV;;AAEA;IACI,aAAa;IACb,kCAAkC;IAClC,oBAAoB;IACpB,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;IACrB,qBAAqB;IACrB,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;IACjB,YAAY;IACZ,WAAW;IACX,iBAAiB;IACjB,iBAAiB;IACjB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,kBAAkB;IAClB,aAAa;IACb,mBAAmB;IACnB,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,mBAAmB;IACnB,WAAW;IACX,UAAU;IACV,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,6BAA6B;IAC7B,mBAAmB;AACvB;;AAEA;IACI,eAAe;IACf,iBAAiB;IACjB,aAAa;IACb,kBAAkB;AACtB;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;IACI,WAAW;IACX,oBAAoB;AACxB;;AAEA;IACI,aAAa;IACb,qCAAqC;IACrC,cAAc;IACd,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,sBAAsB;IACtB,SAAS;IACT,gBAAgB;IAChB,YAAY;IACZ,kBAAkB;IAClB,WAAW;AACf;;AAEA;IACI,mBAAmB;IACnB,UAAU;AACd;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,YAAY;IACZ,qBAAqB;;IAErB,iCAAiC;IACjC,oCAAoC;IACpC,mCAAmC;;IAEnC,sBAAsB;IACtB,yBAAyB;IACzB,2BAA2B;;IAE3B,kCAAkC;AACtC;;AAEA;IACI,yCAAyC;EAC3C;;AAEF;IACI,qBAAqB;IACrB,4BAA4B;IAC5B,cAAc;CACjB;;;AAGD;IACI,gBAAgB;EAClB;;AAEF;;;;GAIG;;AAEH;IACI,uBAAuB;IACvB,aAAa;AACjB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,iBAAiB;IACjB,cAAc;IACd,sBAAsB;IACtB,OAAO;AACX;;AAEA,WAAW;AACX;;IAEI;QACI,YAAY;QACZ,WAAW;QACX,eAAe;IACnB;IACA;QACI,YAAY;IAChB;IACA;QACI,aAAa;IACjB;;IAEA;QACI,aAAa;QACb,sBAAsB;QACtB,aAAa;QACb,YAAY;QACZ,iBAAiB;IACrB;;IAEA;QACI,mBAAmB;QACnB,8BAA8B;IAClC;IACA;QACI,QAAQ;IACZ;;AAEJ",sourcesContent:["button {\n    background: none;\n    font-size: 30px;\n    border: solid #131200;\n    color: #131200;\n    border-radius: 50%;\n    width: 45px;\n    height: 45px;\n    cursor: pointer;\n    \n}\n\nbutton:hover {\n    color: #e3e3e3;\n    border: solid #e3e3e3;\n    transition: color 150ms linear;\n}\n\n#projects {\n    display:flex;\n    flex-direction: column;\n    /* position: fixed; */\n    /* width: 100%; */\n    top: 20vh;\n    padding: 1rem 1rem 1rem 1rem;\n    transition: 300ms;\n    overflow: auto;\n    flex:1;\n}\n\n#project-section-header {\n    display: grid;\n    grid-template-rows: repeat(2, 1fr);\n    padding-bottom: 12px;\n    margin-top: 12px;\n}\n\n#status-labels {\n    align-content: center;\n    justify-items: center;\n    border-radius: 5px;\n}\n\n#new-project-button {\n    align-self: start;\n    height: 3rem;\n    width: 6rem;\n    margin-left: 2rem;\n    border-radius: 0%;\n    font-size: 18px;\n}\n\n.project-header {\n    display: grid;\n    grid-template-columns: 60% 40%;\n    border-radius: 8px;\n    padding: 1rem;\n    background: #0197F6;\n    align-items: center;\n    margin-bottom: 12px;\n}\n\n.head-lbl {\n    background: #e3e3e3;\n    height:100%;\n    width:100%;\n    text-align:center;\n}\n\n.project-options {\n    display:flex;\n    justify-content: space-evenly;\n    align-items: center;\n}\n\n.project-name {\n    font-size: 18px;\n    font-weight: bold;\n    color:#131200;\n    padding-left: 24px;\n}\n.project-name-change-button{\n    \n}\n\n.project-delete-button{\n}\n\n.project-collapse-button{\n}\n\n.new-task-button{\n    grid-row: 1;\n    grid-column-start: 1;\n}\n\n.project-status-wrapper {\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-gap: 12px;\n    padding: 0rem 2rem;\n    margin-top: -24px;\n}\n\n.project-status-col {\n    background: #e3e3e3;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    justify-content: start;\n    gap: 16px;\n    overflow: scroll;\n    height: 100%;\n    transition: all 1s;\n    grid-row: 2;\n}\n\n.hover {\n    background: #0197F6;\n    z-index:99;\n}\n\n.save{\n    /* background: ; */\n}\n\n.project-collapse-button::before {\n    content: ' ';\n    display: inline-block;\n\n    border-top: 5px solid transparent;\n    border-bottom: 5px solid transparent;\n    border-left: 5px solid currentColor;\n\n    vertical-align: middle;\n    /* margin-right: .7rem; */\n    transform: translateY(-2px);\n\n    transition: transform .2s ease-out;\n}\n\n.toggle-button-transition {\n    transform: rotate(90deg) translateX(-3px);\n  }\n\n.collapsed {\n    background-color: red;\n    transform: translateY(-100%);\n    max-height:0px;\n }\n\n\n.project {\n    overflow: hidden;\n  }\n  \n/* #expand-contract {\nborder-bottom: 1px solid red;\nmargin-top: -100%;\ntransition: all 1s;\n} */\n\n.project-status-col.expanded {\n    background-color: green;\n    margin-top: 0;\n}\n\n.hide{\n    display:none;\n}\n\n.clicked{\n    color: yellow;\n}\n\n#new-project {\n    display: flex;\n    align-items: start;\n    transition: 300ms;\n    overflow: auto;\n    flex-direction: column;\n    flex: 1;\n}\n\n/* Mobile */\n@media only screen and (max-width: 768px) {\n\n    button {\n        height: 35px;\n        width: 35px;\n        font-size: 20px;\n    }\n    #projects{\n        padding: 0px;\n    }\n    #project-section-header{\n        display: none;\n    }\n\n    .project-status-wrapper {\n        display: flex;\n        flex-direction: column;\n        grid-gap: 0px;\n        padding: 0px;\n        margin-top: -24px;\n    }\n\n    .project-header {\n        margin-bottom: 24px;\n        grid-template-columns: 50% 50%;\n    }\n    .project-status-col {\n        gap: 0px;\n    }\n\n}"],sourceRoot:""}]);const s=a},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var A=this[s][0];null!=A&&(a[A]=!0)}for(var d=0;d<n.length;d++){var c=[].concat(n[d]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),e.push(c))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var A=n[s],d=r.base?A[0]+r.base:A[0],c=i[d]||0,l="".concat(d," ").concat(c);i[d]=c+1;var u=t(l),p={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==u)e[u].references++,e[u].updater(p);else{var h=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:h,references:1})}a.push(l)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=t(i[a]);e[s].references--}for(var A=r(n,o),d=0;d<i.length;d++){var c=t(i[d]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=A}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{class n{constructor(n){this.name=n,this.tasks=[]}addTask(n){this.tasks.filter((e=>n.title!==e))&&this.tasks.push(n)}removeTask(n){this.tasks=this.tasks.filter((e=>e.title!==n))}filterTasks(n){let e,t=[];for(e=0;e<this.tasks.length;e++)this.tasks[e].title.toLowerCase().includes(n.toLowerCase())&&t.push(e);return this.tasks[t]}returnAllTasks(){return this.tasks}returnAllTaskTitles(){let n=[];for(let e of this.tasks)n.push(e.returnTitle());return console.log(n),n}returnProjectName(){return this.name}returnProjectNameWithNoWhitespace(){return this.name.replace(/\s+/g,"-")}returnProjectJSON(){let n=[];for(const e of this.tasks)n.push(e.returnItemJSON());return{name:this.returnProjectName(),tasks:n}}updateProjectName(n){this.name=n}}const e=(n,e,...t)=>{const r=document.createElement(n);for(let n in e)r.setAttribute(n,e[n]);return t.forEach((n=>{n instanceof Element?r.appendChild(n):r.appendChild(document.createTextNode(n))})),r};function r(n){n.preventDefault();const e=n.currentTarget,t=e.id,r=a(e,n.clientY),o=document.querySelector(".is-dragging"),i=o.dataset.project;console.log("onDragOver task project name",i),t.includes(i)&&(r?e.insertBefore(o,r):e.appendChild(o))}function o(n){n.preventDefault()}function i(n){const e=n.dataTransfer.getData("text"),t=n.currentTarget,r=document.querySelector(".is-dragging"),o=r.dataset.project;let i=t.id.includes(o),a=t.dataset.status;if(i){r.dataset.status=a;const t=new CustomEvent("statusChange",{detail:{id:e,newStatus:a}});document.dispatchEvent(t),n.dataTransfer.clearData()}}const a=(n,e)=>{const t=n.querySelectorAll(".mini-card:not(.is-dragging)");let r=null,o=Number.NEGATIVE_INFINITY;return t.forEach((n=>{const{top:t}=n.getBoundingClientRect(),i=e-t;i<0&&i>o&&(o=i,r=n)})),r},s=(Math.pow(10,8),864e5);function A(n){const e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new n.constructor(+n):"number"==typeof n||"[object Number]"===e||"string"==typeof n||"[object String]"===e?new Date(n):new Date(NaN)}function d(n){const e=A(n);return e.setHours(0,0,0,0),e}function c(n){const e=A(n),t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),+n-+t}function l(n,e){const t=A(n),r=A(e),o=u(t,r),i=Math.abs(function(n,e){const t=d(n),r=d(e),o=+t-c(t),i=+r-c(r);return Math.round((o-i)/s)}(t,r));t.setDate(t.getDate()-o*i);const a=o*(i-Number(u(t,r)===-o));return 0===a?0:a}function u(n,e){const t=n.getFullYear()-e.getFullYear()||n.getMonth()-e.getMonth()||n.getDate()-e.getDate()||n.getHours()-e.getHours()||n.getMinutes()-e.getMinutes()||n.getSeconds()-e.getSeconds()||n.getMilliseconds()-e.getMilliseconds();return t<0?-1:t>0?1:t}var p=t(72),h=t.n(p),C=t(825),g=t.n(C),m=t(659),B=t.n(m),f=t(56),b=t.n(f),I=t(540),x=t.n(I),j=t(113),y=t.n(j),w=t(97),v={};v.styleTagTransform=y(),v.setAttributes=b(),v.insert=B().bind(null,"head"),v.domAPI=g(),v.insertStyleElement=x(),h()(w.A,v),w.A&&w.A.locals&&w.A.locals;class k{constructor(n,e){this.task=e,this.projectRenderer=n}setProjectRenderer(n){this.projectRenderer=n}createFullCard(){const n=e("button",{id:"card-remove-button",class:"full-card-info"},"Delete Task");n.addEventListener("click",(n=>{const e=document.querySelector("#card-area");this.deleteTarget(e),this.projectRenderer.project.removeTask(this.task.title),this.projectRenderer.renderAndUpdateProject()}));let t=this.task.returnDueDate();const r=e("label",{id:"dueDate-label",for:"new-card-dueDate"},"Due: "),o=e("input",{id:"full-card-dueDate",class:"full-card-info",type:"date",value:t});o.value=t;const i=e("div",{id:"due-date"},r,o),a=e("label",{id:"priority-label",for:"new-card-priority"},"Priority:"),s=e("select",{id:"new-card-priority"},e("option",{value:"low"},"Low"),e("option",{value:"medium"},"Medium"),e("option",{value:"high"},"High"));s.value=this.task.priority;const A=e("div",{id:"priorities"},a,s),d=e("label",{id:"detail-label",for:"new-card-detail"},"Details:"),c=e("textarea",{id:"full-card-detail",class:"full-card-info",contenteditable:!0},this.task.detail),l=e("div",{id:"detail"},d,c),u=e("label",{id:"status-label",for:"new-card-detail"},"Status:"),p=e("select",{id:"full-card-status",class:"full-card-info",contenteditable:!1},e("option",{value:"not-started"},"Not Started"),e("option",{value:"in-progress"},"In Progress"),e("option",{value:"completed"},"Completed"));p.value=this.task.jobStatus;const h=e("div",{id:"status"},u,p),C=e("h2",{id:"full-card-title",class:"full-card-info",contenteditable:!0},this.task.title),g=e("div",{class:"full-card"},C,h,i,A,l,n),m=e("div",{class:"remove-bg",id:"remove-full-card-bg"},g),B=e("div",{id:"card-area"},g,m);return m.addEventListener("click",(n=>{this.task.updateTitle(C.innerHTML),this.task.updateStatus(p.value),this.task.updateDueDate(o.value),this.task.updateDetail(c.innerHTML),this.task.updatePriority(s.value),this.deleteParent(n),this.projectRenderer.renderAndUpdateProject(),console.log(this.projectRenderer.project.returnProjectJSON())})),B}createMinimizedCard(){const n=e("h1",{id:"mini-card-title",class:"mini-card-info"},`Title: ${this.task.title}`),t=e("h2",{id:"mini-card-status",class:"mini-card-info"}),r=e("h2",{id:"mini-card-dueDate",class:"mini-card-info"},`Due: ${this.task.dueDate}`),o=e("h2",{id:"mini-card-priority",class:"mini-card-info"},`Priority: ${this.task.priority.charAt(0).toUpperCase()+this.task.priority.slice(1)}`),i=e("div",{class:"mini-card",id:this.task.title.replace(/\s+/g,"-"),draggable:!0},n,r,o,t);i.setAttribute("data-project",this.projectRenderer.project.returnProjectNameWithNoWhitespace()),i.setAttribute("data-status",this.task.returnStatusAsHtmlData()),"not-started"==this.task.jobStatus?t.classList.add("not-started"):"in-progress"==this.task.jobStatus?t.classList.add("in-progress"):"completed"==this.task.jobStatus&&t.classList.add("completed"),i.addEventListener("click",(()=>{document.body.append(this.createFullCard(this.projectRenderer.project,this.task))})),i.addEventListener("dragstart",(n=>{!function(n){const e=n.target.id;n.dataTransfer.setData("text",e),n.target.classList.add("is-dragging")}(n)})),i.addEventListener("dragend",(n=>{n.target.classList.remove("is-dragging")}));const a=new Date;let s=l(this.task.returnDueDate(),a);return s>=7?r.classList.add("haveTime"):s<7&&s>=2?r.classList.add("shouldDo"):s<2&&r.classList.add("urgent"),"low"==this.task.priority?o.classList.add("haveTime"):"medium"==this.task.priority?o.classList.add("shouldDo"):"high"==this.task.priority&&o.classList.add("urgent"),i}deleteParent(n){n.currentTarget.parentNode.remove()}deleteTarget(n){n.remove()}returnStatus(){return this.task.jobStatus}}class E{constructor(n,e,t,r,o){this.title=n,this.jobStatus=e,this.priority=t,this.dueDate=r,this.detail=o,document.addEventListener("statusChange",(n=>{const e=n.detail.id,t=n.detail.newStatus;e===this.title&&(this.updateStatus(t),console.log(`Status of TodoItem ${this.title} changed to ${this.jobStatus}`))}))}updateStatus(n){this.jobStatus!=n&&(this.jobStatus=n,console.log(this.jobStatus))}updateDetail(n){this.detail=n}updateTitle(n){this.title=n}updatePriority(n){this.priority=n}updateDueDate(n){let e=n.replace("/","-").split("-");this.dueDate=e[0]+"-"+e[1]+"-"+e[2]}returnTitle(){return this.title}returnStatus(){return this.jobStatus}returnStatusAsHtmlData(){return this.jobStatus.replace(/\s+/g,"-")}returnPriority(){return this.priority}returnDueDate(){return this.dueDate}returnDetail(){return this.detail}returnItemJSON(){return{title:this.returnTitle(),status:this.returnStatus(),dueDate:this.returnDueDate(),priority:this.returnPriority(),detail:this.returnDetail()}}}const S=new class{constructor(){}throwError(n){throw new Error(n)}};var L=t(416),T={};T.styleTagTransform=y(),T.setAttributes=b(),T.insert=B().bind(null,"head"),T.domAPI=g(),T.insertStyleElement=x(),h()(L.A,T),L.A&&L.A.locals&&L.A.locals;class N{constructor(n){this.handler=n,this.projectList=this.handler.returnAllProjects(),this.DOM=document.querySelector(".sidebar")}getProjectList(){return this.handler.returnAllProjects()}getProjectTitles(){return this.handler.returnAllProjectTitles()}displayProjects(){const n=document.querySelector("#sidebar-project-list");n.hasChildNodes&&(n.innerHTML="");const t=this.getProjectList();for(let r of t){const t=e("li",{class:"project-list-item",id:`${r.returnProjectNameWithNoWhitespace()}-sidebar`},r.returnProjectName());t.addEventListener("click",(n=>{this.showSingleProject(r.returnProjectNameWithNoWhitespace()),n.target.classList.add("clicked")})),n.appendChild(t)}}showSingleProject(n){document.querySelectorAll(".project").forEach((n=>{n.classList.add("hide")})),document.querySelectorAll("li").forEach((n=>n.classList.remove("clicked"))),document.querySelector(`#${n}`).classList.remove("hide")}giveSidebarOpenButtonFunction(){const n=document.querySelector(".openbtn"),e=document.querySelector(".sidebar"),t=document.querySelector(".top"),r=document.querySelector("#projects"),o=document.querySelector("#new-project"),i=document.querySelector("#foot");n.addEventListener("click",(()=>{e.classList.toggle("sidebar--isHidden"),n.classList.toggle(".openbtn--isHidden"),e.classList.contains("sidebar--isHidden")?(window.matchMedia("(min-width: 768px)").matches&&(e.style.width="0",t.style.marginLeft="0px",r.style.marginLeft="0px",o.style.marginLeft="0px",i.style.marginLeft="0px"),n.innerHTML="☰"):(window.matchMedia("(min-width: 768px)").matches&&(e.style.width="250px",t.style.marginLeft="250px",r.style.marginLeft="250px",o.style.marginLeft="250px",i.style.marginLeft="250px"),n.innerHTML="X")}))}showAllProjects(){document.querySelectorAll(".project").forEach((n=>{n.classList.remove("hide")})),document.querySelectorAll("li").forEach((n=>n.classList.remove("clicked")))}giveShowAllFunction(){document.querySelector("#show-all").addEventListener("click",this.showAllProjects)}activateSidebar(){this.giveSidebarOpenButtonFunction(),this.giveShowAllFunction()}}class P{constructor(n,e,t){this.project=e,this.handler=n,this.sidebar=t,document.addEventListener("statusChange",(n=>{const e=n.detail.id.replaceAll("-"," ").toLowerCase(),t=n.detail.newStatus,r=this.project.returnAllTaskTitles();r.forEach((n=>n.toLowerCase())),r.includes(e)&&this.project.filterTasks(e).updateStatus(t)}))}clearAllChildren(n){n.innerHTML=""}renderAndUpdateProject(){const n=this.project.returnProjectNameWithNoWhitespace();document.querySelectorAll(`#${n} .project-status-col`).forEach((n=>{n.hasChildNodes()&&this.clearAllChildren(n)})),this.project.returnProjectJSON(),this.handler.updateLocalStorage(),this.placeTaskCardsIntoProjectDOM()}submitNewTask(){const n=document.querySelector("#new-card-title").value,e=document.querySelector("#new-card-dueDate").value,t=document.querySelector("#new-card-priority").value,r=document.querySelector("#new-card-detail").value;let o=new E(n,"not-started",t,e,r);this.project.addTask(o),this.handler.updateLocalStorage()}renderTaskCards(){const n=this.project.returnAllTasks();let e=[];for(let t of n){let n=new k(this,t);e.push(n)}return e}placeTaskCardsIntoProjectDOM(){let n=this.renderTaskCards();for(let e of n){let n=`#${e.returnStatus()}-${this.project.returnProjectNameWithNoWhitespace()}`;document.querySelector(n).appendChild(e.createMinimizedCard())}}getProject(){return this.project}updateIDsToNewProjectName(n,e){const t=document.querySelector(`#${n}-title`);let r=document.querySelector(`#${this.project.returnProjectNameWithNoWhitespace()}-edit`);"✎"!=r.innerHTML&&(r.innerHTML="✎"),document.querySelector(`#${n}`).setAttribute("id",e),document.querySelector(`#columns-${n}`).setAttribute("id",`#columns-${e}`);const o=document.querySelector(`#not-started-${n}`);o.setAttribute("id",`not-started-${e}`);const i=document.querySelector(`#in-progress-${n}`);i.setAttribute("id",`in-progress-${e}`);const a=document.querySelector(`#completed-${n}`);a.setAttribute("id",`completed-${e}`),t.setAttribute("id",`${e}-title`),r.setAttribute("id",`${e}-edit`),document.querySelector(`#${n}-delete`).setAttribute("id",`${e}-delete`),document.querySelector(`#${n}-collapse`).setAttribute("id",`${e}-collapse`),(o.hasChildNodes()||i.hasChildNodes()||a.hasChildNodes())&&(o.childNodes.forEach((n=>n.dataset.project=e)),i.childNodes.forEach((n=>n.dataset.project=e)),a.childNodes.forEach((n=>n.dataset.project=e))),this.project.updateProjectName(e),this.sidebar.displayProjects()}createNewTaskForm(){const n=e("input",{id:"new-card-title",class:"new-card-info",type:"text",placeholder:"New Task"}),t=e("label",{id:"dueDate-label",for:"new-card-dueDate"},"Due: "),r=e("input",{id:"new-card-dueDate",class:"new-card-info",type:"date"}),o=e("div",{id:"due-date"},t,r),i=e("label",{id:"priority-label",for:"new-card-priority"},"Priority:"),a=e("select",{id:"new-card-priority"},e("option",{value:"low"},"Low"),e("option",{value:"medium"},"Medium"),e("option",{value:"high"},"High")),s=e("div",{id:"priorities"},i,a),A=e("label",{id:"detail-label",for:"new-card-detail"},"Details:"),d=e("textarea",{id:"new-card-detail",class:"new-card-info",type:"text"}),c=e("div",{id:"detail"},A,d),l=e("button",{id:"new-card-create-button",class:"new-card-info"},"Create Task"),u=e("div",{class:"full-card"},n,c,s,o,l),p=e("div",{class:"remove-bg",id:"remove-full-card-bg"},u),h=e("div",{id:"card-area"},u,p);p.addEventListener("click",(function(n){n.currentTarget.parentNode.remove()})),l.addEventListener("click",(n=>{this.submitNewTask(this.project),this.renderAndUpdateProject(),n.currentTarget.parentNode.parentNode.remove()})),document.body.append(h)}createProjectDOM(n){this.renderProjectHeader(),this.renderProjectTaskColumns(n)}renderProjectHeader(){this.project;const n=e("button",{class:"new-task-button"},"+");n.addEventListener("click",(()=>{this.createNewTaskForm(this.project)}));const t=e("div",{class:"project-name",id:`${this.project.returnProjectNameWithNoWhitespace()}-title`},this.project.name),r=e("button",{class:"project-name-change-button",id:`${this.project.returnProjectNameWithNoWhitespace()}-edit`},"✎");r.addEventListener("click",(n=>{const e=document.querySelector(`#${this.project.returnProjectNameWithNoWhitespace()}`);if(r.classList.contains("save")){let n=e.id,o=t.innerHTML.replace(/\s+/g,"-");!function(n){n.innerHTML="✎",t.setAttribute("contenteditable",!1),n.classList.remove("save")}(r),this.updateIDsToNewProjectName(n,o),this.handler.updateLocalStorage()}else!function(n){t.setAttribute("contenteditable",!0),t.focus(),n.innerHTML="💾",n.classList.add("save")}(r),r.innerHTML="💾"}));const o=e("button",{class:"project-delete-button",id:`${this.project.returnProjectNameWithNoWhitespace()}-delete`},"🗑");o.addEventListener("click",(()=>{const n=document.querySelector(`#${this.project.returnProjectNameWithNoWhitespace()}`);this.handler.removeProject(this.project.name),n.remove(),this.sidebar.displayProjects()}));const i=e("button",{class:"project-collapse-button",id:`${this.project.returnProjectNameWithNoWhitespace()}-collapse`});i.addEventListener("click",(n=>{console.log(`#columns-${this.project.returnProjectNameWithNoWhitespace()}`);const e=n.target.parentNode.parentNode.nextSibling;console.log(e),e.classList.contains("collapsed")?(e.classList.remove("collapsed"),i.classList.remove("toggle-button-transition")):(e.classList.add("collapsed"),i.classList.add("toggle-button-transition"))}));const a=e("div",{class:"project-options"},r,n,o,i),s=e("div",{class:"project-header"},t,a);return t.addEventListener("input",(n=>{let e=document.querySelector(`#${this.project.returnProjectNameWithNoWhitespace()}-edit`);"✎"!=e.innerHTML&&(e.innerHTML="💾")})),s}renderProjectTaskColumns(n){const t=e("div",{class:"project-status-col",id:`not-started-${this.project.returnProjectNameWithNoWhitespace()}`});t.classList.add("not-started"),t.setAttribute("data-status","not-started"),t.addEventListener("dragover",(n=>{r(n)})),t.addEventListener("drop",(n=>{i(n)})),t.addEventListener("dragleave",(n=>{o(n)}));const a=e("div",{class:"project-status-col",id:`in-progress-${this.project.returnProjectNameWithNoWhitespace()}`});a.classList.add("in-progress"),a.setAttribute("data-status","in-progress"),a.addEventListener("dragover",(n=>{r(n)})),a.addEventListener("drop",(n=>{i(n)})),a.addEventListener("dragleave",(n=>{o(n)}));const s=e("div",{class:"project-status-col",id:`completed-${this.project.returnProjectNameWithNoWhitespace()}`});s.classList.add("completed"),s.setAttribute("data-status","completed"),s.addEventListener("dragover",(n=>{r(n)})),s.addEventListener("drop",(n=>{i(n)})),s.addEventListener("dragleave",(n=>{o(n)}));const A=e("div",{class:"project-status-wrapper",id:`columns-${this.project.returnProjectNameWithNoWhitespace()}`},t,a,s),d=this.renderProjectHeader(),c=e("div",{class:"project",id:this.project.returnProjectNameWithNoWhitespace()},d,A),l=document.querySelector("#projects");n?(document.querySelector("#project-section-header"),l.insertBefore(c,null)):l.insertBefore(c,null)}}var W=t(249),Q={};Q.styleTagTransform=y(),Q.setAttributes=b(),Q.insert=B().bind(null,"head"),Q.domAPI=g(),Q.insertStyleElement=x(),h()(W.A,Q),W.A&&W.A.locals&&W.A.locals;const D=new class{constructor(n){this.projectList=[],this.sidebar=n}addProject(n){this.projectList.some((e=>e.name===n.name))?S.throwError("Project Already Exists"):(this.projectList.push(n),this.updateLocalStorage())}removeProject(n){console.log(n);for(let e=0;e<this.projectList.length;e++)console.log(this.projectList[e].name),this.projectList[e].name==n&&this.projectList.splice(e,1);this.updateLocalStorage()}returnAllProjectTitles(){const n=[];for(const e of this.projectList)n.push(e.name);return n}returnAllProjects(){return this.projectList}returnSingleProject(n){let e,t=[];for(e=0;e<this.projectList.length;e++)this.projectList[e].name.toLowerCase().includes(n.toLowerCase())&&t.push(e);return this.projectList[t]}updateLocalStorage(){localStorage.setItem("projects",JSON.stringify(this.returnAllProjects()))}};if(function(n){let e;try{e=window.localStorage;const n="__storage_test__";return e.setItem(n,n),e.removeItem(n),!0}catch(n){return n instanceof DOMException&&(22===n.code||1014===n.code||"QuotaExceededError"===n.name||"NS_ERROR_DOM_QUOTA_REACHED"===n.name)&&e&&0!==e.length}}()){let e=JSON.parse(localStorage.getItem("projects"));if(console.log(e),null==e){const e=new E("Laundry","not-started","low","2024-04-17","Do the laundry and seperate by lights and darks:\nsocks\npants\nshirts"),t=new E("Dishes","completed","high","2024-04-15","dishes have piled up. do them quickly"),r=new n("Household Chores"),o=new E("Finish ToDo assignment","in-progress","medium","2024-04-24","Finish the Odin Project Todo Assignment so you can move on");r.addTask(e),r.addTask(t),D.addProject(r),new n("Odin Project").addTask(o)}else for(let t=0;t<e.length;t++){const r=new n(e[t].name);console.log(e[t]);for(const n of e[t].tasks){const e=new E(n.title,n.jobStatus,n.priority,n.dueDate,n.detail);r.addTask(e)}D.addProject(r),D.updateLocalStorage()}}let Y=new class{constructor(n){this.projectHandler=n,this.sidebar=new N(this.projectHandler)}setProjectHandler(n){this.projectHandler=n}setCreateNewProjectButton(){document.querySelector("#new-project-button").addEventListener("click",this.createSingleProject.bind(this))}createSingleProject(){const e="New Project";let t,r=1;const o=this.projectHandler.returnAllProjectTitles();if(o.includes(e))do{t=e+r,r+=1}while(o.includes(t));else t=e,r=1;const i=new n(t),a=new P(this.projectHandler,i,this.sidebar);this.projectHandler.addProject(i),a.createProjectDOM(!0),this.sidebar.displayProjects()}initialize(){const n=this.projectHandler.returnAllProjects();for(const e of n){const n=new P(this.projectHandler,e,this.sidebar);n.createProjectDOM(),n.placeTaskCardsIntoProjectDOM()}this.sidebar.activateSidebar(),this.sidebar.displayProjects(),this.setCreateNewProjectButton()}}(D);Y.initialize(D)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,